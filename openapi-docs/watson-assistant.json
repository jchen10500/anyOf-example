{
    "openapi": "3.0.0",
    "info": {
      "version": "2.0",
      "title": "Watson Assistant v2",
      "description": "The IBM Watson&trade; Assistant service combines machine learning, natural language understanding, and an integrated dialog editor to create conversation flows between your apps and your users.\n\nThe Assistant v2 API provides runtime methods your client application can use to send user input to an assistant and receive a response.",
      "x-version-date": "2021-06-14",
      "x-sdk-supported-languages": [
        "java",
        "node",
        "python",
        "ruby",
        "go",
        "swift",
        "dotnet-standard",
        "unity"
      ],
      "x-vcap-service-name": "conversation",
      "x-alternate-name": "Assistant",
      "x-codegen-config": {
        "includeExternalConfig": true,
        "supportNodeCallbacks": true,
        "dotnet-standard": {
          "apiPackage": "IBM.Watson"
        },
        "go": {
          "apiPackage": "github.com/watson-developer-cloud/go-sdk"
        },
        "cli": {
          "apiPackage": "cli-watson-plugin",
          "cliPluginName": "watson",
          "serviceCommandName": "assistant-v2"
        },
        "java": {
          "apiPackage": "com.ibm.watson"
        },
        "python": {
          "apiPackage": "ibm_watson"
        },
        "swift": {
          "resterror-alias": "WatsonError",
          "restresponse-alias": "WatsonResponse"
        }
      },
      "x-last-updated": "2021-07-15"
    },
    "security": [
      {
        "IAM": []
      }
    ],
    "externalDocs": {
      "description": "For more information about this service, see the docs.",
      "url": "https://cloud.ibm.com/docs/assistant",
      "x-information-security": "https://cloud.ibm.com/docs/assistant?topic=assistant-information-security",
      "x-release-notes": "https://cloud.ibm.com/docs/assistant?topic=assistant-release-notes"
    },
    "x-doc-properties": [
      "assistantAccessControl",
      "assistantDataCollection",
      "hasCustomEndpoints",
      "hasDataLabels",
      "hasPreviousVersion",
      "hasRateLimiting",
      "hasRelatedApis",
      "toolAuthorization",
      "publicDefinition"
    ],
    "x-rate-limit-enabled": true,
    "tags": [
      {
        "name": "Sessions"
      },
      {
        "name": "Message"
      },
      {
        "name": "Bulk classify",
        "description": "Identify intents and entities in multiple user utterances."
      },
      {
        "name": "Logs"
      },
      {
        "name": "User data"
      }
    ],
    "paths": {
      "/v2/assistants/{assistant_id}/sessions/{session_id}/message": {
        "post": {
          "operationId": "message",
          "summary": "Send user input to assistant (stateful)",
          "description": "Send user input to an assistant and receive a response, with conversation state (including context data) stored by Watson Assistant for the duration of the session.",
          "tags": [
            "Message"
          ],
          "parameters": [
            {
              "$ref": "#/components/parameters/AssistantPathParam"
            },
            {
              "$ref": "#/components/parameters/SessionPathParam"
            },
            {
              "$ref": "#/components/parameters/VersionQueryParam"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRequest"
                }
              }
            },
            "description": "The message to be sent. This includes the user's input, along with optional content such as intents and entities."
          },
          "x-codegen-request-body-name": "request",
          "responses": {
            "200": {
              "description": "Successful request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessageResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "output": {
                          "generic": [
                            {
                              "response_type": "text",
                              "text": "Hello! What can I do for you?"
                            }
                          ],
                          "intents": [
                            {
                              "intent": "hello",
                              "confidence": 0.9281370162963867
                            }
                          ],
                          "entities": []
                        },
                        "context": {
                          "global": {
                            "system": {
                              "turn_count": 1,
                              "user_id": "55cd47b1-3847-430b-ba28-1739e0654576"
                            },
                            "session_id": "55cd47b1-3847-430b-ba28-1739e0654576"
                          },
                          "skills": {
                            "main skill": {
                              "system": {
                                "state": "eyJzZXNzaW9uX2lkIjoiNTVjZDQ3YjEtMzg0Ny00MzBiLWJhMjgtMTczOWUwNjU0NTc2Iiwic2tpbGxfcmVmZXJlbmNlIjoibWFpbiBza2lsbCIsImFzc2lzdGFudF9pZCI6ImViM2RmZGRlLTJkNDUtNDBmYS05NDZlLTk2ODVmNTU2NzhhOSIsImluaXRpYWxpemVkIjp0cnVlLCJkaWFsb2dfc3RhY2siOlt7ImRpYWxvZ19ub2RlIjoicm9vdCJ9XSwibGFzdF9icmFuY2hfbm9kZSI6ImdyZWV0aW5nX29wdGlvbl8zIn0="
                              }
                            }
                          }
                        },
                        "user_id": "55cd47b1-3847-430b-ba28-1739e0654576"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -X POST -u \"apikey:{apikey}\" \\\n",
                        "--header \"Content-Type:application/json\" \\\n",
                        "--data \"{\\\"input\\\": {\\\"text\\\": \\\"Hello\\\"}}\" \\\n",
                        "\"{url}/v2/assistants/{assistant_id}/sessions/{session_id}/message?version=2021-06-14\""
                      ]
                    }
                  ]
                },
                {
                  "name": "Example including context",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -X POST -u \"apikey:{apikey}\" \\\n",
                        "--header \"Content-Type: application/json\" \\\n",
                        "--data \"{\\\"input\\\": {\\\"text\\\": \\\"Hello\\\", \\\"options\\\": {\\\"return_context\\\": true}}, \\\"context\\\": {\\\"global\\\": {\\\"system\\\": {\\\"user_id\\\": \\\"my_user_id\\\"}}, \\\"skills\\\": {\\\"main skill\\\": {\\\"user_defined\\\": {\\\"account_number\\\": \\\"123456\\\"}}}}}\" \\\n",
                        "\"{url}/v2/assistants/{assistant_id}/sessions/{session_id}/message?version=2021-06-14\""
                      ]
                    }
                  ]
                }
              ],
              "dotnet-standard": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        "    );\n",
                        "\n",
                        "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "var result = assistant.Message(\n",
                        "    assistantId: \"{assistantId}\",\n",
                        "    sessionId: \"{sessionId}\",\n",
                        "    input: new MessageInput()\n",
                        "    {\n",
                        "        Text = \"Hello\"\n",
                        "    }\n",
                        "    );\n",
                        "\n",
                        "Console.WriteLine(result.Response);"
                      ]
                    }
                  ]
                },
                {
                  "name": "Example including context",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        "    );\n",
                        "\n",
                        "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "MessageContextSkills skills = new MessageContextSkills();\n",
                        "MessageContextSkill skill = new MessageContextSkill();\n",
                        "Dictionary<string, object> userDefinedDictionary = new Dictionary<string, object>();\n",
                        "\n",
                        "userDefinedDictionary.Add(\"account_number\", \"123456\");\n",
                        "skill.UserDefined = userDefinedDictionary;\n",
                        "skills.Add(\"main skill\", skill);\n",
                        "\n",
                        "var result = assistant.Message(\n",
                        "    assistantId: \"{assistantId}\",\n",
                        "    sessionId: \"{sessionId}\",\n",
                        "    input: new MessageInput()\n",
                        "    {\n",
                        "        Text = \"Hello\"\n",
                        "    },\n",
                        "    context: new MessageContext()\n",
                        "    {\n",
                        "        Global = new MessageContextGlobal()\n",
                        "        {\n",
                        "            System = new MessageContextGlobalSystem()\n",
                        "            {\n",
                        "                UserId = \"my_user_id\"\n",
                        "            }\n",
                        "        },\n",
                        "        Skills = skills\n",
                        "    }\n",
                        "    );\n",
                        "\n",
                        "Console.WriteLine(result.Response);"
                      ]
                    }
                  ]
                }
              ],
              "go": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "package main\n",
                        "\n",
                        "import (\n",
                        "  \"encoding/json\"\n",
                        "  \"fmt\"\n",
                        "  \"github.com/IBM/go-sdk-core/core\"\n",
                        "  \"github.com/watson-developer-cloud/go-sdk/assistantv2\"\n",
                        ")\n",
                        "\n",
                        "func main() {\n",
                        "  authenticator := &core.IamAuthenticator{\n",
                        "    ApiKey: \"{apikey}\",\n",
                        "  }\n",
                        "\n",
                        "  options := &assistantv2.AssistantV2Options{\n",
                        "    Version: \"2021-06-14\",\n",
                        "    Authenticator: authenticator,\n",
                        "  }\n",
                        "\n",
                        "  assistant, assistantErr := assistantv2.NewAssistantV2(options)\n",
                        "\n",
                        "  if assistantErr != nil {\n",
                        "    panic(assistantErr)\n",
                        "  }\n",
                        "\n",
                        "  assistant.SetServiceURL(\"{url}\")\n",
                        "\n",
                        "  result, _, responseErr := assistant.Message(\n",
                        "    &assistantv2.MessageOptions{\n",
                        "      AssistantID: core.StringPtr(\"{assistant_id}\"),\n",
                        "      SessionID: core.StringPtr(\"{session_id}\"),\n",
                        "      Input: &assistantv2.MessageInput{\n",
                        "        MessageType: core.StringPtr(\"text\"),\n",
                        "        Text: core.StringPtr(\"Hello\"),\n",
                        "     },\n",
                        "    },\n",
                        "  )\n",
                        "  if responseErr != nil {\n",
                        "    panic(responseErr)\n",
                        "  }\n",
                        "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                        "  fmt.Println(string(b))\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "java": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                        "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                        "assistant.setServiceUrl(\"{url}\");\n",
                        "\n",
                        "MessageInput input = new MessageInput.Builder()\n",
                        "  .messageType(\"text\")\n",
                        "  .text(\"Hello\")\n",
                        "  .build();\n",
                        "\n",
                        "MessageOptions options = new MessageOptions.Builder(\"{assistant_id}\", \"{session_id}\")\n",
                        "  .input(input)\n",
                        "  .build();\n",
                        "\n",
                        "MessageResponse response = assistant.message(options).execute().getResult();\n",
                        "\n",
                        "System.out.println(response);"
                      ]
                    }
                  ]
                },
                {
                  "name": "Example including context",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "Authenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                        "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                        "assistant.setServiceUrl(\"{url}\");\n",
                        "\n",
                        "MessageInputOptions inputOptions = new MessageInputOptions.Builder()\n",
                        "  .returnContext(true)\n",
                        "  .build();\n",
                        "\n",
                        "MessageInput input = new MessageInput.Builder()\n",
                        "  .messageType(\"text\")\n",
                        "  .text(\"Hello\")\n",
                        "  .options(inputOptions)\n",
                        "  .build();\n",
                        "\n",
                        "MessageContextGlobalSystem system = new MessageContextGlobalSystem.Builder()\n",
                        "  .userId(\"my_user_id\")\n",
                        "  .build();\n",
                        "MessageContextGlobal globalContext = new MessageContextGlobal.Builder()\n",
                        "  .system(system)\n",
                        "  .build();\n",
                        "\n",
                        "Map<String, Object> userDefinedContext = new HashMap<>();\n",
                        "userDefinedContext.put(\"account_num\",\"123456\");\n",
                        "MessageContextSkill mainSkillContext = new MessageContextSkill.Builder()\n",
                        "  .userDefined(userDefinedContext)\n",
                        "  .build();\n",
                        "MessageContextSkills skillsContext = new MessageContextSkills();\n",
                        "skillsContext.put(\"main skill\", mainSkillContext);\n",
                        "\n",
                        "MessageContext context = new MessageContext.Builder()\n",
                        "  .global(globalContext)\n",
                        "  .skills(skillsContext)\n",
                        "  .build();\n",
                        "\n",
                        "MessageOptions options = new MessageOptions.Builder()\n",
                        "  .assistantId(\"{assistant_id}\")\n",
                        "  .sessionId(\"{session_id}\")\n",
                        "  .input(input)\n",
                        "  .context(context)\n",
                        "  .build();\n",
                        "\n",
                        "MessageResponse response = service.message(options).execute().getResult();\n",
                        "\n",
                        "System.out.println(response);"
                      ]
                    }
                  ]
                }
              ],
              "node": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "const AssistantV2 = require('ibm-watson/assistant/v2');\n",
                        "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                        "\n",
                        "const assistant = new AssistantV2({\n",
                        "  version: '2021-06-14',\n",
                        "  authenticator: new IamAuthenticator({\n",
                        "    apikey: '{apikey}',\n",
                        "  }),\n",
                        "  serviceUrl: '{url}',\n",
                        "});\n",
                        "\n",
                        "assistant.message({\n",
                        "  assistantId: '{assistant_id}',\n",
                        "  sessionId: '{session_id}',\n",
                        "  input: {\n",
                        "    'message_type': 'text',\n",
                        "    'text': 'Hello'\n",
                        "    }\n",
                        "  })\n",
                        "  .then(res => {\n",
                        "    console.log(JSON.stringify(res.result, null, 2));\n",
                        "  })\n",
                        "  .catch(err => {\n",
                        "    console.log(err);\n",
                        "  });"
                      ]
                    }
                  ]
                },
                {
                  "name": "Example including context",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "const AssistantV2 = require('ibm-watson/assistant/v2');\n",
                        "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                        "\n",
                        "const assistant = new AssistantV2({\n",
                        "  version: '2021-06-14',\n",
                        "  authenticator: new IamAuthenticator({\n",
                        "    apikey: '{apikey}',\n",
                        "  }),\n",
                        "  serviceUrl: '{url}',\n",
                        "});\n",
                        "\n",
                        "assistant.message({\n",
                        "  assistantId: '{assistant_id}',\n",
                        "  sessionId: '{session_id}',\n",
                        "  input: {\n",
                        "    'message_type': 'text',\n",
                        "    'text': 'Hello',\n",
                        "    'options': {\n",
                        "      'return_context': true\n",
                        "    }\n",
                        "  },\n",
                        "  context: {\n",
                        "    'global': {\n",
                        "      'system': {\n",
                        "        'user_id': 'my_user_id'\n",
                        "      }\n",
                        "    },\n",
                        "    'skills': {\n",
                        "      'main skill': {\n",
                        "        'user_defined': {\n",
                        "          'account_number': '123456'\n",
                        "        }\n",
                        "      }\n",
                        "    }\n",
                        "  }\n",
                        "})\n",
                        "  .then(res => {\n",
                        "    console.log(JSON.stringify(res.result, null, 2));\n",
                        "  })\n",
                        "  .catch(err => {\n",
                        "    console.log(err);\n",
                        "  });"
                      ]
                    }
                  ]
                }
              ],
              "python": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "import json\n",
                        "from ibm_watson import AssistantV2\n",
                        "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                        "\n",
                        "authenticator = IAMAuthenticator('{apikey}')\n",
                        "assistant = AssistantV2(\n",
                        "    version='2021-06-14',\n",
                        "    authenticator = authenticator\n",
                        ")\n",
                        "\n",
                        "assistant.set_service_url('{url}')\n",
                        "\n",
                        "response = assistant.message(\n",
                        "    assistant_id='{assistant_id}',\n",
                        "    session_id='{session_id}',\n",
                        "    input={\n",
                        "        'message_type': 'text',\n",
                        "        'text': 'Hello'\n",
                        "    }\n",
                        ").get_result()\n",
                        "\n",
                        "print(json.dumps(response, indent=2))"
                      ]
                    }
                  ]
                },
                {
                  "name": "Example including context",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "import json\n",
                        "from ibm_watson import AssistantV2\n",
                        "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                        "\n",
                        "authenticator = IAMAuthenticator('{apikey}')\n",
                        "assistant = AssistantV2(\n",
                        "    version='2021-06-14',\n",
                        "    authenticator = authenticator\n",
                        ")\n",
                        "\n",
                        "assistant.set_service_url('{url}')\n",
                        "\n",
                        "response=assistant.message(\n",
                        "    assistant_id='{assistant_id}',\n",
                        "    session_id='{session_id}',\n",
                        "    input={\n",
                        "        'message_type': 'text',\n",
                        "        'text': 'Hello',\n",
                        "        'options': {\n",
                        "            'return_context': True\n",
                        "        }\n",
                        "    },\n",
                        "    context={\n",
                        "        'global': {\n",
                        "            'system': {\n",
                        "                'user_id': 'my_user_id'\n",
                        "            }\n",
                        "        },\n",
                        "        'skills': {\n",
                        "            'main skill': {\n",
                        "                'user_defined': {\n",
                        "                    'account_number': '123456'\n",
                        "                }\n",
                        "            }\n",
                        "        }\n",
                        "    }\n",
                        ").get_result()\n",
                        "\n",
                        "print(json.dumps(response, indent=2))"
                      ]
                    }
                  ]
                }
              ],
              "ruby": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "require \"json\"\n",
                        "require \"ibm_watson/authenticators\"\n",
                        "require \"ibm_watson/assistant_v2\"\n",
                        "include IBMWatson\n",
                        "\n",
                        "authenticator = Authenticators::IamAuthenticator.new(\n",
                        "  apikey: \"{apikey}\"\n",
                        ")\n",
                        "\n",
                        "assistant = AssistantV2.new(\n",
                        "  version: \"2021-06-14\",\n",
                        "  authenticator: authenticator\n",
                        ")\n",
                        "assistant.service_url = \"{url}\"\n",
                        "\n",
                        "response = assistant.message(\n",
                        "  assistant_id: \"{assistant_id}\",\n",
                        "  session_id: \"{session_id}\",\n",
                        "  input: {\n",
                        "    text: \"Hello\"\n",
                        "  }\n",
                        ")\n",
                        "\n",
                        "puts JSON.pretty_generate(response.result)"
                      ]
                    }
                  ]
                },
                {
                  "name": "Example including context",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "require \"json\"\n",
                        "require \"ibm_watson/authenticators\"\n",
                        "require \"ibm_watson/assistant_v2\"\n",
                        "include IBMWatson\n",
                        "\n",
                        "authenticator = Authenticators::IamAuthenticator.new(\n",
                        "  apikey: \"{apikey}\"\n",
                        ")\n",
                        "\n",
                        "assistant = AssistantV2.new(\n",
                        "  version: \"2021-06-14\",\n",
                        "  authenticator: authenticator\n",
                        ")\n",
                        "assistant.service_url = \"{url}\"\n",
                        "\n",
                        "response = assistant.message(\n",
                        "  assistant_id: \"{assistant_id}\",\n",
                        "  session_id: \"{session_id}\",\n",
                        "  input: {\n",
                        "    text: \"Hello\"\n",
                        "  },\n",
                        "  context: {\n",
                        "    \"global\": {\n",
                        "      \"system\": {\n",
                        "        \"user_id\": \"my_user_id\"\n",
                        "      }\n",
                        "    },\n",
                        "    \"skills\": {\n",
                        "      \"main skill\": {\n",
                        "        \"user_defined\": {\n",
                        "          \"account_number\": \"123456\"\n",
                        "        }\n",
                        "      }\n",
                        "    }\n",
                        "  }\n",
                        ")\n",
                        "\n",
                        "puts JSON.pretty_generate(response.result)"
                      ]
                    }
                  ]
                }
              ],
              "swift": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                        "let assistant = Assistant(version: \"2021-06-14\", authenticator: authenticator)\n",
                        "assistant.serviceURL = \"{url}\"\n",
                        "\n",
                        "let input = MessageInput(messageType: \"text\", text: \"Hello\")\n",
                        "\n",
                        "assistant.message(assistantID: \"{assistant_id}\", sessionID: \"{session_id}\", input: input) {\n",
                        "  response, error in\n",
                        "\n",
                        "  guard let message = response?.result else {\n",
                        "    print(error?.localizedDescription ?? \"unknown error\")\n",
                        "    return\n",
                        "  }\n",
                        "\n",
                        "  print(message)\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "unity": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "var authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        ");\n",
                        "\n",
                        "while (!authenticator.CanAuthenticate())\n",
                        "    yield return null;\n",
                        "\n",
                        "var assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "MessageResponse messageResponse = null;\n",
                        "assistant.Message(\n",
                        "    callback: (DetailedResponse<MessageResponse> response, IBMError error) =>\n",
                        "    {\n",
                        "        Log.Debug(\"AssistantV2\", \"result: {0}\", response.Response);\n",
                        "        messageResponse = response.Result;\n",
                        "    },\n",
                        "    assistantId: \"{assistantId}\",\n",
                        "    sessionId: \"{sessionId}\",\n",
                        "    input: new MessageInput()\n",
                        "    {\n",
                        "        Text = \"Hello\"\n",
                        "    }\n",
                        ");\n",
                        "\n",
                        "while (messageResponse == null)\n",
                        "    yield return null;"
                      ]
                    }
                  ]
                },
                {
                  "name": "Example including context",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "var authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        ");\n",
                        "\n",
                        "while (!authenticator.CanAuthenticate())\n",
                        "    yield return null;\n",
                        "\n",
                        "var assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "MessageContextSkills skills = new MessageContextSkills();\n",
                        "MessageContextSkill skill = new MessageContextSkill();\n",
                        "skill.UserDefined.Add(\"account_number\", \"123456\");\n",
                        "skills.Add(\"main skill\", skill);\n",
                        "\n",
                        "MessageResponse messageResponse = null;\n",
                        "assistant.Message(\n",
                        "    callback: (DetailedResponse<MessageResponse> response, IBMError error) =>\n",
                        "    {\n",
                        "        Log.Debug(\"AssistantV2\", \"result: {0}\", response.Response);\n",
                        "        messageResponse = response.Result;\n",
                        "    },\n",
                        "    assistantId: \"{assistantId}\",\n",
                        "    sessionId: \"{sessionId}\",\n",
                        "    input: new MessageInput()\n",
                        "    {\n",
                        "        Text = \"Hello\"\n",
                        "    },\n",
                        "    context: new MessageContext()\n",
                        "    {\n",
                        "        Global = new MessageContextGlobal()\n",
                        "        {\n",
                        "            System = new MessageContextGlobalSystem()\n",
                        "            {\n",
                        "                UserId = \"my_user_id\"\n",
                        "            }\n",
                        "        },\n",
                        "        Skills = skills\n",
                        "    }\n",
                        ");\n",
                        "\n",
                        "while (messageResponse == null)\n",
                        "    yield return null;"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/v2/assistants/{assistant_id}/message": {
        "post": {
          "operationId": "messageStateless",
          "summary": "Send user input to assistant (stateless)",
          "description": "Send user input to an assistant and receive a response, with conversation state (including context data) managed by your application.",
          "tags": [
            "Message"
          ],
          "parameters": [
            {
              "$ref": "#/components/parameters/AssistantPathParam"
            },
            {
              "$ref": "#/components/parameters/VersionQueryParam"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageRequestStateless"
                }
              }
            },
            "description": "The message to be sent. This includes the user's input, context data, and optional content such as intents and entities."
          },
          "x-codegen-request-body-name": "request",
          "responses": {
            "200": {
              "description": "Successful request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/MessageResponseStateless"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "output": {
                          "intents": [
                            {
                              "intent": "hello",
                              "confidence": 0.9281370162963867
                            }
                          ],
                          "entities": [],
                          "generic": [
                            {
                              "response_type": "text",
                              "text": "Hello! What can I do for you?"
                            }
                          ]
                        },
                        "context": {
                          "global": {
                            "system": {
                              "turn_count": 1,
                              "user_id": "f7b515ef-9802-431a-8639-cf61fcd0b963"
                            },
                            "session_id": "f7b515ef-9802-431a-8639-cf61fcd0b963"
                          },
                          "skills": {
                            "main skill": {
                              "system": {
                                "state": "eyJzZXNzaW9uX2lkIjoiZjdiNTE1ZWYtOTgwMi00MzFhLTg2MzktY2Y2MWZjZDBiOTYzIiwic2tpbGxfcmVmZXJlbmNlIjoibWFpbiBza2lsbCIsImFzc2lzdGFudF9pZCI6ImViM2RmZGRlLTJkNDUtNDBmYS05NDZlLTk2ODVmNTU2NzhhOSIsImluaXRpYWxpemVkIjp0cnVlLCJkaWFsb2dfc3RhY2siOlt7ImRpYWxvZ19ub2RlIjoicm9vdCJ9XSwiX25vZGVfb3V0cHV0X21hcCI6eyJub2RlXzJfMTU4OTMwNDc4NDQ5MSI6eyIwIjpbMF19fSwibGFzdF9icmFuY2hfbm9kZSI6Im5vZGVfMl8xNTg5MzA0Nzg0NDkxIn0="
                              }
                            }
                          }
                        },
                        "user_id": "f7b515ef-9802-431a-8639-cf61fcd0b963"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -X POST -u \"apikey:{apikey}\" \\\n",
                        "--header \"Content-Type:application/json\" \\\n",
                        "--data \"{\\\"input\\\": {\\\"text\\\": \\\"Hello\\\"}}\" \\\n",
                        "\"{url}/v2/assistants/{assistant_id}/message?version=2021-06-14\""
                      ]
                    }
                  ]
                }
              ],
              "dotnet-standard": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        "    );\n",
                        "\n",
                        "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "var result = assistant.MessageStateless(\n",
                        "    assistantId: \"{assistantId}\",\n",
                        "    input: new MessageInputStateless()\n",
                        "    {\n",
                        "        Text = \"Hello\"\n",
                        "    }\n",
                        "    );\n",
                        "\n",
                        "Console.WriteLine(result.Response);"
                      ]
                    }
                  ]
                }
              ],
              "go": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "package main\n",
                        "\n",
                        "import (\n",
                        "  \"encoding/json\"\n",
                        "  \"fmt\"\n",
                        "  \"github.com/IBM/go-sdk-core/core\"\n",
                        "  \"github.com/watson-developer-cloud/go-sdk/assistantv2\"\n",
                        ")\n",
                        "\n",
                        "func main() {\n",
                        "  authenticator := &core.IamAuthenticator{\n",
                        "    ApiKey: \"{apikey}\",\n",
                        "  }\n",
                        "\n",
                        "  options := &assistantv2.AssistantV2Options{\n",
                        "    Version: \"2021-06-14\",\n",
                        "    Authenticator: authenticator,\n",
                        "  }\n",
                        "\n",
                        "  assistant, assistantErr := assistantv2.NewAssistantV2(options)\n",
                        "\n",
                        "  if assistantErr != nil {\n",
                        "    panic(assistantErr)\n",
                        "  }\n",
                        "\n",
                        "  assistant.SetServiceURL(\"{url}\")\t\n",
                        "\n",
                        "  result, _, responseErr := assistant.\n",
                        "    MessageStateless(&assistantv2.MessageStatelessOptions{\n",
                        "      AssistantID: core.StringPtr(\"{assistant_id}\"),\n",
                        "      Input: &assistantv2.MessageInputStateless{\n",
                        "        MessageType: core.StringPtr(\"text\"),\n",
                        "        Text: core.StringPtr(\"Hello\"),\n",
                        "      },\n",
                        "    },\n",
                        "  )\n",
                        "\n",
                        "  if responseErr != nil {\n",
                        "    panic(responseErr)\n",
                        "  }\n",
                        "\n",
                        "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                        "  fmt.Println(string(b))"
                      ]
                    }
                  ]
                }
              ],
              "java": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                        "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                        "assistant.setServiceUrl(\"{url}\");\n",
                        "\n",
                        "MessageInputStateless input = new MessageInputStateless.Builder()\n",
                        "  .messageType(\"text\")\n",
                        "  .text(\"Hello\")\n",
                        "  .build();\n",
                        "\n",
                        "MessageStatelessOptions options = new MessageStatelessOptions.Builder()\n",
                        "  .assistantId(\"{assistant_id}\")\n",
                        "  .input(input)\n",
                        "  .build();\n",
                        "\n",
                        "MessageResponseStateless response = assistant.messageStateless(options)\n",
                        "  .execute()\n",
                        "  .getResult();\n",
                        "\n",
                        "System.out.println(response);"
                      ]
                    }
                  ]
                }
              ],
              "node": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "const AssistantV2 = require('ibm-watson/assistant/v2');\n",
                        "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                        "\n",
                        "const assistant = new AssistantV2({\n",
                        "  version: '2021-06-14',\n",
                        "  authenticator: new IamAuthenticator({\n",
                        "    apikey: '{apikey}',\n",
                        "  }),\n",
                        "  serviceUrl: '{url}',\n",
                        "});\n",
                        "\n",
                        "assistant\n",
                        "  .messageStateless({\n",
                        "    assistantId: '{assistant_id}',\n",
                        "    input: {\n",
                        "      'message_type': 'text',\n",
                        "      'text': 'Hello',\n",
                        "    }\n",
                        "  })\n",
                        "  .then(res => {\n",
                        "    console.log(JSON.stringify(res.result, null, 2));\n",
                        "  })\n",
                        "  .catch(err => {\n",
                        "    console.log(err);\n",
                        "  });\n"
                      ]
                    }
                  ]
                }
              ],
              "python": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "import json\n",
                        "from ibm_watson import AssistantV2\n",
                        "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                        "\n",
                        "authenticator = IAMAuthenticator('{apikey}')\n",
                        "assistant = AssistantV2(\n",
                        "    version='2021-06-14',\n",
                        "    authenticator = authenticator\n",
                        ")\n",
                        "\n",
                        "assistant.set_service_url('{url}')\n",
                        "\n",
                        "response = assistant.message_stateless(\n",
                        "    assistant_id='{assistant_id}',\n",
                        "    input={\n",
                        "        'message_type': 'text',\n",
                        "        'text': 'Hello'\n",
                        "    }\n",
                        ").get_result()\n",
                        "\n",
                        "print(json.dumps(response, indent=2))"
                      ]
                    }
                  ]
                }
              ],
              "ruby": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "require \"json\"\n",
                        "require \"ibm_watson/authenticators\"\n",
                        "require \"ibm_watson/assistant_v2\"\n",
                        "include IBMWatson\n",
                        "\n",
                        "authenticator = Authenticators::IamAuthenticator.new(\n",
                        "  apikey: \"{apikey}\"\n",
                        ")\n",
                        "\n",
                        "assistant = AssistantV2.new(\n",
                        "  version: \"2021-06-14\",\n",
                        "  authenticator: authenticator\n",
                        ")\n",
                        "assistant.service_url = \"{url}\"\n",
                        "\n",
                        "response = assistant.message_stateless(\n",
                        "  assistant_id: \"{assistant_id}\",\n",
                        "  input: {\n",
                        "    text: \"Hello\"\n",
                        "  }\n",
                        ")\n",
                        "\n",
                        "puts JSON.pretty_generate(response.result)"
                      ]
                    }
                  ]
                }
              ],
              "swift": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                        "let assistant = Assistant(version: \"2021-06-14\", authenticator: authenticator)\n",
                        "assistant.serviceURL = \"{url}\"\n",
                        "\n",
                        "let input = MessageInputStateless(messageType: \"text\", text: \"Hello\")\n",
                        "\n",
                        "assistant.messageStateless(assistantID: \"{assistant_id}, input: input) {\n",
                        "    response, error in\n",
                        "\n",
                        "    guard let message = response?.result else {\n",
                        "        print(error?.localizedDescription ?? \"unknown error\")\n",
                        "        return\n",
                        "    }\n",
                        "\n",
                        "    print(message)\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "unity": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "var authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        ");\n",
                        "\n",
                        "while (!authenticator.CanAuthenticate())\n",
                        "    yield return null;\n",
                        "\n",
                        "var assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "MessageResponseStateless messageResponse = null;\n",
                        "assistant.MessageStateless(\n",
                        "    callback: (DetailedResponse<MessageResponseStateless> response, IBMError error) =>\n",
                        "    {\n",
                        "        Log.Debug(\"AssistantV2\", \"result: {0}\", response.Response);\n",
                        "        messageResponse = response.Result;\n",
                        "    },\n",
                        "    assistantId: \"{assistantId}\",\n",
                        "    input: new MessageInputStateless()\n",
                        "    {\n",
                        "        Text = \"Hello\"\n",
                        "    }\n",
                        ");\n",
                        "\n",
                        "while (messageResponse == null)\n",
                        "    yield return null;"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/v2/assistants/{assistant_id}/sessions": {
        "parameters": [
          {
            "$ref": "#/components/parameters/AssistantPathParam"
          },
          {
            "$ref": "#/components/parameters/VersionQueryParam"
          }
        ],
        "post": {
          "operationId": "createSession",
          "summary": "Create a session",
          "description": "Create a new session. A session is used to send user input to a skill and receive responses. It also maintains the state of the conversation. A session persists until it is deleted, or until it times out because of inactivity. (For more information, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-settings).",
          "tags": [
            "Sessions"
          ],
          "responses": {
            "201": {
              "description": "Successful request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SessionResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "session_id": "af11c111-860d-4071-b6d2-550bf20c016e"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -X POST -u \"apikey:{apikey}\" \\\n",
                        "\"{url}/v2/assistants/{assistant_id}/sessions?version=2021-06-14\""
                      ]
                    }
                  ]
                }
              ],
              "dotnet-standard": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        "    );\n",
                        "\n",
                        "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "var result = assistant.CreateSession(\n",
                        "    assistantId: \"{assistantId}\"\n",
                        "    );\n",
                        "\n",
                        "Console.WriteLine(result.Response);\n",
                        "\n",
                        "sessionId = result.Result.SessionId;"
                      ]
                    }
                  ]
                }
              ],
              "go": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "package main\n",
                        "\n",
                        "import (\n",
                        "  \"encoding/json\"\n",
                        "  \"fmt\"\n",
                        "  \"github.com/IBM/go-sdk-core/core\"\n",
                        "  \"github.com/watson-developer-cloud/go-sdk/assistantv2\"\n",
                        ")\n",
                        "\n",
                        "func main() {\n",
                        "  authenticator := &core.IamAuthenticator{\n",
                        "    ApiKey: \"{apikey}\",\n",
                        "  }\n",
                        "\n",
                        "  options := &assistantv2.AssistantV2Options{\n",
                        "    Version: \"2021-06-14\",\n",
                        "    Authenticator: authenticator,\n",
                        "  }\n",
                        "\n",
                        "  assistant, assistantErr := assistantv2.NewAssistantV2(options)\n",
                        "\n",
                        "  if assistantErr != nil {\n",
                        "    panic(assistantErr)\n",
                        "  }\n",
                        "\n",
                        "  assistant.SetServiceURL(\"{url}\")\n",
                        "\n",
                        "  result, _, responseErr := assistant.CreateSession(assistant.\n",
                        "    NewCreateSessionOptions(\"{assistant_id}\"))\n",
                        "  if responseErr != nil {\n",
                        "    panic(responseErr)\n",
                        "  }\n",
                        "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                        "  fmt.Println(string(b))\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "java": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                        "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                        "assistant.setServiceUrl(\"{url}\");\n",
                        "\n",
                        "CreateSessionOptions options = new CreateSessionOptions.Builder(\"{assistant_id}\").build();\n",
                        "\n",
                        "SessionResponse response = assistant.createSession(options).execute().getResult();\n",
                        "\n",
                        "System.out.println(response);"
                      ]
                    }
                  ]
                }
              ],
              "node": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "const AssistantV2 = require('ibm-watson/assistant/v2');\n",
                        "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                        "\n",
                        "const assistant = new AssistantV2({\n",
                        "  version: '2021-06-14',\n",
                        "  authenticator: new IamAuthenticator({\n",
                        "    apikey: '{apikey}',\n",
                        "  }),\n",
                        "  serviceUrl: '{url}',\n",
                        "});\n",
                        "\n",
                        "assistant.createSession({\n",
                        "  assistantId: '{assistant_id}'\n",
                        "})\n",
                        "  .then(res => {\n",
                        "    console.log(JSON.stringify(res.result, null, 2));\n",
                        "  })\n",
                        "  .catch(err => {\n",
                        "    console.log(err);\n",
                        "  });"
                      ]
                    }
                  ]
                }
              ],
              "python": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "import json\n",
                        "from ibm_watson import AssistantV2\n",
                        "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                        "\n",
                        "authenticator = IAMAuthenticator('{apikey}')\n",
                        "assistant = AssistantV2(\n",
                        "    version='2021-06-14',\n",
                        "    authenticator = authenticator\n",
                        ")\n",
                        "\n",
                        "assistant.set_service_url('{url}')\n",
                        "\n",
                        "response = assistant.create_session(\n",
                        "    assistant_id='{assistant_id}'\n",
                        ").get_result()\n",
                        "\n",
                        "print(json.dumps(response, indent=2))"
                      ]
                    }
                  ]
                }
              ],
              "ruby": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "require \"json\"\n",
                        "require \"ibm_watson/authenticators\"\n",
                        "require \"ibm_watson/assistant_v2\"\n",
                        "include IBMWatson\n",
                        "\n",
                        "authenticator = Authenticators::IamAuthenticator.new(\n",
                        "  apikey: \"{apikey}\"\n",
                        ")\n",
                        "\n",
                        "assistant = AssistantV2.new(\n",
                        "  version: \"2021-06-14\",\n",
                        "  authenticator: authenticator\n",
                        ")\n",
                        "assistant.service_url = \"{url}\"\n",
                        "\n",
                        "response = assistant.create_session(\n",
                        "  assistant_id: \"{assistant_id}\"\n",
                        ")\n",
                        "\n",
                        "puts JSON.pretty_generate(response.result)"
                      ]
                    }
                  ]
                }
              ],
              "swift": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                        "let assistant = Assistant(version: \"2021-06-14\", authenticator: authenticator)\n",
                        "assistant.serviceURL = \"{url}\"\n",
                        "\n",
                        "assistant.createSession(assistantID: \"{assistant_id}\") {\n",
                        "  response, error in\n",
                        "\n",
                        "  guard let session = response?.result else {\n",
                        "    print(error?.localizedDescription ?? \"unknown error\")\n",
                        "    return\n",
                        "  }\n",
                        "\n",
                        "  sessionID = session.sessionID\n",
                        "  print(session)\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "unity": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "var authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        ");\n",
                        "\n",
                        "while (!authenticator.CanAuthenticate())\n",
                        "    yield return null;\n",
                        "\n",
                        "var assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "SessionResponse createSessionResponse = null;\n",
                        "assistant.CreateSession(\n",
                        "    callback: (DetailedResponse<SessionResponse> response, IBMError error) =>\n",
                        "    {\n",
                        "        Log.Debug(\"AssistantV2\", \"result: {0}\", response.Response);\n",
                        "        createSessionResponse = response.Result;\n",
                        "    },\n",
                        "    assistantId: \"{assistantId}\"\n",
                        ");\n",
                        "\n",
                        "while (createSessionResponse == null)\n",
                        "    yield return null;"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/v2/assistants/{assistant_id}/sessions/{session_id}": {
        "parameters": [
          {
            "$ref": "#/components/parameters/AssistantPathParam"
          },
          {
            "$ref": "#/components/parameters/VersionQueryParam"
          },
          {
            "$ref": "#/components/parameters/SessionPathParam"
          }
        ],
        "delete": {
          "operationId": "deleteSession",
          "summary": "Delete session",
          "description": "Deletes a session explicitly before it times out. (For more information about the session inactivity timeout, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-settings)).",
          "tags": [
            "Sessions"
          ],
          "responses": {
            "200": {
              "description": "Successful request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EmptyResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                        "\"{url}/v2/assistants/{assistant_id}/sessions/{session_id}?version=2021-06-14\""
                      ]
                    }
                  ]
                }
              ],
              "dotnet-standard": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        "    );\n",
                        "\n",
                        "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "var result = assistant.DeleteSession(\n",
                        "    assistantId: \"{assistantId}\",\n",
                        "    sessionId: \"{sessionId}\"\n",
                        "    );\n",
                        "\n",
                        "Console.WriteLine(result.Response);"
                      ]
                    }
                  ]
                }
              ],
              "go": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "package main\n",
                        "\n",
                        "import (\n",
                        "  \"github.com/IBM/go-sdk-core/core\"\n",
                        "  \"github.com/watson-developer-cloud/go-sdk/assistantv2\"\n",
                        ")\n",
                        "\n",
                        "func main() {\n",
                        "  authenticator := &core.IamAuthenticator{\n",
                        "    ApiKey: \"{apikey}\",\n",
                        "  }\n",
                        "\n",
                        "  options := &assistantv2.AssistantV2Options{\n",
                        "    Version: \"2021-06-14\",\n",
                        "    Authenticator: authenticator,\n",
                        "  }\n",
                        "\n",
                        "  assistant, assistantErr := assistantv2.NewAssistantV2(options)\n",
                        "\n",
                        "  if assistantErr != nil {\n",
                        "    panic(assistantErr)\n",
                        "  }\n",
                        "\n",
                        "  assistant.SetServiceURL(\"{url}\")\n",
                        "\n",
                        "  _, responseErr := assistant.DeleteSession(assistant.\n",
                        "    NewDeleteSessionOptions(\"{assistant_id}\", \"{session_id}\"))\n",
                        "  if responseErr != nil {\n",
                        "    panic(responseErr)\n",
                        "  }\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "java": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                        "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                        "assistant.setServiceUrl(\"{url}\");\n",
                        "\n",
                        "DeleteSessionOptions options = new DeleteSessionOptions.Builder(\"{assistant_id}\", \"{session_id}\").build();\n",
                        "\n",
                        "assistant.deleteSession(options).execute();"
                      ]
                    }
                  ]
                }
              ],
              "node": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "const AssistantV2 = require('ibm-watson/assistant/v2');\n",
                        "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                        "\n",
                        "const assistant = new AssistantV2({\n",
                        "  version: '2021-06-14',\n",
                        "  authenticator: new IamAuthenticator({\n",
                        "    apikey: '{apikey}',\n",
                        "  }),\n",
                        "  serviceUrl: '{url}',\n",
                        "});\n",
                        "\n",
                        "assistant.deleteSession({\n",
                        "  assistantId: '{assistant_id}',\n",
                        "  sessionId: '{session_id}',\n",
                        "})\n",
                        "  .then(res => {\n",
                        "    console.log(JSON.stringify(res.result, null, 2));\n",
                        "  })\n",
                        "  .catch(err => {\n",
                        "    console.log(err);\n",
                        "  });"
                      ]
                    }
                  ]
                }
              ],
              "python": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "import json\n",
                        "from ibm_watson import AssistantV2\n",
                        "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                        "\n",
                        "authenticator = IAMAuthenticator('{apikey}')\n",
                        "assistant = AssistantV2(\n",
                        "    version='2021-06-14',\n",
                        "    authenticator = authenticator\n",
                        ")\n",
                        "\n",
                        "assistant.set_service_url('{url}')\n",
                        "\n",
                        "response = assistant.delete_session(\n",
                        "    assistant_id='{assistant_id}',\n",
                        "    session_id='{session_id}'\n",
                        ").get_result()\n",
                        "\n",
                        "print(json.dumps(response, indent=2))"
                      ]
                    }
                  ]
                }
              ],
              "ruby": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "require \"json\"\n",
                        "require \"ibm_watson/authenticators\"\n",
                        "require \"ibm_watson/assistant_v2\"\n",
                        "include IBMWatson\n",
                        "\n",
                        "authenticator = Authenticators::IamAuthenticator.new(\n",
                        "  apikey: \"{apikey}\"\n",
                        ")\n",
                        "\n",
                        "assistant = AssistantV2.new(\n",
                        "  version: \"2021-06-14\",\n",
                        "  authenticator: authenticator\n",
                        ")\n",
                        "assistant.service_url = \"{url}\"\n",
                        "\n",
                        "response = assistant.delete_session(\n",
                        "  assistant_id: \"{assistant_id}\",\n",
                        "  session_id: \"{session_id}\"\n",
                        ")"
                      ]
                    }
                  ]
                }
              ],
              "swift": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                        "let assistant = Assistant(version: \"2021-06-14\", authenticator: authenticator)\n",
                        "assistant.serviceURL = \"{url}\"\n",
                        "\n",
                        "assistant.deleteSession(assistantID: \"{assistant_id}\", sessionID: \"{session_id}\") {\n",
                        "  _, error in\n",
                        "\n",
                        "  if let error = error {\n",
                        "    print(error.localizedDescription)\n",
                        "    return\n",
                        "  }\n",
                        "\n",
                        "  print(\"session deleted\")\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "unity": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "var authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        ");\n",
                        "\n",
                        "while (!authenticator.CanAuthenticate())\n",
                        "    yield return null;\n",
                        "\n",
                        "var assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "assistant.DeleteSession(\n",
                        "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                        "    {\n",
                        "        Log.Debug(\"AssistantV2\", \"result: {0}\", response.Response);\n",
                        "        deleteSessionResponse = response.Result;\n",
                        "    },\n",
                        "    assistantId: \"{assistantId}\",\n",
                        "    sessionId: \"{sessionId}\"\n",
                        ");"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/v2/assistants/{assistant_id}/logs": {
        "parameters": [
          {
            "$ref": "#/components/parameters/AssistantPathParam"
          },
          {
            "$ref": "#/components/parameters/VersionQueryParam"
          }
        ],
        "get": {
          "operationId": "listLogs",
          "summary": "List log events for an assistant",
          "description": "List the events from the log of an assistant.\n\nThis method requires Manager access, and is available only with Enterprise plans.",
          "x-rate-limit": "If **cursor** is not specified, this operation is limited to 40 requests per 30 minutes. If **cursor** is specified, the limit is 120 requests per minute.",
          "tags": [
            "Logs"
          ],
          "parameters": [
            {
              "$ref": "#/components/parameters/LogSortQueryParam"
            },
            {
              "in": "query",
              "name": "filter",
              "required": false,
              "description": "A cacheable parameter that limits the results to those matching the specified filter. For more information, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-filter-reference#filter-reference).",
              "schema": {
                "type": "string"
              }
            },
            {
              "$ref": "#/components/parameters/PageLimitQueryParam"
            },
            {
              "$ref": "#/components/parameters/CursorQueryParam"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LogCollection"
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -u \"apikey:{apikey}\" \\\n",
                        "\"{url}/v2/assistants/{assistant_id}/logs?version=2021-06-14\""
                      ]
                    }
                  ]
                }
              ],
              "dotnet-standard": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        "    );\n",
                        "\n",
                        "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "var result = assistant.ListLogs(\n",
                        "    assistantId: \"{assistantId}\"\n",
                        "    );\n",
                        "\n",
                        "Console.WriteLine(result.Response);"
                      ]
                    }
                  ]
                }
              ],
              "go": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "package main\n",
                        "\n",
                        "import (\n",
                        "  \"encoding/json\"\n",
                        "  \"fmt\"\n",
                        "  \"github.com/IBM/go-sdk-core/core\"\n",
                        "  \"github.com/watson-developer-cloud/go-sdk/assistantv2\"\n",
                        ")\n",
                        "\n",
                        "func main() {\n",
                        "  authenticator := &core.IamAuthenticator{\n",
                        "    ApiKey: \"{apikey}\",\n",
                        "  }\n",
                        "\n",
                        "  options := &assistantv2.AssistantV2Options{\n",
                        "    Version: \"2021-06-14\",\n",
                        "    Authenticator: authenticator,\n",
                        "  }\n",
                        "\n",
                        "  assistant, assistantErr := assistantv2.NewAssistantV2(options)\n",
                        "\n",
                        "  if assistantErr != nil {\n",
                        "    panic(assistantErr)\n",
                        "  }\n",
                        "\n",
                        "  assistant.SetServiceURL(\"{url}\")\n",
                        "\n",
                        "  result, _, responseErr := assistant.ListLogs(\n",
                        "    &assistantv2.ListLogsOptions{\n",
                        "      AssistantID: core.StringPtr(\"{assistant_id}\"),\n",
                        "   },\n",
                        "  )\n",
                        "  if responseErr != nil {\n",
                        "    panic(responseErr)\n",
                        "  }\n",
                        "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                        "  fmt.Println(string(b))\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "java": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                        "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                        "assistant.setServiceUrl(\"{url}\");\n",
                        "\n",
                        "String assistantId = \"{assistant_id}\";\n",
                        "\n",
                        "ListLogsOptions options = new ListLogsOptions.Builder(assistantId).build();\n",
                        "\n",
                        "LogCollection response = assistant.listLogs(options).execute().getResult();\n",
                        "\n",
                        "System.out.println(response);"
                      ]
                    }
                  ]
                }
              ],
              "node": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "const AssistantV2 = require('ibm-watson/assistant/v2');\n",
                        "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                        "\n",
                        "const assistant = new AssistantV2({\n",
                        "  version: '2021-06-14',\n",
                        "  authenticator: new IamAuthenticator({\n",
                        "    apikey: '{apikey}',\n",
                        "  }),\n",
                        "  serviceUrl: '{url}',\n",
                        "});\n",
                        "\n",
                        "const params = {\n",
                        "  assistantId: '{assistant_id}'\n",
                        "};\n",
                        "\n",
                        "assistant.listLogs(params)\n",
                        "  .then(res => {\n",
                        "    console.log(JSON.stringify(res.result, null, 2));\n",
                        "  })\n",
                        "  .catch(err => {\n",
                        "    console.log(err)\n",
                        "  });"
                      ]
                    }
                  ]
                }
              ],
              "python": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "import json\n",
                        "from ibm_watson import AssistantV2\n",
                        "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                        "\n",
                        "authenticator = IAMAuthenticator('{apikey}')\n",
                        "assistant = AssistantV2(\n",
                        "    version='2021-06-14',\n",
                        "    authenticator = authenticator\n",
                        ")\n",
                        "\n",
                        "assistant.set_service_url('{url}')\n",
                        "\n",
                        "response=assistant.list_logs(\n",
                        "    assistant_id='{assistant_id}'\n",
                        ").get_result()\n",
                        "\n",
                        "print(json.dumps(response, indent=2))"
                      ]
                    }
                  ]
                }
              ],
              "ruby": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "require \"json\"\n",
                        "require \"ibm_watson/authenticators\"\n",
                        "require \"ibm_watson/assistant_v2\"\n",
                        "include IBMWatson\n",
                        "\n",
                        "authenticator = Authenticators::IamAuthenticator.new(\n",
                        "  apikey: \"{apikey}\"\n",
                        ")\n",
                        "\n",
                        "assistant = AssistantV2.new(\n",
                        "  version: \"2021-06-14\",\n",
                        "  authenticator: authenticator\n",
                        ")\n",
                        "assistant.service_url = \"{url}\"\n",
                        "\n",
                        "response = assistant.list_logs(\n",
                        "  assistant_id: \"{assistant_id}\"\n",
                        ")\n",
                        "\n",
                        "puts JSON.pretty_generate(response.result)"
                      ]
                    }
                  ]
                }
              ],
              "swift": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                        "let assistant = Assistant(version: \"2021-06-14\", authenticator: authenticator)\n",
                        "assistant.serviceURL = \"{url}\"\n",
                        "\n",
                        "assistant.listLogs(assistantID: \"{assistant_id}\") {\n",
                        "  response, error in\n",
                        "\n",
                        "  guard let logs = response?.result else {\n",
                        "    print(error?.localizedDescription ?? \"unknown error\")\n",
                        "    return\n",
                        "  }\n",
                        "\n",
                        "  print(logs)\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "unity": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "var authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        ");\n",
                        "\n",
                        "while (!authenticator.CanAuthenticate())\n",
                        "    yield return null;\n",
                        "\n",
                        "var assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "LogCollection listLogsResponse = null;\n",
                        "assistant.ListLogs(\n",
                        "    callback: (DetailedResponse<LogCollection> response, IBMError error) =>\n",
                        "    {\n",
                        "        Log.Debug(\"AssistantServiceV2\", \"ListLogs result: {0}\", response.Response);\n",
                        "        listLogsResponse = response.Result;\n",
                        "    },\n",
                        "    assistantId: \"{assistant_id}\"\n",
                        ");\n",
                        "\n",
                        "while (listLogsResponse == null)\n",
                        "    yield return null;"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/v2/skills/{skill_id}/workspace/bulk_classify": {
        "post": {
          "operationId": "bulkClassify",
          "summary": "Identify intents and entities in multiple user utterances",
          "description": "Send multiple user inputs to a dialog skill in a single request and receive information about the intents and entities recognized in each input. This method is useful for testing and comparing the performance of different skills or skill versions.\n\nThis method is available only with Enterprise with Data Isolation plans.",
          "x-rate-limit": "This operation is limited to 5 requests per minute.",
          "tags": [
            "Bulk classify"
          ],
          "parameters": [
            {
              "$ref": "#/components/parameters/SkillPathParam"
            },
            {
              "$ref": "#/components/parameters/VersionQueryParam"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkClassifyInput"
                }
              }
            },
            "description": "An input object that includes the text to classify."
          },
          "x-codegen-request-body-name": "request",
          "responses": {
            "200": {
              "description": "Successful request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkClassifyResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "output": [
                          {
                            "input": {
                              "text": "I want to order some coffee"
                            },
                            "entities": [
                              {
                                "entity": "beverage",
                                "value": "coffee",
                                "confidence": 1,
                                "location": [
                                  14,
                                  20
                                ],
                                "groups": null,
                                "role": null
                              }
                            ],
                            "intents": [
                              {
                                "intent": "order",
                                "confidence": 0.1588214785085711
                              },
                              {
                                "intent": "goodbye",
                                "confidence": 0.041231044110733354
                              }
                            ]
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid request.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -X POST -u \"apikey:{apikey}\" \\\n",
                        "--header \"Content-Type:application/json\" \\\n",
                        "--data \"{\\\"input\\\": [{\\\"text\\\": \\\"I want to order some coffee\\\"}]}\" \\\n",
                        "\"{url}/v2/skills/{skill_id}/workspace/bulk_classify?version=2020-09-24\""
                      ]
                    }
                  ]
                }
              ],
              "dotnet-standard": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        "    );\n",
                        "\n",
                        "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "List<BulkClassifyUtterance> bulkClassifyUtterances = new List<BulkClassifyUtterance>();\n",
                        "BulkClassifyUtterance bulkClassifyUtterance = new BulkClassifyUtterance();\n",
                        "bulkClassifyUtterance.Text = \"I want to order some coffee\";\n",
                        "bulkClassifyUtterances.Add(bulkClassifyUtterance);\n",
                        "var result = assistant.BulkClassify(skillId:\"{skillId}\", input: bulkClassifyUtterances);\n",
                        "\n",
                        "Console.WriteLine(result.Response);"
                      ]
                    }
                  ]
                }
              ],
              "go": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "package main\n",
                        "\n",
                        "import (\n",
                        "  \"encoding/json\"\n",
                        "  \"fmt\"\n",
                        "  \"github.com/IBM/go-sdk-core/core\"\n",
                        "  \"github.com/watson-developer-cloud/go-sdk/assistantv1\"\n",
                        ")\n",
                        "\n",
                        "func main() {\n",
                        "  authenticator := &core.IamAuthenticator{\n",
                        "    ApiKey: \"{apikey}\",\n",
                        "  }\n",
                        "\n",
                        "  options := &assistantv1.AssistantV1Options{\n",
                        "    Version: \"2021-06-14\",\n",
                        "    Authenticator: authenticator,\n",
                        "  }\n",
                        "\n",
                        "  assistant, assistantErr := assistantv1.NewAssistantV1(options)\n",
                        "\n",
                        "  if assistantErr != nil {\n",
                        "    panic(assistantErr)\n",
                        "  }\n",
                        "\n",
                        "  assistant.SetServiceURL(\"{url}\")\n",
                        "\n",
                        "  result, _ , responseErr := assistant.BulkClassify(\n",
                        "    &assistantv1.BulkClassifyOptions{\n",
                        "      SkillID: core.StringPtr(\"{skill_id}\"),\n",
                        "      Input: []assistantv1.BulkClassifyUtterance{\n",
                        "        assistantv1.BulkClassifyUtterance{\n",
                        "          Text: core.StringPtr(\"I want to order some coffee\"),\n",
                        "       },\n",
                        "     },\n",
                        "   },\n",
                        "  )\n",
                        "  if responseErr != nil {\n",
                        "    panic(responseErr)\n",
                        "  }\n",
                        "  b, _ := json.MarshalIndent(result, \"\", \"  \")\n",
                        "  fmt.Println(string(b))\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "java": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                        "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                        "assistant.setServiceUrl(\"{url}\");\n",
                        "\n",
                        "BulkClassifyUtterance bulkClassifyUtterance = new BulkClassifyUtterance.Builder()\n",
                        "  .text(\"I want to order some coffee\")\n",
                        "  .build();\n",
                        "\n",
                        "BulkClassifyOptions options = new BulkClassifyOptions.Builder()\n",
                        "  .skillId(\"{skill_id}\")\n",
                        "  .addInput(bulkClassifyUtterance)\n",
                        "  .build();\n",
                        "\n",
                        "BulkClassifyResponse response = assistant.bulkClassify(options).execute().getResult();\n",
                        "\n",
                        "System.out.println(response);"
                      ]
                    }
                  ]
                }
              ],
              "node": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "const AssistantV2 = require('ibm-watson/assistant/v2');\n",
                        "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                        "\n",
                        "const assistant = new AssistantV2({\n",
                        "  version: '2021-06-14',\n",
                        "  authenticator: new IamAuthenticator({\n",
                        "    apikey: '{apikey}',\n",
                        "  }),\n",
                        "  serviceUrl: '{url}',\n",
                        "});\n",
                        "\n",
                        "const params = {\n",
                        "  skillId: '{id}'\n",
                        "  input: [{'text': 'I want to order some coffee'}]\n",
                        "};\n",
                        "\n",
                        "assistant.bulkClassify(params)\n",
                        "  .then(res => {\n",
                        "    console.log(JSON.stringify(res.result, null, 2));\n",
                        "  })\n",
                        "  .catch(err => {\n",
                        "    console.log(err)\n",
                        "  });"
                      ]
                    }
                  ]
                }
              ],
              "python": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "import json\n",
                        "from ibm_watson import AssistantV2\n",
                        "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                        "\n",
                        "authenticator = IAMAuthenticator('{apikey}')\n",
                        "assistant = AssistantV2(\n",
                        "    version='2021-06-14',\n",
                        "    authenticator = authenticator\n",
                        ")\n",
                        "\n",
                        "assistant.set_service_url('{url}')\n",
                        "\n",
                        "response=assistant.bulk_classify(\n",
                        "    skill_id='{skill_id}'\n",
                        "    input=[{'text': 'I want to order some coffee'}]\n",
                        ").get_result()\n",
                        "\n",
                        "print(json.dumps(response, indent=2))"
                      ]
                    }
                  ]
                }
              ],
              "ruby": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "require \"json\"\n",
                        "require \"ibm_watson/authenticators\"\n",
                        "require \"ibm_watson/assistant_v2\"\n",
                        "include IBMWatson\n",
                        "\n",
                        "authenticator = Authenticators::IamAuthenticator.new(\n",
                        "  apikey: \"{apikey}\"\n",
                        ")\n",
                        "\n",
                        "assistant = AssistantV2.new(\n",
                        "  version: \"2021-06-14\",\n",
                        "  authenticator: authenticator\n",
                        ")\n",
                        "assistant.service_url = \"{url}\"\n",
                        "\n",
                        "response = assistant.bulk_classify(\n",
                        "  skill_id: \"{skill_id}\",\n",
                        "  input: {\n",
                        "    text: \"I want to order some coffee\"\n",
                        "  }\n",
                        ")\n",
                        "\n",
                        "puts JSON.pretty_generate(response.result)"
                      ]
                    }
                  ]
                }
              ],
              "swift": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                        "let assistant = Assistant(version: \"2021-06-14\", authenticator: authenticator)\n",
                        "assistant.serviceURL = \"{url}\"\n",
                        "let input = [BulkClassifyUtterance(text: \"I want to order some coffee\")]\n",
                        "\n",
                        "assistant.bulkClassify(skillID: \"{skill_id}\", input: input) {\n",
                        "  response, error in\n",
                        "\n",
                        "  guard let message = response?.result else {\n",
                        "    print(error?.localizedDescription ?? \"unknown error\")\n",
                        "    return\n",
                        "  }\n",
                        "\n",
                        "  print(message)\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "unity": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "var authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        ");\n",
                        "\n",
                        "while (!authenticator.CanAuthenticate())\n",
                        "    yield return null;\n",
                        "\n",
                        "var assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "BulkClassifyUtterance bulkClassifyUtterance = new BulkClassifyUtterance()\n",
                        "{ Text = \"I want to order some coffee\" }; \n",
                        "List<BulkClassifyUtterance> bulkClassifyUtterances = new List<BulkClassifyUtterance>() { bulkClassifyUtterance };\n",
                        "\n",
                        "BulkClassifyResponse bulkClassifyResponse = null;\n",
                        "assistant.BulkClassify(\n",
                        "    callback: (DetailedResponse<BulkClassifyResponse> response, IBMError error) =>\n",
                        "    {\n",
                        "        Log.Debug(\"AssistantServiceV1\", \"BulkClassify result: {0}\", response.Response);\n",
                        "        bulkClassifyResponse = response.Result;\n",
                        "    },\n",
                        "    skillId: \"{skill_id}\",\n",
                        "    input: \"bulkClassifyUtterances\"\n",
                        ");\n",
                        "\n",
                        "while (bulkClassifyResponse == null)\n",
                        "    yield return null;"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/v2/user_data": {
        "parameters": [
          {
            "$ref": "#/components/parameters/VersionQueryParam"
          }
        ],
        "delete": {
          "operationId": "deleteUserData",
          "summary": "Delete labeled data",
          "description": "Deletes all data associated with a specified customer ID. The method has no effect if no data is associated with the customer ID. \n\nYou associate a customer ID with data by passing the `X-Watson-Metadata` header with a request that passes data. For more information about personal data and customer IDs, see [Information security](https://cloud.ibm.com/docs/assistant?topic=assistant-information-security#information-security).\n\n**Note:** This operation is intended only for deleting data associated with a single specific customer, not for deleting data associated with multiple customers or for any other purpose. For more information, see [Labeling and deleting data in Watson Assistant](https://cloud.ibm.com/docs/assistant?topic=assistant-information-security#information-security-gdpr-wa).",
          "x-rate-limit": "This operation is limited to 4 requests per minute.",
          "tags": [
            "User data"
          ],
          "parameters": [
            {
              "in": "query",
              "name": "customer_id",
              "required": true,
              "description": "The customer ID for which all data is to be deleted.",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "202": {
              "description": "The request to delete data was successfully submitted.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/EmptyResponse"
                  }
                }
              }
            },
            "400": {
              "description": "**Bad Request**. The request did not pass a customer ID:\n* `No customer ID found in the request`",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  }
                }
              }
            }
          },
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -X DELETE -u \"apikey:{apikey}\" \\\n",
                        "\"{url}/v2/user_data?customer_id={id}&version=2021-06-14\""
                      ]
                    }
                  ]
                }
              ],
              "dotnet-standard": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        "    );\n",
                        "\n",
                        "AssistantService assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "var result = assistant.DeleteUserData(\n",
                        "    customerId: \"{id}\"\n",
                        "    );\n",
                        "\n",
                        "Console.WriteLine(result.Response);"
                      ]
                    }
                  ]
                }
              ],
              "go": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "package main\n",
                        "\n",
                        "import (\n",
                        "  \"github.com/IBM/go-sdk-core/core\"\n",
                        "  \"github.com/watson-developer-cloud/go-sdk/assistantv2\"\n",
                        ")\n",
                        "\n",
                        "func main() {\n",
                        "  authenticator := &core.IamAuthenticator{\n",
                        "    ApiKey: \"{apikey}\",\n",
                        "  }\n",
                        "\n",
                        "  options := &assistantv2.AssistantV2Options{\n",
                        "    Version: \"2021-06-14\",\n",
                        "    Authenticator: authenticator,\n",
                        "  }\n",
                        "\n",
                        "  assistant, assistantErr := assistantv2.NewAssistantV2(options)\n",
                        "\n",
                        "  if assistantErr != nil {\n",
                        "    panic(assistantErr)\n",
                        "  }\n",
                        "\n",
                        "  assistant.SetServiceURL(\"{url}\")\n",
                        "\n",
                        "  _, responseErr := assistant.DeleteUserData(\n",
                        "    &assistantv2.DeleteUserDataOptions{\n",
                        "      CustomerID: core.StringPtr(\"{id}\"),\n",
                        "   },\n",
                        "  )\n",
                        "  if responseErr != nil {\n",
                        "    panic(responseErr)\n",
                        "  }\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "java": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "IamAuthenticator authenticator = new IamAuthenticator(\"{apikey}\");\n",
                        "Assistant assistant = new Assistant(\"2021-06-14\", authenticator);\n",
                        "assistant.setServiceUrl(\"{url}\");\n",
                        "\n",
                        "String customerId = \"{id}\";\n",
                        "\n",
                        "DeleteUserDataOptions options = new DeleteUserDataOptions.Builder(customerId).build();\n",
                        "\n",
                        "assistant.deleteUserData(options).execute();"
                      ]
                    }
                  ]
                }
              ],
              "node": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "const AssistantV2 = require('ibm-watson/assistant/v2');\n",
                        "const { IamAuthenticator } = require('ibm-watson/auth');\n",
                        "\n",
                        "const assistant = new AssistantV2({\n",
                        "  version: '2021-06-14',\n",
                        "  authenticator: new IamAuthenticator({\n",
                        "    apikey: '{apikey}',\n",
                        "  }),\n",
                        "  serviceUrl: '{url}',\n",
                        "});\n",
                        "\n",
                        "const params = {\n",
                        "  customerId: '{id}'\n",
                        "};\n",
                        "\n",
                        "assistant.deleteUserData(params)\n",
                        "  .then(res => {\n",
                        "    console.log(JSON.stringify(res.result, null, 2));\n",
                        "  })\n",
                        "  .catch(err => {\n",
                        "    console.log(err)\n",
                        "  });"
                      ]
                    }
                  ]
                }
              ],
              "python": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "import json\n",
                        "from ibm_watson import AssistantV2\n",
                        "from ibm_cloud_sdk_core.authenticators import IAMAuthenticator\n",
                        "\n",
                        "authenticator = IAMAuthenticator('{apikey}')\n",
                        "assistant = AssistantV2(\n",
                        "    version='2021-06-14',\n",
                        "    authenticator = authenticator\n",
                        ")\n",
                        "\n",
                        "assistant.set_service_url('{url}')\n",
                        "\n",
                        "response = assistant.delete_user_data(\n",
                        "    customer_id = '{id}'\n",
                        ").get_result()\n",
                        "\n",
                        "print(json.dumps(response, indent=2))"
                      ]
                    }
                  ]
                }
              ],
              "ruby": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "require \"json\"\n",
                        "require \"ibm_watson/authenticators\"\n",
                        "require \"ibm_watson/assistant_v2\"\n",
                        "include IBMWatson\n",
                        "\n",
                        "authenticator = Authenticators::IamAuthenticator.new(\n",
                        "  apikey: \"{apikey}\"\n",
                        ")\n",
                        "\n",
                        "assistant = AssistantV2.new(\n",
                        "  version: \"2021-06-14\",\n",
                        "  authenticator: authenticator\n",
                        ")\n",
                        "assistant.service_url = \"{url}\"\n",
                        "\n",
                        "response = assistant.delete_user_data(\n",
                        "  customer_id: \"{id}\"\n",
                        ")"
                      ]
                    }
                  ]
                }
              ],
              "swift": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "let authenticator = WatsonIAMAuthenticator(apiKey: \"{apikey}\")\n",
                        "let assistant = Assistant(version: \"2021-06-14\", authenticator: authenticator)\n",
                        "assistant.serviceURL = \"{url}\"\n",
                        "\n",
                        "assistant.deleteUserData(customerID: \"{id}\") {\n",
                        "  _, error in\n",
                        "\n",
                        "  if let error = error {\n",
                        "    print(error.localizedDescription)\n",
                        "    return\n",
                        "  }\n",
                        "\n",
                        "  print(\"delete request submitted\")\n",
                        "}"
                      ]
                    }
                  ]
                }
              ],
              "unity": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "var authenticator = new IamAuthenticator(\n",
                        "    apikey: \"{apikey}\"\n",
                        ");\n",
                        "\n",
                        "while (!authenticator.CanAuthenticate())\n",
                        "    yield return null;\n",
                        "\n",
                        "var assistant = new AssistantService(\"2021-06-14\", authenticator);\n",
                        "assistant.SetServiceUrl(\"{url}\");\n",
                        "\n",
                        "object deleteUserDataResponse = null;\n",
                        "assistant.DeleteUserData(\n",
                        "    callback: (DetailedResponse<object> response, IBMError error) =>\n",
                        "    {\n",
                        "        Log.Debug(\"AssistantServiceV2\", \"DeleteUserData result: {0}\", response.Response);\n",
                        "        deleteUserDataResponse = response.Result;\n",
                        "    },\n",
                        "    customerId: \"{id}\"\n",
                        ");\n",
                        "\n",
                        "while (deleteUserDataResponse == null)\n",
                        "    yield return null;"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      }
    },
    "servers": [
      {
        "url": "https://api.us-south.assistant.watson.cloud.ibm.com",
        "description": "Dallas"
      }
    ],
    "components": {
      "parameters": {
        "AssistantPathParam": {
          "in": "path",
          "name": "assistant_id",
          "required": true,
          "description": "Unique identifier of the assistant. To find the assistant ID in the Watson Assistant user interface, open the assistant settings and click **API Details**. For information about creating assistants, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-assistant-add#assistant-add-task).\n\n**Note:** Currently, the v2 API does not support creating assistants.",
          "schema": {
            "type": "string"
          }
        },
        "CursorQueryParam": {
          "in": "query",
          "name": "cursor",
          "required": false,
          "description": "A token identifying the page of results to retrieve.",
          "schema": {
            "type": "string"
          }
        },
        "LogSortQueryParam": {
          "in": "query",
          "name": "sort",
          "required": false,
          "description": "How to sort the returned log events. You can sort by **request_timestamp**. To reverse the sort order, prefix the parameter value with a minus sign (`-`).",
          "schema": {
            "type": "string"
          }
        },
        "PageLimitQueryParam": {
          "in": "query",
          "name": "page_limit",
          "required": false,
          "description": "The number of records to return in each page of results.",
          "schema": {
            "type": "integer",
            "default": 100
          }
        },
        "SessionPathParam": {
          "in": "path",
          "name": "session_id",
          "required": true,
          "description": "Unique identifier of the session.",
          "schema": {
            "type": "string"
          }
        },
        "SkillPathParam": {
          "in": "path",
          "name": "skill_id",
          "required": true,
          "description": "Unique identifier of the skill. To find the skill ID in the Watson Assistant user interface, open the skill settings and click **API Details**.",
          "schema": {
            "type": "string"
          }
        },
        "VersionQueryParam": {
          "in": "query",
          "name": "version",
          "required": true,
          "description": "Release date of the API version you want to use. Specify dates in YYYY-MM-DD format. The current version is `2021-06-14`.",
          "schema": {
            "type": "string"
          },
          "x-sdk-global-param": true
        }
      },
      "securitySchemes": {
        "IAM": {
          "type": "apiKey",
          "name": "Authorization",
          "in": "header"
        }
      },
      "schemas": {
        "AgentAvailabilityMessage": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "The text of the message.",
              "minLength": 1,
              "maxLength": 512
            }
          }
        },
        "BaseMessageContextGlobal": {
          "type": "object",
          "description": "Session context data that is shared by all skills used by the Assistant.",
          "properties": {
            "system": {
              "$ref": "#/components/schemas/MessageContextGlobalSystem"
            }
          }
        },
        "BaseMessageInput": {
          "type": "object",
          "description": "An input object that includes the input text.",
          "properties": {
            "message_type": {
              "type": "string",
              "enum": [
                "text",
                "search"
              ],
              "description": "The type of the message:\n\n- `text`: The user input is processed normally by the assistant.\n- `search`: Only search results are returned. (Any dialog or actions skill is bypassed.)\n\n**Note:** A `search` message results in an error if no search skill is configured for the assistant.",
              "default": "text"
            },
            "text": {
              "type": "string",
              "minLength": 1,
              "maxLength": 2048,
              "description": "The text of the user input. This string cannot contain carriage return, newline, or tab characters."
            },
            "intents": {
              "type": "array",
              "description": "Intents to use when evaluating the user input. Include intents from the previous response to continue using those intents rather than trying to recognize intents in the new input.",
              "items": {
                "$ref": "#/components/schemas/RuntimeIntent"
              },
              "x-item-name": "intent"
            },
            "entities": {
              "type": "array",
              "description": "Entities to use when evaluating the message. Include entities from the previous response to continue using those entities rather than detecting entities in the new input.",
              "items": {
                "$ref": "#/components/schemas/RuntimeEntity"
              },
              "x-item-name": "entity"
            },
            "suggestion_id": {
              "type": "string",
              "description": "For internal use only."
            }
          }
        },
        "BaseMessageInputOptions": {
          "type": "object",
          "description": "Optional properties that control how the assistant responds.",
          "properties": {
            "restart": {
              "type": "boolean",
              "description": "Whether to restart dialog processing at the root of the dialog, regardless of any previously visited nodes. **Note:** This does not affect `turn_count` or any other context variables.",
              "default": false
            },
            "alternate_intents": {
              "type": "boolean",
              "description": "Whether to return more than one intent. Set to `true` to return all matching intents.",
              "default": false
            },
            "spelling": {
              "$ref": "#/components/schemas/MessageInputOptionsSpelling"
            },
            "auto_learn": {
              "$ref": "#/components/schemas/MessageInputOptionsAutoLearn"
            }
          }
        },
        "BulkClassifyInput": {
          "type": "object",
          "properties": {
            "input": {
              "type": "array",
              "description": "An array of input utterances to classify.",
              "items": {
                "$ref": "#/components/schemas/BulkClassifyUtterance"
              },
              "minItems": 1,
              "maxItems": 50
            }
          },
          "required": [
            "input"
          ]
        },
        "BulkClassifyOutput": {
          "type": "object",
          "properties": {
            "input": {
              "$ref": "#/components/schemas/BulkClassifyUtterance"
            },
            "entities": {
              "description": "An array of entities identified in the utterance.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RuntimeEntity"
              }
            },
            "intents": {
              "description": "An array of intents recognized in the utterance.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RuntimeIntent"
              }
            }
          }
        },
        "BulkClassifyResponse": {
          "type": "object",
          "properties": {
            "output": {
              "type": "array",
              "description": "An array of objects that contain classification information for the submitted input utterances.",
              "items": {
                "$ref": "#/components/schemas/BulkClassifyOutput"
              }
            }
          }
        },
        "BulkClassifyUtterance": {
          "type": "object",
          "description": "The user input utterance to classify.",
          "properties": {
            "text": {
              "type": "string",
              "description": "The text of the input utterance.",
              "minLength": 1,
              "maxLength": 2048
            }
          },
          "required": [
            "text"
          ]
        },
        "ChannelTransferInfo": {
          "type": "object",
          "description": "Information used by an integration to transfer the conversation to a different channel.",
          "properties": {
            "target": {
              "$ref": "#/components/schemas/ChannelTransferTarget"
            }
          },
          "required": [
            "target"
          ]
        },
        "ChannelTransferTarget": {
          "type": "object",
          "description": "An object specifying target channels available for the transfer. Each property of this object represents an available transfer target. Currently, the only supported property is **chat**, representing the web chat integration.",
          "properties": {
            "chat": {
              "$ref": "#/components/schemas/ChannelTransferTargetChat"
            }
          }
        },
        "ChannelTransferTargetChat": {
          "type": "object",
          "description": "Information for transferring to the web chat integration.",
          "properties": {
            "url": {
              "type": "string",
              "description": "The URL of the target web chat."
            }
          }
        },
        "DialogLogMessage": {
          "type": "object",
          "description": "Dialog log message details.",
          "properties": {
            "level": {
              "type": "string",
              "description": "The severity of the log message.",
              "enum": [
                "info",
                "error",
                "warn"
              ]
            },
            "message": {
              "type": "string",
              "description": "The text of the log message."
            },
            "code": {
              "type": "string",
              "description": "A code that indicates the category to which the error message belongs."
            },
            "source": {
              "$ref": "#/components/schemas/LogMessageSource"
            }
          },
          "required": [
            "level",
            "message",
            "code"
          ]
        },
        "DialogNodeAction": {
          "properties": {
            "name": {
              "type": "string",
              "description": "The name of the action."
            },
            "type": {
              "type": "string",
              "enum": [
                "client",
                "server",
                "web-action",
                "cloud-function"
              ],
              "default": "client",
              "description": "The type of action to invoke."
            },
            "parameters": {
              "type": "object",
              "description": "A map of key/value pairs to be provided to the action.",
              "additionalProperties": true
            },
            "result_variable": {
              "type": "string",
              "description": "The location in the dialog context where the result of the action is stored."
            },
            "credentials": {
              "type": "string",
              "description": "The name of the context variable that the client application will use to pass in credentials for the action."
            }
          },
          "required": [
            "name",
            "result_variable"
          ]
        },
        "DialogNodeOutputConnectToAgentTransferInfo": {
          "type": "object",
          "description": "Routing or other contextual information to be used by target service desk systems.",
          "properties": {
            "target": {
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "description": "An object containing routing or other contextual information specific to a target service desk system. Currently supported properties are `salesforce` and `zendesk`.",
                "additionalProperties": {
                  "description": "Any property intended for the target service desk system."
                }
              }
            }
          }
        },
        "DialogNodeOutputOptionsElement": {
          "properties": {
            "label": {
              "type": "string",
              "description": "The user-facing label for the option."
            },
            "value": {
              "$ref": "#/components/schemas/DialogNodeOutputOptionsElementValue"
            }
          },
          "required": [
            "label",
            "value"
          ]
        },
        "DialogNodeOutputOptionsElementValue": {
          "properties": {
            "input": {
              "$ref": "#/components/schemas/MessageInput"
            }
          },
          "description": "An object defining the message input to be sent to the assistant if the user selects the corresponding option."
        },
        "DialogSuggestion": {
          "properties": {
            "label": {
              "type": "string",
              "description": "The user-facing label for the suggestion. This label is taken from the **title** or **user_label** property of the corresponding dialog node, depending on the disambiguation options."
            },
            "value": {
              "$ref": "#/components/schemas/DialogSuggestionValue"
            },
            "output": {
              "type": "object",
              "description": "The dialog output that will be returned from the Watson Assistant service if the user selects the corresponding option.",
              "additionalProperties": true
            }
          },
          "required": [
            "label",
            "value"
          ]
        },
        "DialogSuggestionValue": {
          "properties": {
            "input": {
              "$ref": "#/components/schemas/MessageInput"
            }
          },
          "description": "An object defining the message input to be sent to the assistant if the user selects the corresponding disambiguation option."
        },
        "EmptyResponse": {
          "properties": {}
        },
        "ErrorDetail": {
          "properties": {
            "message": {
              "type": "string",
              "description": "Description of a specific constraint violation."
            },
            "path": {
              "type": "string",
              "description": "The location of the constraint violation."
            }
          },
          "required": [
            "message"
          ]
        },
        "ErrorResponse": {
          "properties": {
            "error": {
              "type": "string",
              "description": "General description of an error."
            },
            "errors": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ErrorDetail"
              },
              "description": "Collection of specific constraint violations associated with the error."
            },
            "code": {
              "type": "integer",
              "description": "HTTP status code for the error response."
            }
          },
          "required": [
            "error",
            "code"
          ]
        },
        "Log": {
          "properties": {
            "log_id": {
              "type": "string",
              "description": "A unique identifier for the logged event."
            },
            "request": {
              "$ref": "#/components/schemas/MessageRequest"
            },
            "response": {
              "$ref": "#/components/schemas/MessageResponse"
            },
            "assistant_id": {
              "type": "string",
              "description": "Unique identifier of the assistant."
            },
            "session_id": {
              "type": "string",
              "description": "The ID of the session the message was part of."
            },
            "skill_id": {
              "type": "string",
              "description": "The unique identifier of the skill that responded to the message."
            },
            "snapshot": {
              "type": "string",
              "description": "The name of the snapshot (dialog skill version) that responded to the message (for example, `draft`)."
            },
            "request_timestamp": {
              "type": "string",
              "description": "The timestamp for receipt of the message."
            },
            "response_timestamp": {
              "type": "string",
              "description": "The timestamp for the system response to the message."
            },
            "language": {
              "type": "string",
              "description": "The language of the assistant to which the message request was made."
            },
            "customer_id": {
              "type": "string",
              "description": "The customer ID specified for the message, if any."
            }
          },
          "required": [
            "log_id",
            "request",
            "response",
            "assistant_id",
            "session_id",
            "skill_id",
            "snapshot",
            "request_timestamp",
            "response_timestamp",
            "language"
          ]
        },
        "LogCollection": {
          "properties": {
            "logs": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Log"
              },
              "description": "An array of objects describing log events."
            },
            "pagination": {
              "$ref": "#/components/schemas/LogPagination"
            }
          },
          "required": [
            "logs",
            "pagination"
          ]
        },
        "LogMessageSource": {
          "type": "object",
          "description": "An object that identifies the dialog element that generated the error message.",
          "oneOf": [
            {
              "$ref": "#/components/schemas/LogMessageSourceDialogNode"
            },
            {
              "$ref": "#/components/schemas/LogMessageSourceAction"
            },
            {
              "$ref": "#/components/schemas/LogMessageSourceStep"
            },
            {
              "$ref": "#/components/schemas/LogMessageSourceHandler"
            }
          ],
          "discriminator": {
            "propertyName": "type",
            "mapping": {
              "dialog_node": "#/components/schemas/LogMessageSourceDialogNode",
              "action": "#/components/schemas/LogMessageSourceAction",
              "step": "#/components/schemas/LogMessageSourceStep",
              "handler": "#/components/schemas/LogMessageSourceHandler"
            }
          }
        },
        "LogMessageSourceDialogNode": {
          "type": "object",
          "description": "An object that identifies the dialog element that generated the error message.",
          "properties": {
            "type": {
              "type": "string",
              "description": "A string that indicates the type of dialog element that generated the error message."
            },
            "dialog_node": {
              "type": "string",
              "description": "The unique identifier of the dialog node that generated the error message."
            }
          },
          "required": [
            "type",
            "dialog_node"
          ]
        },
        "LogMessageSourceAction": {
          "type": "object",
          "description": "An object that identifies the dialog element that generated the error message.",
          "properties": {
            "type": {
              "type": "string",
              "description": "A string that indicates the type of dialog element that generated the error message."
            },
            "action": {
              "type": "string",
              "description": "The unique identifier of the action that generated the error message."
            }
          },
          "required": [
            "type",
            "action"
          ]
        },
        "LogMessageSourceStep": {
          "type": "object",
          "description": "An object that identifies the dialog element that generated the error message.",
          "properties": {
            "type": {
              "type": "string",
              "description": "A string that indicates the type of dialog element that generated the error message."
            },
            "action": {
              "type": "string",
              "description": "The unique identifier of the action that generated the error message."
            },
            "step": {
              "type": "string",
              "description": "The unique identifier of the step that generated the error message."
            }
          },
          "required": [
            "type",
            "action",
            "step"
          ]
        },
        "LogMessageSourceHandler": {
          "type": "object",
          "description": "An object that identifies the dialog element that generated the error message.",
          "properties": {
            "type": {
              "type": "string",
              "description": "A string that indicates the type of dialog element that generated the error message."
            },
            "action": {
              "type": "string",
              "description": "The unique identifier of the action that generated the error message."
            },
            "step": {
              "type": "string",
              "description": "The unique identifier of the step that generated the error message."
            },
            "handler": {
              "type": "string",
              "description": "The unique identifier of the handler that generated the error message."
            }
          },
          "required": [
            "type",
            "action",
            "handler"
          ]
        },
        "LogPagination": {
          "description": "The pagination data for the returned objects.",
          "properties": {
            "next_url": {
              "type": "string",
              "description": "The URL that will return the next page of results, if any."
            },
            "matched": {
              "type": "integer",
              "description": "Reserved for future use."
            },
            "next_cursor": {
              "type": "string",
              "description": "A token identifying the next page of results."
            }
          }
        },
        "MessageContext": {
          "type": "object",
          "properties": {
            "global": {
              "$ref": "#/components/schemas/MessageContextGlobal"
            },
            "skills": {
              "$ref": "#/components/schemas/MessageContextSkills"
            }
          }
        },
        "MessageContextStateless": {
          "type": "object",
          "properties": {
            "global": {
              "$ref": "#/components/schemas/MessageContextGlobalStateless"
            },
            "skills": {
              "$ref": "#/components/schemas/MessageContextSkills"
            }
          }
        },
        "MessageContextGlobal": {
          "allOf": [
            {
              "$ref": "#/components/schemas/BaseMessageContextGlobal"
            },
            {
              "properties": {
                "session_id": {
                  "type": "string",
                  "description": "The session ID.",
                  "readOnly": true
                }
              }
            }
          ]
        },
        "MessageContextGlobalStateless": {
          "allOf": [
            {
              "$ref": "#/components/schemas/BaseMessageContextGlobal"
            },
            {
              "properties": {
                "session_id": {
                  "type": "string",
                  "description": "The unique identifier of the session."
                }
              }
            }
          ]
        },
        "MessageContextGlobalSystem": {
          "type": "object",
          "description": "Built-in system properties that apply to all skills used by the assistant.",
          "properties": {
            "timezone": {
              "description": "The user time zone. The assistant uses the time zone to correctly resolve relative time references.",
              "type": "string"
            },
            "user_id": {
              "description": "A string value that identifies the user who is interacting with the assistant. The client must provide a unique identifier for each individual end user who accesses the application. For user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically set to the value of **context.global.session_id**.\n\n**Note:** This property is the same as the **user_id** property at the root of the message body. If **user_id** is specified in both locations in a message request, the value specified at the root is used.",
              "type": "string",
              "minLength": 1,
              "maxLength": 256
            },
            "turn_count": {
              "type": "integer",
              "description": "A counter that is automatically incremented with each turn of the conversation. A value of 1 indicates that this is the the first turn of a new conversation, which can affect the behavior of some skills (for example, triggering the start node of a dialog)."
            },
            "locale": {
              "description": "The language code for localization in the user input. The specified locale overrides the default for the assistant, and is used for interpreting entity values in user input such as date values. For example, `04/03/2018` might be interpreted either as April 3 or March 4, depending on the locale.\n\n This property is included only if the new system entities are enabled for the skill.",
              "type": "string",
              "enum": [
                "en-us",
                "en-ca",
                "en-gb",
                "ar-ar",
                "cs-cz",
                "de-de",
                "es-es",
                "fr-fr",
                "it-it",
                "ja-jp",
                "ko-kr",
                "nl-nl",
                "pt-br",
                "zh-cn",
                "zh-tw"
              ]
            },
            "reference_time": {
              "description": "The base time for interpreting any relative time mentions in the user input. The specified time overrides the current server time, and is used to calculate times mentioned in relative terms such as `now` or `tomorrow`. This can be useful for simulating past or future times for testing purposes, or when analyzing documents such as news articles.\n\nThis value must be a UTC time value formatted according to ISO 8601 (for example, `2019-06-26T12:00:00Z` for noon on 26 June 2019.\n\nThis property is included only if the new system entities are enabled for the skill.",
              "type": "string"
            }
          }
        },
        "MessageContextSkill": {
          "type": "object",
          "description": "Contains information specific to a particular skill used by the Assistant. The property name must be the same as the name of the skill (for example, `main skill`).",
          "properties": {
            "user_defined": {
              "description": "Arbitrary variables that can be read and written by a particular skill.",
              "type": "object",
              "additionalProperties": {
                "type": "object"
              }
            },
            "system": {
              "$ref": "#/components/schemas/MessageContextSkillSystem"
            }
          }
        },
        "MessageContextSkills": {
          "type": "object",
          "description": "Information specific to particular skills used by the assistant.\n\n**Note:** Currently, only a single child property is supported, containing variables that apply to the dialog skill used by the assistant.",
          "additionalProperties": {
            "$ref": "#/components/schemas/MessageContextSkill"
          }
        },
        "MessageContextSkillSystem": {
          "type": "object",
          "description": "System context data used by the skill.",
          "additionalProperties": {
            "description": "For internal use only."
          },
          "properties": {
            "state": {
              "type": "string",
              "description": "An encoded string that represents the current conversation state. By saving this value and then sending it in the context of a subsequent message request, you can return to an earlier point in the conversation. If you are using stateful sessions, you can also use a stored state value to restore a paused conversation whose session is expired."
            }
          }
        },
        "MessageInput": {
          "allOf": [
            {
              "$ref": "#/components/schemas/BaseMessageInput"
            },
            {
              "properties": {
                "options": {
                  "$ref": "#/components/schemas/MessageInputOptions"
                }
              }
            }
          ],
          "x-java-builder": true
        },
        "MessageInputOptions": {
          "allOf": [
            {
              "$ref": "#/components/schemas/BaseMessageInputOptions"
            },
            {
              "properties": {
                "debug": {
                  "type": "boolean",
                  "description": "Whether to return additional diagnostic information. Set to `true` to return additional information in the `output.debug` property. If you also specify **return_context**=`true`, the returned skill context includes the `system.state` property.",
                  "default": false
                },
                "return_context": {
                  "type": "boolean",
                  "description": "Whether to return session context with the response. If you specify `true`, the response includes the `context` property. If you also specify **debug**=`true`, the returned skill context includes the `system.state` property.",
                  "default": false
                },
                "export": {
                  "type": "boolean",
                  "description": "Whether to return session context, including full conversation state. If you specify `true`, the response includes the `context` property, and the skill context includes the `system.state` property.\n\n**Note:** If **export**=`true`, the context is returned regardless of the value of **return_context**.",
                  "default": false
                }
              }
            }
          ]
        },
        "MessageInputOptionsAutoLearn": {
          "description": "Autolearning options for the message.\n\n**Note:** Autolearning is a beta feature.",
          "properties": {
            "learn": {
              "type": "boolean",
              "description": "Whether the message should be used for autolearning. Specify `false` to exclude a message from autolearning (for example, if you are running tests on a production assistant). If autolearning is not enabled for the dialog skill, this option is ignored.",
              "default": true
            },
            "apply": {
              "type": "boolean",
              "description": "Whether the autolearned model should be applied when responding to the message. You can use this option to compare responses with and without autolearning. If autolearning is not enabled for the dialog skill, this option is ignored.",
              "default": true
            }
          },
          "x-sdk-exclude": true
        },
        "MessageInputOptionsSpelling": {
          "description": "Spelling correction options for the message. Any options specified on an individual message override the settings configured for the skill.",
          "properties": {
            "suggestions": {
              "type": "boolean",
              "description": "Whether to use spelling correction when processing the input. If spelling correction is used and **auto_correct** is `true`, any spelling corrections are automatically applied to the user input. If **auto_correct** is `false`, any suggested corrections are returned in the **output.spelling** property.\n\nThis property overrides the value of the **spelling_suggestions** property in the workspace settings for the skill."
            },
            "auto_correct": {
              "type": "boolean",
              "description": "Whether to use autocorrection when processing the input. If this property is `true`, any corrections are automatically applied to the user input, and the original text is returned in the **output.spelling** property of the message response. This property overrides the value of the **spelling_auto_correct** property in the workspace settings for the skill."
            }
          }
        },
        "MessageInputStateless": {
          "allOf": [
            {
              "$ref": "#/components/schemas/BaseMessageInput"
            },
            {
              "properties": {
                "options": {
                  "$ref": "#/components/schemas/MessageInputOptionsStateless"
                }
              }
            }
          ],
          "x-java-builder": true
        },
        "MessageInputOptionsStateless": {
          "allOf": [
            {
              "$ref": "#/components/schemas/BaseMessageInputOptions"
            },
            {
              "properties": {
                "debug": {
                  "type": "boolean",
                  "description": "Whether to return additional diagnostic information. Set to `true` to return additional information in the `output.debug` property.",
                  "default": false
                }
              }
            }
          ]
        },
        "MessageOutput": {
          "description": "Assistant output to be rendered or processed by the client.",
          "properties": {
            "generic": {
              "type": "array",
              "description": "Output intended for any channel. It is the responsibility of the client application to implement the supported response types.",
              "items": {
                "$ref": "#/components/schemas/RuntimeResponseGeneric"
              }
            },
            "intents": {
              "description": "An array of intents recognized in the user input, sorted in descending order of confidence",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RuntimeIntent"
              }
            },
            "entities": {
              "description": "An array of entities identified in the user input",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/RuntimeEntity"
              }
            },
            "actions": {
              "description": "An array of objects describing any actions requested by the dialog node.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DialogNodeAction"
              }
            },
            "debug": {
              "$ref": "#/components/schemas/MessageOutputDebug"
            },
            "user_defined": {
              "type": "object",
              "description": "An object containing any custom properties included in the response. This object includes any arbitrary properties defined in the dialog JSON editor as part of the dialog node output.",
              "additionalProperties": true
            },
            "spelling": {
              "$ref": "#/components/schemas/MessageOutputSpelling"
            }
          }
        },
        "MessageOutputDebug": {
          "description": "Additional detailed information about a message response and how it was generated.",
          "properties": {
            "nodes_visited": {
              "type": "array",
              "description": "An array of objects containing detailed diagnostic information about the nodes that were triggered during processing of the input message. ",
              "items": {
                "type": "object",
                "title": "DialogNodesVisited",
                "properties": {
                  "dialog_node": {
                    "type": "string",
                    "description": "A dialog node that was triggered during processing of the input message."
                  },
                  "title": {
                    "type": "string",
                    "description": "The title of the dialog node."
                  },
                  "conditions": {
                    "type": "string",
                    "description": "The conditions that trigger the dialog node."
                  }
                }
              }
            },
            "log_messages": {
              "type": "array",
              "description": "An array of up to 50 messages logged with the request.",
              "items": {
                "$ref": "#/components/schemas/DialogLogMessage"
              }
            },
            "branch_exited": {
              "type": "boolean",
              "description": "Assistant sets this to true when this message response concludes or interrupts a dialog."
            },
            "branch_exited_reason": {
              "type": "string",
              "description": "When `branch_exited` is set to `true` by the Assistant, the `branch_exited_reason` specifies whether the dialog completed by itself or got interrupted.",
              "enum": [
                "completed",
                "fallback"
              ]
            },
            "auto_learn": {
              "type": "object",
              "description": "For internal use only.",
              "x-sdk-exclude": true
            }
          }
        },
        "MessageOutputDebugAutoLearnModel": {
          "description": "Detailed information about how an autolearned model affected the response.",
          "properties": {
            "outcome": {
              "type": "string",
              "description": "Whether the model was consulted successfully.",
              "enum": [
                "success",
                "failure"
              ]
            },
            "model_type": {
              "type": "string",
              "description": "How the model was applied.",
              "enum": [
                "autolearn",
                "autolearn_explore",
                "supervised"
              ]
            },
            "model_id": {
              "type": "string",
              "description": "Unique identifier of the autolearned model."
            },
            "suggestions": {
              "description": "Possible responses the assistant would have returned with autolearning applied, either as disambiguation suggestions or alternate responses. Included only if the response was generated with autolearning in preview mode. (Preview mode means that autolearning is enabled, but is not being applied.)",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DialogSuggestion"
              }
            }
          }
        },
        "MessageOutputSpelling": {
          "type": "object",
          "description": "Properties describing any spelling corrections in the user input that was received.",
          "properties": {
            "text": {
              "description": "The user input text that was used to generate the response. If spelling autocorrection is enabled, this text reflects any spelling corrections that were applied.",
              "type": "string"
            },
            "original_text": {
              "description": "The original user input text. This property is returned only if autocorrection is enabled and the user input was corrected.",
              "type": "string"
            },
            "suggested_text": {
              "description": "Any suggested corrections of the input text. This property is returned only if spelling correction is enabled and autocorrection is disabled.",
              "type": "string"
            }
          }
        },
        "MessageRequest": {
          "type": "object",
          "description": "A stateful message request formatted for the Watson Assistant service.",
          "properties": {
            "input": {
              "$ref": "#/components/schemas/MessageInput"
            },
            "context": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MessageContext"
                },
                {
                  "description": "Context data for the conversation. You can use this property to set or modify context variables, which can also be accessed by dialog nodes. The context is stored by the assistant on a per-session basis.\n\n**Note:** The total size of the context data stored for a stateful session cannot exceed 100KB."
                }
              ]
            },
            "user_id": {
              "type": "string",
              "description": "A string value that identifies the user who is interacting with the assistant. The client must provide a unique identifier for each individual end user who accesses the application. For user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically set to the value of **context.global.session_id**.\n\n**Note:** This property is the same as the **user_id** property in the global system context. If **user_id** is specified in both locations, the value specified at the root is used.",
              "minLength": 1,
              "maxLength": 256
            }
          },
          "example": {
            "input": {
              "message_type": "text",
              "text": "Hello",
              "options": {
                "return_context": true,
                "export": true
              }
            },
            "context": {
              "global": {
                "system": {
                  "user_id": "my_user_id"
                }
              }
            }
          }
        },
        "MessageRequestStateless": {
          "type": "object",
          "description": "A stateless message request formatted for the Watson Assistant service.",
          "properties": {
            "input": {
              "$ref": "#/components/schemas/MessageInputStateless"
            },
            "context": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MessageContextStateless"
                },
                {
                  "description": "Context data for the conversation. You can use this property to set or modify context variables, which can also be accessed by dialog nodes. The context is not stored by the assistant. To maintain session state, include the context from the previous response.\n\n**Note:** The total size of the context data for a stateless session cannot exceed 250KB."
                }
              ]
            },
            "user_id": {
              "type": "string",
              "description": "A string value that identifies the user who is interacting with the assistant. The client must provide a unique identifier for each individual end user who accesses the application. For user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically set to the value of **context.global.session_id**.\n\n**Note:** This property is the same as the **user_id** property in the global system context. If **user_id** is specified in both locations in a message request, the value specified at the root is used."
            }
          },
          "example": {
            "input": {
              "message_type": "text",
              "text": "I want to cancel my order"
            },
            "context": {
              "global": {
                "system": {
                  "turn_count": 1
                },
                "session_id": "89fe006f-7068-40b7-a898-ba9240904000"
              },
              "skills": {
                "main skill": {
                  "system": {
                    "state": "eyJzZXNzaW9uX2lkIjoiODlmZTAwNmYtNzA2OC00MGI3LWE4OTgtYmE5MjQwOTA0MDAwIiwic2tpbGxfcmVmZXJlbmNlIjoibWFpbiBza2lsbCIsImFzc2lzdGFudF9pZCI6ImViM2RmZGRlLTJkNDUtNDBmYS05NDZlLTk2ODVmNTU2NzhhOSIsImluaXRpYWxpemVkIjp0cnVlLCJkaWFsb2dfc3RhY2siOlt7ImRpYWxvZ19ub2RlIjoicm9vdCJ9XSwiX25vZGVfb3V0cHV0X21hcCI6eyJub2RlXzJfMTU3MTA3NDUxMzc0NSI6WzBdfSwibGFzdF9icmFuY2hfbm9kZSI6Im5vZGVfMl8xNTcxMDc0NTEzNzQ1In0="
                  }
                }
              }
            },
            "user_id": "my_user_id"
          }
        },
        "MessageResponse": {
          "description": "A response from the Watson Assistant service.",
          "properties": {
            "output": {
              "$ref": "#/components/schemas/MessageOutput"
            },
            "context": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MessageContext"
                },
                {
                  "description": "Context data for the conversation. You can use this property to access context variables. The context is stored by the assistant on a per-session basis.\n\n**Note:** The context is included in message responses only if **return_context**=`true` in the message request. Full context is always included in logs."
                }
              ]
            },
            "user_id": {
              "type": "string",
              "description": "A string value that identifies the user who is interacting with the assistant. The client must provide a unique identifier for each individual end user who accesses the application. For user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically set to the value of **context.global.session_id**.\n\n**Note:** This property is the same as the **user_id** property in the global system context."
            }
          },
          "required": [
            "output",
            "user_id"
          ]
        },
        "MessageResponseStateless": {
          "description": "A stateless response from the Watson Assistant service.",
          "properties": {
            "output": {
              "$ref": "#/components/schemas/MessageOutput"
            },
            "context": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/MessageContextStateless"
                },
                {
                  "description": "Context data for the conversation. You can use this property to access context variables. The context is not stored by the assistant; to maintain session state, include the context from the response in the next message."
                }
              ]
            },
            "user_id": {
              "type": "string",
              "description": "A string value that identifies the user who is interacting with the assistant. The client must provide a unique identifier for each individual end user who accesses the application. For user-based plans, this user ID is used to identify unique users for billing purposes. This string cannot contain carriage return, newline, or tab characters. If no value is specified in the input, **user_id** is automatically set to the value of **context.global.session_id**.\n\n**Note:** This property is the same as the **user_id** property in the global system context."
            }
          },
          "required": [
            "output",
            "context"
          ]
        },
        "ResponseGenericChannel": {
          "properties": {
            "channel": {
              "type": "string",
              "description": "A channel for which the response is intended."
            }
          }
        },
        "RuntimeEntity": {
          "description": "The entity value that was recognized in the user input.",
          "type": "object",
          "required": [
            "entity",
            "value"
          ],
          "properties": {
            "entity": {
              "type": "string",
              "description": "An entity detected in the input."
            },
            "location": {
              "type": "array",
              "description": "An array of zero-based character offsets that indicate where the detected entity values begin and end in the input text.",
              "items": {
                "type": "integer"
              },
              "maxItems": 2,
              "minItems": 2
            },
            "value": {
              "type": "string",
              "description": "The term in the input text that was recognized as an entity value."
            },
            "confidence": {
              "type": "number",
              "description": "A decimal percentage that represents Watson's confidence in the recognized entity."
            },
            "metadata": {
              "type": "object",
              "description": "**Deprecated.** Any metadata for the entity.\n\nBeginning with the `2021-06-14` API version, the `metadata` property is no longer returned. For information about system entities recognized in the user input, see the `interpretation` property.",
              "deprecated": true,
              "x-ibm-change-notices": [
                {
                  "version": "2021-06-14",
                  "type": "update",
                  "description": "The `metadata` property is deprecated and is no longer returned. For information about system entities recognized in the user input, see the `interpretation` property."
                }
              ],
              "additionalProperties": true
            },
            "groups": {
              "type": "array",
              "description": "The recognized capture groups for the entity, as defined by the entity pattern.",
              "items": {
                "title": "CaptureGroup",
                "type": "object",
                "required": [
                  "group"
                ],
                "properties": {
                  "group": {
                    "type": "string",
                    "description": "A recognized capture group for the entity."
                  },
                  "location": {
                    "type": "array",
                    "description": "Zero-based character offsets that indicate where the entity value begins and ends in the input text.",
                    "items": {
                      "type": "integer"
                    },
                    "maxItems": 2,
                    "minItems": 2
                  }
                }
              }
            },
            "interpretation": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RuntimeEntityInterpretation"
                },
                {
                  "description": "An object containing detailed information about the entity recognized in the user input. This property is included only if the new system entities are enabled for the skill.\n\nFor more information about how the new system entities are interpreted, see the [documentation](https://cloud.ibm.com/docs/assistant?topic=assistant-beta-system-entities)."
                }
              ]
            },
            "alternatives": {
              "type": "array",
              "description": "An array of possible alternative values that the user might have intended instead of the value returned in the **value** property. This property is returned only for `@sys-time` and `@sys-date` entities when the user's input is ambiguous.\n\nThis property is included only if the new system entities are enabled for the skill.",
              "items": {
                "$ref": "#/components/schemas/RuntimeEntityAlternative"
              }
            },
            "role": {
              "$ref": "#/components/schemas/RuntimeEntityRole"
            }
          }
        },
        "RuntimeEntityAlternative": {
          "type": "object",
          "description": "An alternative value for the recognized entity.",
          "properties": {
            "value": {
              "type": "string",
              "description": "The entity value that was recognized in the user input."
            },
            "confidence": {
              "type": "number",
              "description": "A decimal percentage that represents Watson's confidence in the recognized entity."
            }
          }
        },
        "RuntimeEntityInterpretation": {
          "allOf": [
            {
              "$ref": "#/components/schemas/RuntimeEntityInterpretationSysDate"
            },
            {
              "$ref": "#/components/schemas/RuntimeEntityInterpretationSysNumber"
            },
            {
              "$ref": "#/components/schemas/RuntimeEntityInterpretationSysTime"
            }
          ]
        },
        "RuntimeEntityInterpretationSysDate": {
          "properties": {
            "calendar_type": {
              "type": "string",
              "description": "The calendar used to represent a recognized date (for example, `Gregorian`)."
            },
            "datetime_link": {
              "type": "string",
              "description": "A unique identifier used to associate a time and date. If the user input contains a date and time that are mentioned together (for example, `Today at 5`, the same **datetime_link** value is returned for both the `@sys-date` and `@sys-time` entities)."
            },
            "festival": {
              "type": "string",
              "description": "A locale-specific holiday name (such as `thanksgiving` or `christmas`). This property is included when a `@sys-date` entity is recognized based on a holiday name in the user input."
            },
            "granularity": {
              "type": "string",
              "description": "The precision or duration of a time range specified by a recognized `@sys-time` or `@sys-date` entity.",
              "enum": [
                "day",
                "fortnight",
                "hour",
                "instant",
                "minute",
                "month",
                "quarter",
                "second",
                "week",
                "weekend",
                "year"
              ]
            },
            "range_link": {
              "type": "string",
              "description": "A unique identifier used to associate multiple recognized `@sys-date`, `@sys-time`, or `@sys-number` entities that are recognized as a range of values in the user's input (for example, `from July 4 until July 14` or `from 20 to 25`)."
            },
            "range_modifier": {
              "type": "string",
              "description": "The word in the user input that indicates that a `sys-date` or `sys-time` entity is part of an implied range where only one date or time is specified (for example, `since` or `until`)."
            },
            "relative_day": {
              "type": "number",
              "description": "A recognized mention of a relative day, represented numerically as an offset from the current date (for example, `-1` for `yesterday` or `10` for `in ten days`)."
            },
            "relative_month": {
              "type": "number",
              "description": "A recognized mention of a relative month, represented numerically as an offset from the current month (for example, `1` for `next month` or `-3` for `three months ago`)."
            },
            "relative_week": {
              "type": "number",
              "description": "A recognized mention of a relative week, represented numerically as an offset from the current week (for example, `2` for `in two weeks` or `-1` for `last week)."
            },
            "relative_weekend": {
              "type": "number",
              "description": "A recognized mention of a relative date range for a weekend, represented numerically as an offset from the current weekend (for example, `0` for `this weekend` or `-1` for `last weekend`)."
            },
            "relative_year": {
              "type": "number",
              "description": "A recognized mention of a relative year, represented numerically as an offset from the current year (for example, `1` for `next year` or `-5` for `five years ago`)."
            },
            "specific_day": {
              "type": "number",
              "description": "A recognized mention of a specific date, represented numerically as the date within the month (for example, `30` for `June 30`.)"
            },
            "specific_day_of_week": {
              "type": "string",
              "description": "A recognized mention of a specific day of the week as a lowercase string (for example, `monday`)."
            },
            "specific_month": {
              "type": "number",
              "description": "A recognized mention of a specific month, represented numerically (for example, `7` for `July`)."
            },
            "specific_quarter": {
              "type": "number",
              "description": "A recognized mention of a specific quarter, represented numerically (for example, `3` for `the third quarter`)."
            },
            "specific_year": {
              "type": "number",
              "description": "A recognized mention of a specific year (for example, `2016`)."
            }
          }
        },
        "RuntimeEntityInterpretationSysNumber": {
          "properties": {
            "numeric_value": {
              "type": "number",
              "description": "A recognized numeric value, represented as an integer or double."
            },
            "range_link": {
              "type": "string",
              "description": "A unique identifier used to associate multiple recognized `@sys-date`, `@sys-time`, or `@sys-number` entities that are recognized as a range of values in the user's input (for example, `from July 4 until July 14` or `from 20 to 25`)."
            },
            "subtype": {
              "type": "string",
              "description": "The type of numeric value recognized in the user input (`integer` or `rational`)."
            }
          }
        },
        "RuntimeEntityInterpretationSysTime": {
          "properties": {
            "datetime_link": {
              "type": "string",
              "description": "A unique identifier used to associate a recognized time and date. If the user input contains a date and time that are mentioned together (for example, `Today at 5`, the same **datetime_link** value is returned for both the `@sys-date` and `@sys-time` entities)."
            },
            "granularity": {
              "type": "string",
              "description": "The precision or duration of a time range specified by a recognized `@sys-time` or `@sys-date` entity.",
              "enum": [
                "day",
                "fortnight",
                "hour",
                "instant",
                "minute",
                "month",
                "quarter",
                "second",
                "week",
                "weekend",
                "year"
              ]
            },
            "part_of_day": {
              "type": "string",
              "description": "A recognized term for a time that was mentioned as a part of the day in the user's input (for example, `morning` or `afternoon`)."
            },
            "range_link": {
              "type": "string",
              "description": "A unique identifier used to associate multiple recognized `@sys-date`, `@sys-time`, or `@sys-number` entities that are recognized as a range of values in the user's input (for example, `from July 4 until July 14` or `from 20 to 25`)."
            },
            "relative_hour": {
              "type": "number",
              "description": "A recognized mention of a relative hour, represented numerically as an offset from the current hour (for example, `3` for `in three hours` or `-1` for `an hour ago`)."
            },
            "relative_minute": {
              "type": "number",
              "description": "A recognized mention of a relative time, represented numerically as an offset in minutes from the current time (for example, `5` for `in five minutes` or `-15` for `fifteen minutes ago`)."
            },
            "relative_second": {
              "type": "number",
              "description": "A recognized mention of a relative time, represented numerically as an offset in seconds from the current time (for example, `10` for `in ten seconds` or `-30` for `thirty seconds ago`)."
            },
            "specific_hour": {
              "type": "number",
              "description": "A recognized specific hour mentioned as part of a time value (for example, `10` for `10:15 AM`.)"
            },
            "specific_minute": {
              "type": "number",
              "description": "A recognized specific minute mentioned as part of a time value (for example, `15` for `10:15 AM`.)"
            },
            "specific_second": {
              "type": "number",
              "description": "A recognized specific second mentioned as part of a time value (for example, `30` for `10:15:30 AM`.)"
            },
            "timezone": {
              "type": "string",
              "description": "A recognized time zone mentioned as part of a time value (for example, `EST`)."
            }
          }
        },
        "RuntimeEntityRole": {
          "description": "An object describing the role played by a system entity that is specifies the beginning or end of a range recognized in the user input. This property is included only if the new system entities are enabled for the skill.",
          "properties": {
            "type": {
              "type": "string",
              "description": "The relationship of the entity to the range.",
              "enum": [
                "date_from",
                "date_to",
                "number_from",
                "number_to",
                "time_from",
                "time_to"
              ]
            }
          }
        },
        "RuntimeIntent": {
          "type": "object",
          "description": "An intent identified in the user input.",
          "required": [
            "intent",
            "confidence"
          ],
          "properties": {
            "intent": {
              "type": "string",
              "description": "The name of the recognized intent."
            },
            "confidence": {
              "type": "number",
              "format": "double",
              "description": "A decimal percentage that represents Watson's confidence in the intent."
            }
          }
        },
        "RuntimeResponseGeneric": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/RuntimeResponseTypeText"
            },
            {
              "$ref": "#/components/schemas/RuntimeResponseTypePause"
            },
            {
              "$ref": "#/components/schemas/RuntimeResponseTypeImage"
            },
            {
              "$ref": "#/components/schemas/RuntimeResponseTypeOption"
            },
            {
              "$ref": "#/components/schemas/RuntimeResponseTypeConnectToAgent"
            },
            {
              "$ref": "#/components/schemas/RuntimeResponseTypeSuggestion"
            },
            {
              "$ref": "#/components/schemas/RuntimeResponseTypeChannelTransfer"
            },
            {
              "$ref": "#/components/schemas/RuntimeResponseTypeSearch"
            },
            {
              "$ref": "#/components/schemas/RuntimeResponseTypeUserDefined"
            }
          ],
          "discriminator": {
            "propertyName": "response_type",
            "mapping": {
              "channel_transfer": "#/components/schemas/RuntimeResponseTypeChannelTransfer",
              "connect_to_agent": "#/components/schemas/RuntimeResponseTypeConnectToAgent",
              "image": "#/components/schemas/RuntimeResponseTypeImage",
              "option": "#/components/schemas/RuntimeResponseTypeOption",
              "suggestion": "#/components/schemas/RuntimeResponseTypeSuggestion",
              "pause": "#/components/schemas/RuntimeResponseTypePause",
              "search": "#/components/schemas/RuntimeResponseTypeSearch",
              "text": "#/components/schemas/RuntimeResponseTypeText",
              "user_defined": "#/components/schemas/RuntimeResponseTypeUserDefined"
            }
          },
          "x-java-builder": true
        },
        "RuntimeResponseTypeChannelTransfer": {
          "properties": {
            "response_type": {
              "type": "string",
              "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
            },
            "message_to_user": {
              "type": "string",
              "description": "The message to display to the user when initiating a channel transfer."
            },
            "transfer_info": {
              "$ref": "#/components/schemas/ChannelTransferInfo"
            },
            "channels": {
              "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseGenericChannel"
              }
            }
          },
          "required": [
            "response_type",
            "message_to_user",
            "transfer_info"
          ]
        },
        "RuntimeResponseTypeConnectToAgent": {
          "properties": {
            "response_type": {
              "type": "string",
              "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
            },
            "message_to_human_agent": {
              "type": "string",
              "description": "A message to be sent to the human agent who will be taking over the conversation."
            },
            "agent_available": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AgentAvailabilityMessage"
                },
                {
                  "description": "An optional message to be displayed to the user to indicate that the conversation will be transferred to the next available agent."
                }
              ]
            },
            "agent_unavailable": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/AgentAvailabilityMessage"
                },
                {
                  "description": "An optional message to be displayed to the user to indicate that no online agent is available to take over the conversation."
                }
              ]
            },
            "transfer_info": {
              "$ref": "#/components/schemas/DialogNodeOutputConnectToAgentTransferInfo"
            },
            "topic": {
              "type": "string",
              "description": "A label identifying the topic of the conversation, derived from the **title** property of the relevant node or the **topic** property of the dialog node response."
            },
            "channels": {
              "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseGenericChannel"
              }
            }
          },
          "required": [
            "response_type"
          ]
        },
        "RuntimeResponseTypeImage": {
          "properties": {
            "response_type": {
              "type": "string",
              "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
            },
            "source": {
              "type": "string",
              "description": "The `https:` URL of the image."
            },
            "title": {
              "type": "string",
              "description": "The title to show before the response."
            },
            "description": {
              "type": "string",
              "description": "The description to show with the the response."
            },
            "channels": {
              "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseGenericChannel"
              }
            }
          },
          "required": [
            "response_type",
            "source"
          ]
        },
        "RuntimeResponseTypeOption": {
          "properties": {
            "response_type": {
              "type": "string",
              "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
            },
            "title": {
              "type": "string",
              "description": "The title or introductory text to show before the response."
            },
            "description": {
              "type": "string",
              "description": "The description to show with the the response."
            },
            "preference": {
              "type": "string",
              "description": "The preferred type of control to display.",
              "enum": [
                "dropdown",
                "button"
              ]
            },
            "options": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DialogNodeOutputOptionsElement"
              },
              "description": "An array of objects describing the options from which the user can choose."
            },
            "channels": {
              "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseGenericChannel"
              }
            }
          },
          "required": [
            "response_type",
            "options",
            "title"
          ]
        },
        "RuntimeResponseTypePause": {
          "properties": {
            "response_type": {
              "type": "string",
              "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
            },
            "time": {
              "type": "integer",
              "description": "How long to pause, in milliseconds."
            },
            "typing": {
              "type": "boolean",
              "description": "Whether to send a \"user is typing\" event during the pause."
            },
            "channels": {
              "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseGenericChannel"
              }
            }
          },
          "required": [
            "response_type",
            "time"
          ]
        },
        "RuntimeResponseTypeSearch": {
          "properties": {
            "response_type": {
              "type": "string",
              "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
            },
            "header": {
              "type": "string",
              "description": "The title or introductory text to show before the response. This text is defined in the search skill configuration."
            },
            "primary_results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SearchResult"
              },
              "description": "An array of objects that contains the search results to be displayed in the initial response to the user."
            },
            "additional_results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/SearchResult"
              },
              "description": "An array of objects that contains additional search results that can be displayed to the user upon request."
            },
            "channels": {
              "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseGenericChannel"
              }
            }
          },
          "required": [
            "response_type",
            "header",
            "primary_results",
            "additional_results"
          ]
        },
        "RuntimeResponseTypeSuggestion": {
          "properties": {
            "response_type": {
              "type": "string",
              "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
            },
            "title": {
              "type": "string",
              "description": "The title or introductory text to show before the response."
            },
            "suggestions": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/DialogSuggestion"
              },
              "description": "An array of objects describing the possible matching dialog nodes from which the user can choose."
            },
            "channels": {
              "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseGenericChannel"
              }
            }
          },
          "required": [
            "response_type",
            "title",
            "suggestions"
          ]
        },
        "RuntimeResponseTypeText": {
          "properties": {
            "response_type": {
              "type": "string",
              "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
            },
            "text": {
              "type": "string",
              "description": "The text of the response."
            },
            "channels": {
              "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseGenericChannel"
              }
            }
          },
          "required": [
            "response_type",
            "text"
          ]
        },
        "RuntimeResponseTypeUserDefined": {
          "properties": {
            "response_type": {
              "type": "string",
              "description": "The type of response returned by the dialog node. The specified response type must be supported by the client application or channel."
            },
            "user_defined": {
              "type": "object",
              "description": "An object containing any properties for the user-defined response type.",
              "additionalProperties": {
                "description": "Any property used by the user-defined response type."
              }
            },
            "channels": {
              "description": "An array of objects specifying channels for which the response is intended. If **channels** is present, the response is intended for a built-in integration and should not be handled by an API client.",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResponseGenericChannel"
              }
            }
          },
          "required": [
            "response_type",
            "user_defined"
          ]
        },
        "SearchResult": {
          "properties": {
            "id": {
              "type": "string",
              "description": "The unique identifier of the document in the Discovery service collection.\n\nThis property is included in responses from search skills, which are available only to Plus or Enterprise plan users."
            },
            "result_metadata": {
              "$ref": "#/components/schemas/SearchResultMetadata"
            },
            "body": {
              "type": "string",
              "description": "A description of the search result. This is taken from an abstract, summary, or highlight field in the Discovery service response, as specified in the search skill configuration."
            },
            "title": {
              "type": "string",
              "description": "The title of the search result. This is taken from a title or name field in the Discovery service response, as specified in the search skill configuration."
            },
            "url": {
              "type": "string",
              "description": "The URL of the original data object in its native data source."
            },
            "highlight": {
              "$ref": "#/components/schemas/SearchResultHighlight"
            },
            "answers": {
              "type": "array",
              "description": "An array specifying segments of text within the result that were identified as direct answers to the search query. Currently, only the single answer with the highest confidence (if any) is returned.\n\n**Note:** This property uses the answer finding beta feature, and is available only if the search skill is connected to a Discovery v2 service instance.",
              "items": {
                "$ref": "#/components/schemas/SearchResultAnswer"
              },
              "minItems": 0,
              "maxItems": 1,
              "x-sdk-exclude": true
            }
          },
          "required": [
            "id",
            "result_metadata"
          ]
        },
        "SearchResultAnswer": {
          "description": "An object specifing a segment of text that was identified as a direct answer to the search query.",
          "properties": {
            "text": {
              "type": "string",
              "description": "The text of the answer."
            },
            "confidence": {
              "type": "number",
              "format": "double",
              "description": "The confidence score for the answer, as returned by the Discovery service.",
              "minimum": 0,
              "maximum": 1
            }
          },
          "required": [
            "text",
            "confidence"
          ]
        },
        "SearchResultHighlight": {
          "description": "An object containing segments of text from search results with query-matching text highlighted using HTML `<em>` tags.",
          "properties": {
            "body": {
              "type": "array",
              "description": "An array of strings containing segments taken from body text in the search results, with query-matching substrings highlighted.",
              "items": {
                "type": "string"
              }
            },
            "title": {
              "type": "array",
              "description": "An array of strings containing segments taken from title text in the search results, with query-matching substrings highlighted.",
              "items": {
                "type": "string"
              }
            },
            "url": {
              "type": "array",
              "description": "An array of strings containing segments taken from URLs in the search results, with query-matching substrings highlighted.",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": {
            "description": "An array of strings containing segments taken from a field in the search results that is not mapped to the `body`, `title`, or `url` property, with query-matching substrings highlighted. The property name is the name of the field in the Discovery collection.",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "SearchResultMetadata": {
          "description": "An object containing search result metadata from the Discovery service.",
          "properties": {
            "confidence": {
              "type": "number",
              "format": "double",
              "description": "The confidence score for the given result, as returned by the Discovery service."
            },
            "score": {
              "type": "number",
              "format": "double",
              "description": "An unbounded measure of the relevance of a particular result, dependent on the query and matching document. A higher score indicates a greater match to the query parameters."
            }
          }
        },
        "SessionResponse": {
          "properties": {
            "session_id": {
              "type": "string",
              "description": "The session ID."
            }
          },
          "required": [
            "session_id"
          ]
        }
      }
    }
  }