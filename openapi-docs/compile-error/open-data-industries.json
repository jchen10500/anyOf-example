{
    "openapi": "3.0.1",
    "info": {
      "title": "IBM Open Data for Industries",
      "description": "The IBM Open Data for Industries API connects to your service deployment, so you can ingest, enrich, index, search and manage data. Thus the API helps to interface stakeholders application with ODI data platform.",
      "version": "2.0.0",
      "x-last-updated": "2021-04-20"
    },
    "servers": [
      {
        "url": "https://{cpd_cluster_host}{:port}/{proxy-prefix}/api/{method-name}/{version}/"
      }
    ],
    "tags": [
      {
        "name": "Delivery",
        "description": "Enable users to perform file delivery operations, such as retrieving a signed URL for a SRN"
      },
      {
        "name": "Entitlements",
        "description": "Manage user access and permissions within the Data Ecosystem"
      },
      {
        "name": "File",
        "description": "Fetch records or request file location data"
      },
      {
        "name": "Indexer",
        "description": "Index records for efficient search"
      },
      {
        "name": "Legal",
        "description": "Manage legal data governance"
      },
      {
        "name": "Schema",
        "description": "Manage schema standards on data ecosystem"
      },
      {
        "name": "Search",
        "description": "Search indexed documents"
      },
      {
        "name": "Storage",
        "description": "Manage data ingestion and storage"
      },
      {
        "name": "Workflow",
        "description": "Run a business process"
      },
      {
        "name": "Wellbore DDMS",
        "description": "Manage well data lifecycle to support well domain management"
      },
      {
        "name": "Seismic DDMS",
        "description": "Manage Seismic data lifecycle to support Seismic domain management."
      }
    ],
    "paths": {
      "/GetFileSignedUrl": {
        "post": {
          "tags": [
            "Delivery"
          ],
          "summary": "Get file signed",
          "operationId": "getFileSignedURLUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            },
            {
              "name": "Content-Type",
              "in": "header",
              "description": "The file type/format of the request body",
              "required": true,
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            }
          ],
          "requestBody": {
            "description": "Signing request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UrlSigningRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UrlSigningResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "processed": [
                          {
                            "additionalProp1": {
                              "connectionString": "srn:file/segy:mysegy1",
                              "kind": "common:welldb:wellbore:1.0.0",
                              "signedUrl": "signed-url",
                              "unsignedUrl": "unsigned-url"
                            }
                          },
                          {
                            "additionalProp2": {
                              "connectionString": "srn:file/segy:mysegy1",
                              "kind": "common:welldb:wellbore:1.0.0",
                              "signedUrl": "signed-url",
                              "unsignedUrl": "unsigned-url"
                            }
                          },
                          {
                            "additionalProp3": {
                              "connectionString": "srn:file/segy:mysegy1",
                              "kind": "common:welldb:wellbore:1.0.0",
                              "signedUrl": "signed-url",
                              "unsignedUrl": "unsigned-url"
                            }
                          }
                        ],
                        "unprocessed": [
                          "[srn:file/segy:mysegy1,srn:file/segy:mysegy2,srn:file/segy:mysegy3]"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "signingRequest",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-delivery/api/delivery/v1/GetFileSignedUrl \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n\"srns\": [\n  \"string\",\n]\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\" \\\n",
                        "-d \"{\\\"srns\\\":\\\"string\\\"}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-delivery/api/delivery/v1/GetFileSignedUrl\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/groups": {
        "get": {
          "tags": [
            "Entitlements"
          ],
          "summary": "Get groups",
          "operationId": "getGroupsUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Groups"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "desId": "abc@x.ibm.com",
                        "groupNames": [
                          "Admin,Developer,Manager"
                        ],
                        "groups": [
                          {
                            "description": "This is the groupinfo description",
                            "email": "abc@x.ibm.com",
                            "groupEmail": "group-name@x.ibm.com",
                            "name": "Admin"
                          }
                        ],
                        "memberEmail": "abc@x.ibm.com"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "getting_entitlement_groups",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-entitlements/api/entitlements/v1/groups \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\" \\\n\\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-entitlements/api/entitlements/v1/groups\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        },
        "post": {
          "tags": [
            "Entitlements"
          ],
          "summary": "Create group",
          "operationId": "postGroupUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            }
          ],
          "requestBody": {
            "description": "newGroup",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateGroup"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/GroupInfo"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "description": "This is the groupinfo description",
                        "email": "abc@x.ibm.com",
                        "groupEmail": "group-name@x.ibm.com",
                        "name": "Admin"
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "getting_entitlement_groups",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-entitlements/api/entitlements/v1/groups \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n\"description\": \"string\",\n\"name\": \"string\"\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  \\\n-d '{\n\"description\": \"string\",\n\"name\": \"string\"\n}'\n\\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-entitlements/api/entitlements/v1/groups\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/groups/{groupEmail}/members": {
        "get": {
          "tags": [
            "Entitlements"
          ],
          "summary": "Get members of group",
          "operationId": "getMembersUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "groupEmail",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "cursor",
              "in": "query",
              "description": "cursor",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "limit",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "role",
              "in": "query",
              "description": "role",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Members"
                  },
                  "example": {
                    "value": {
                      "cursor": "abc",
                      "members": [
                        {
                          "email": "abc@x.ibm.com"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "getting_members_in_entitlement_groups",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-entitlements/api/entitlements/v1/groups/{groupEmail}/members \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-entitlements/api/entitlements/v1/groups/{groupEmail}/members\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        },
        "post": {
          "tags": [
            "Entitlements"
          ],
          "summary": "Add members to group",
          "operationId": "postMembersUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "groupEmail",
              "in": "path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "memberInfo",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MemberInfo"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/MemberInfo"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "email": "abc@x.ibm.com"
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "adding_members_to_entitlement_groups",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-entitlements/api/entitlements/v1/groups/{groupEmail}/members \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-d '{\n\"email\": \"string\"\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  \\\n-d '{\n\"email\": \"string\"\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-entitlements/api/entitlements/v1/groups/{groupEmail}/members\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/groups/{groupEmail}/members/{memberEmail}": {
        "delete": {
          "tags": [
            "Entitlements"
          ],
          "summary": "Delete members from group",
          "operationId": "deleteMemberUsingDELETE",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "groupEmail",
              "in": "path",
              "description": "groupEmail",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "memberEmail",
              "in": "path",
              "description": "memberEmail",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "200",
                        "message": "OK"
                      }
                    }
                  }
                }
              }
            },
            "204": {
              "description": "No Content Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "204",
                        "message": "No Content Found"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "delete_members_from_entitlement_group",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X DELETE \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-entitlements/api/entitlements/v1/groups/{groupEmail}/members/{memberEmail} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X DELETE -H \"data-partition-id: {partition_id}\"  \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-entitlements/api/entitlements/v1/groups/{groupEmail}/members/{memberEmail}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/jobs/updateLegalTagStatus": {
        "get": {
          "tags": [
            "Legal"
          ],
          "summary": "Get legal tag status",
          "operationId": "leg-checkLegalTagStatusChangesUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "100": "CONTINUE",
                        "_messageCode_": "200",
                        "message": "OK"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_legal_tag_status",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-legal/api/legal/v1/jobs/updateLegalTagStatus \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-legal/api/legal/v1/jobs/updateLegalTagStatus\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/legaltags": {
        "get": {
          "tags": [
            "Legal"
          ],
          "summary": "Get legal tags",
          "operationId": "listLegalTagsUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "valid",
              "in": "query",
              "description": "valid",
              "schema": {
                "type": "boolean",
                "default": true
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/LegalTagDtos"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "100": "CONTINUE",
                        "_messageCode_": "200",
                        "message": "OK"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_legal_tags",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-legal/api/legal/v1/legaltags \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-legal/api/legal/v1/legaltags\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        },
        "put": {
          "tags": [
            "Legal"
          ],
          "summary": "Update legal tag",
          "operationId": "updateLegalTagUsingPUT",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            }
          ],
          "requestBody": {
            "description": "legalTag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLegalTag"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/LegalTagDto"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "contractId": "AE12345",
                        "description": "Legal tag description",
                        "expirationDate": "2022-12-22",
                        "name": "common-demo-legaltag"
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "put_legal_tags",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X PUT \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-legal/api/legal/v1/legaltags \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-d '{\n\"contractId\": \"string\",\n\"description\": \"string\",\n\"expirationDate\": \"2020-10-13\",\n\"name\": \"string\"\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X PUT -H \"data-partition-id: {partition_id}\"  \\\n-d '{\n\"contractId\": \"string\",\n\"description\": \"string\",\n\"expirationDate\": \"2020-10-13\",\n\"name\": \"string\"\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-legal/api/legal/v1/legaltags\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        },
        "post": {
          "tags": [
            "Legal"
          ],
          "summary": "Create legal tag",
          "operationId": "leg-createLegalTagUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            }
          ],
          "requestBody": {
            "description": "legalTag",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegalTagDto"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/LegalTagDto"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "description": "This is the description of legal tag",
                        "name": "legal-tag-name",
                        "properties": {
                          "contractId": "legal-contract-id",
                          "countryOfOrigin": [
                            "[USA,CANADA,UK]"
                          ],
                          "dataType": "Public Domain Data",
                          "expirationDate": "yyyy-MM-dd",
                          "exportClassification": "EAR99",
                          "originator": "ODI",
                          "personalData": "Personal Data",
                          "securityClassification": "Public"
                        }
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "post_legal_tags",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-legal/api/legal/v1/legaltags \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-d '{\n\"description\": \"string\",\n\"name\": \"string\",\n\"properties\": {\n\"contractId\": \"string\",\n\"countryOfOrigin\": [\n\"string\"\n],\n\"dataType\": \"string\",\n\"expirationDate\": \"yyyy-MM-dd\",\n\"exportClassification\": \"string\",\n\"originator\": \"string\",\n\"personalData\": \"string\",\n\"securityClassification\": \"string\"\n}\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  \\\n-d '{\n\"description\": \"string\",\n\"name\": \"string\",\n\"properties\": {\n\"contractId\": \"string\",\n\"countryOfOrigin\": [\n\"string\"\n],\n\"dataType\": \"string\",\n\"expirationDate\": \"yyyy-MM-dd\",\n\"exportClassification\": \"string\",\n\"originator\": \"string\",\n\"personalData\": \"string\",\n\"securityClassification\": \"string\"\n}\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-legal/api/legal/v1/legaltags\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/legaltags/{name}": {
        "get": {
          "tags": [
            "Legal"
          ],
          "summary": "Get legal tag by name",
          "operationId": "leg-getLegalTagUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "name",
              "in": "path",
              "description": "Legal tag name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseEntity"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "body": {
                          "name": "common-demo-legaltag",
                          "contractId": "AE12345",
                          "expirationDate": "2022-12-21"
                        },
                        "statusCode": "{'100':'CONTINUE'}",
                        "statusCodeValue": 504
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_legal_tag_by_name",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-legal/api/legal/v1/legaltags/{name} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-legal/api/legal/v1/legaltags/{name}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        },
        "delete": {
          "tags": [
            "Legal"
          ],
          "summary": "Delete legal tag by name",
          "operationId": "leg-deleteLegalTagUsingDELETE",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "name",
              "in": "path",
              "description": "Legal tag name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "string",
                    "enum": [
                      "100 CONTINUE",
                      "101 SWITCHING_PROTOCOLS",
                      "102 PROCESSING",
                      "103 CHECKPOINT",
                      "200 OK",
                      "201 CREATED",
                      "202 ACCEPTED",
                      "203 NON_AUTHORITATIVE_INFORMATION",
                      "204 NO_CONTENT",
                      "205 RESET_CONTENT",
                      "206 PARTIAL_CONTENT",
                      "207 MULTI_STATUS",
                      "208 ALREADY_REPORTED",
                      "226 IM_USED",
                      "300 MULTIPLE_CHOICES",
                      "301 MOVED_PERMANENTLY",
                      "302 FOUND",
                      "302 MOVED_TEMPORARILY",
                      "303 SEE_OTHER",
                      "304 NOT_MODIFIED",
                      "305 USE_PROXY",
                      "307 TEMPORARY_REDIRECT",
                      "308 PERMANENT_REDIRECT",
                      "400 BAD_REQUEST",
                      "401 UNAUTHORIZED",
                      "402 PAYMENT_REQUIRED",
                      "403 FORBIDDEN",
                      "404 NOT_FOUND",
                      "405 METHOD_NOT_ALLOWED",
                      "406 NOT_ACCEPTABLE",
                      "407 PROXY_AUTHENTICATION_REQUIRED",
                      "408 REQUEST_TIMEOUT",
                      "409 CONFLICT",
                      "410 GONE",
                      "411 LENGTH_REQUIRED",
                      "412 PRECONDITION_FAILED",
                      "413 PAYLOAD_TOO_LARGE",
                      "413 REQUEST_ENTITY_TOO_LARGE",
                      "414 URI_TOO_LONG",
                      "414 REQUEST_URI_TOO_LONG",
                      "415 UNSUPPORTED_MEDIA_TYPE",
                      "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                      "417 EXPECTATION_FAILED",
                      "418 I_AM_A_TEAPOT",
                      "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                      "420 METHOD_FAILURE",
                      "421 DESTINATION_LOCKED",
                      "422 UNPROCESSABLE_ENTITY",
                      "423 LOCKED",
                      "424 FAILED_DEPENDENCY",
                      "426 UPGRADE_REQUIRED",
                      "428 PRECONDITION_REQUIRED",
                      "429 TOO_MANY_REQUESTS",
                      "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                      "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                      "500 INTERNAL_SERVER_ERROR",
                      "501 NOT_IMPLEMENTED",
                      "502 BAD_GATEWAY",
                      "503 SERVICE_UNAVAILABLE",
                      "504 GATEWAY_TIMEOUT",
                      "505 HTTP_VERSION_NOT_SUPPORTED",
                      "506 VARIANT_ALSO_NEGOTIATES",
                      "507 INSUFFICIENT_STORAGE",
                      "508 LOOP_DETECTED",
                      "509 BANDWIDTH_LIMIT_EXCEEDED",
                      "510 NOT_EXTENDED",
                      "511 NETWORK_AUTHENTICATION_REQUIRED"
                    ]
                  },
                  "examples": {
                    "response": {
                      "value": "100 CONTINUE"
                    }
                  }
                }
              }
            },
            "204": {
              "description": "No Content",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "204",
                        "message": "No content"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "delete_legal_tag_by_name",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X DELETE \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-legal/api/legal/v1/legaltags/{name} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X DELETE -H \"data-partition-id: {partition_id}\"  \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-legal/api/legal/v1/legaltags/{name}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/legaltags:batchRetrieve": {
        "post": {
          "tags": [
            "Legal"
          ],
          "summary": "Batch retrieve legal tags",
          "operationId": "leg-getLegalTagsUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            }
          ],
          "requestBody": {
            "description": "Requested tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestLegalTags"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/LegalTagDtos"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "legalTags": [
                          {
                            "description": "This is the description of legal tag",
                            "name": "legal-tag-name",
                            "properties": {
                              "contractId": "legal-contract-id",
                              "countryOfOrigin": [
                                "[USA,CANADA,UK]"
                              ],
                              "dataType": "Public Domain Data",
                              "expirationDate": "yyyy-MM-dd",
                              "exportClassification": "EAR99",
                              "originator": "ODI",
                              "personalData": "Personal Data",
                              "securityClassification": "Public"
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "batch_retrieve_legal_tags",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-legal/api/legal/v1/legaltags:batchRetrieve \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-d '{\n\"names\": [\n\"string\"\n]\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  \\\n-d '{\n\"names\": [\n\"string\"\n]\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-legal/api/legal/v1/legaltags:batchRetrieve\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/legaltags:properties": {
        "get": {
          "tags": [
            "Legal"
          ],
          "summary": "Get legal tag properties",
          "operationId": "leg-getLegalTagPropertiesUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ReadablePropertyValues"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "countriesOfOrigin": {
                          "additionalProp1": "{'PT':'Portugal','PW':'Palau','QA':'Qatar'}",
                          "additionalProp2": "other-properties",
                          "additionalProp3": "other-properties"
                        },
                        "dataTypes": [
                          "[Personally identifiable,Public data]"
                        ],
                        "exportClassificationControlNumbers": [
                          "[No License Required,Not - Technical Data,EAR99]"
                        ],
                        "otherRelevantDataCountries": {
                          "additionalProp1": "{'PT':'Portugal','PW':'Palau','QA':'Qatar'}"
                        },
                        "personalDataTypes": [
                          "[Personally identifiable,Public data]"
                        ],
                        "securityClassifications": [
                          "[Private,Public,Confedential]"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_legal_tags_properties",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-legal/api/legal/v1/legaltags:properties \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-legal/api/legal/v1/legaltags:properties\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/legaltags:validate": {
        "post": {
          "tags": [
            "Legal"
          ],
          "summary": "Validate legal",
          "operationId": "leg-validateLegalTagsUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            }
          ],
          "requestBody": {
            "description": "Requested tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestLegalTags"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/InvalidTagsWithReason"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "invalidLegalTags": [
                          {
                            "name": "legal-tag-invalid",
                            "reason": "Invalid tag reason"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "validate_legal_tags",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-legal/api/legal/v1/legaltags:validate \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-d '{\n\"names\": [\n\"string\"\n]\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  \\\n-d '{\n\"names\": [\n\"string\"\n]\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-legal/api/legal/v1/legaltags:validate\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/push-handlers/legaltag-changed": {
        "post": {
          "tags": [
            "Legal"
          ],
          "summary": "Legal tag changed",
          "operationId": "legaltagChangedUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/ResponseEntity"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "body": {
                          "name": "common-demo-legaltag",
                          "contractId": "AE12345",
                          "expirationDate": "2022-12-21"
                        },
                        "statusCode": "{'100':'CONTINUE'}",
                        "statusCodeValue": 504
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "change_legal_tag",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-legal/api/legal/v1/push-handlers/legaltag-changed \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-legal/api/legal/v1/push-handlers/legaltag-changed\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/ccs/query": {
        "post": {
          "tags": [
            "Search"
          ],
          "summary": "Queries using the criteria for cross cluster search",
          "description": "The API supports cross cluster searches when given the list of partitions.",
          "operationId": "CCS Query",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier. This should be same value as first field in kind field",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            }
          ],
          "requestBody": {
            "description": "Query request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CcsQueryRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CcsQueryResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "results": [
                          {
                            "additionalProp1": {},
                            "additionalProp2": {},
                            "additionalProp3": {}
                          }
                        ],
                        "totalCount": 0
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters were given on request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/AppError"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "User not authorized to perform the action",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/AppError"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "502": {
              "description": "Search service scale-up is taking longer than expected. Wait 10 seconds and retry.",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "query_on_criterions",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-search/api/search/v2/ccs/query \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-d '{\n\"kind\": \"common:ihs:well:1.0.0\",\n\"limit\": 30,\n\"offset\": 0,\n\"query\": \"string\",\n\"queryAsOwner\": false\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  \\\n-d '{\n\"kind\": \"common:ihs:well:1.0.0\",\n\"limit\": 30,\n\"offset\": 0,\n\"query\": \"string\",\n\"queryAsOwner\": false\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-search/api/search/v2/ccs/query\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/query": {
        "post": {
          "tags": [
            "Search"
          ],
          "summary": "Queries using the input criteria",
          "description": "The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required roles: ''users.datalake.viewers'' or ''users.datalake.editors'' or ''users.datalake.admins'' or ''users.datalake.ops''. In addition, users must be a member of data groups to access the data.",
          "operationId": "Query",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier. This should be same value as first field in kind field",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            }
          ],
          "requestBody": {
            "description": "Query request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/QueryResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "aggregations": [
                          {
                            "count": 12,
                            "key": "key-id"
                          }
                        ],
                        "results": [
                          {
                            "additionalProp1": {},
                            "additionalProp2": {},
                            "additionalProp3": {}
                          }
                        ],
                        "totalCount": 10
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters were given on request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/AppError"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "User not authorized to perform the action",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/AppError"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "502": {
              "description": "Search service scale-up is taking longer than expected. Wait 10 seconds and retry.",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "query_on_filter_criterions",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-search/api/search/v2/query \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-d '{\n\"kind\": \"common:ihs:well:1.0.0\",\n\"limit\": 30,\n\"offset\": 0,\n\"query\": \"string\",\n\"queryAsOwner\": false,\n\"returnedFields\": [\n\"string\"\n],\n\"sort\": {\n\"field\": [\n\"string\"\n],\n\"order\": [\n\"ASC\"\n]\n},\n\"spatialFilter\": {\n\"byBoundingBox\": {\n\"bottomRight\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n},\n\"topLeft\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n},\n\"byDistance\": {\n\"distance\": 1500,\n\"point\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n},\n\"byGeoPolygon\": {\n\"points\": [\n{\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n]\n},\n\"field\": \"string\"\n}\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  \\\n-d '{\n\"kind\": \"common:ihs:well:1.0.0\",\n\"limit\": 30,\n\"offset\": 0,\n\"query\": \"string\",\n\"queryAsOwner\": false,\n\"returnedFields\": [\n\"string\"\n],\n\"sort\": {\n\"field\": [\n\"string\"\n],\n\"order\": [\n\"ASC\"\n]\n},\n\"spatialFilter\": {\n\"byBoundingBox\": {\n\"bottomRight\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n},\n\"topLeft\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n},\n\"byDistance\": {\n\"distance\": 1500,\n\"point\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n},\n\"byGeoPolygon\": {\n\"points\": [\n{\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n]\n},\n\"field\": \"string\"\n}\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-search/api/search/v2/query\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/query_with_cursor": {
        "post": {
          "tags": [
            "Search"
          ],
          "summary": "Queries using the input criteria with cursor",
          "description": "The API supports full text search on string fields, range queries on date, numeric or string fields, along with geo-spatial search. Required roles: ''users.datalake.viewers'' or ''users.datalake.editors'' or ''users.datalake.admins'' or ''users.datalake.ops''. In addition, users must be a member of data groups to access the data. It can be used to retrieve large numbers of results (or even all results) from a single search request, in much the same way as you would use a cursor on a traditional database.",
          "operationId": "Query with cursor",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier. This should be same value as first field in kind field",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            }
          ],
          "requestBody": {
            "description": "Query request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CursorQueryRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Success",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "cursor": "string",
                        "results": [
                          {
                            "additionalProp1": {},
                            "additionalProp2": {},
                            "additionalProp3": {}
                          }
                        ],
                        "totalCount": 10
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Invalid parameters were given on request",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/AppError"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized Access",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "User not authorized to perform the action",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/AppError"
                  }
                }
              }
            },
            "404": {
              "description": "Endpoint Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "502": {
              "description": "Search service scale-up is taking longer than expected. Wait 10 seconds and retry.",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "query_on_input_criterions",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-search/api/search/v2/query_with_cursor \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-d '{\n\"kind\": \"common:ihs:well:1.0.0\",\n\"limit\": 30,\n\"query\": \"string\",\n\"queryAsOwner\": false,\n\"returnedFields\": [\n\"string\"\n],\n\"sort\": {\n\"field\": [\n\"string\"\n],\n\"order\": [\n\"ASC\"\n]\n},\n\"spatialFilter\": {\n\"byBoundingBox\": {\n\"bottomRight\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n},\n\"topLeft\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n},\n\"byDistance\": {\n\"distance\": 1500,\n\"point\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n},\n\"byGeoPolygon\": {\n\"points\": [\n{\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n]\n},\n\"field\": \"string\"\n}\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  \\\n-d '{\n\"kind\": \"common:ihs:well:1.0.0\",\n\"limit\": 30,\n\"query\": \"string\",\n\"queryAsOwner\": false,\n\"returnedFields\": [\n\"string\"\n],\n\"sort\": {\n\"field\": [\n\"string\"\n],\n\"order\": [\n\"ASC\"\n]\n},\n\"spatialFilter\": {\n\"byBoundingBox\": {\n\"bottomRight\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n},\n\"topLeft\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n},\n\"byDistance\": {\n\"distance\": 1500,\n\"point\": {\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n},\n\"byGeoPolygon\": {\n\"points\": [\n{\n\"latitude\": 37.450727,\n\"longitude\": -122.174762\n}\n]\n},\n\"field\": \"string\"\n}\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-search/api/search/v2/query_with_cursor\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/query/kinds": {
        "get": {
          "tags": [
            "Storage"
          ],
          "summary": "Get kinds of storage",
          "operationId": "getKindsUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            },
            {
              "name": "cursor",
              "in": "query",
              "description": "cursor",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "limit",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/DatastoreQueryResult"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "cursor": "des",
                        "results": [
                          [
                            ""
                          ]
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_storage_kinds",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/query/kinds?cursor={string}&limit={integer} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/query/kinds?cursor={string}&limit={integer}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/query/records": {
        "get": {
          "tags": [
            "Storage"
          ],
          "summary": "Get all records",
          "operationId": "getAllRecordsUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            },
            {
              "name": "cursor",
              "in": "query",
              "description": "cursor",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "limit",
              "schema": {
                "type": "integer",
                "format": "int32"
              }
            },
            {
              "name": "kind",
              "in": "query",
              "description": "kind",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/DatastoreQueryResult"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "cursor": "des",
                        "results": [
                          [
                            ""
                          ]
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_storage_kinds",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/query/records?kind={string}&cursor={string}&limit={integer} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/query/records?kind={string}&cursor={string}&limit={integer}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        },
        "post": {
          "tags": [
            "Storage"
          ],
          "summary": "Get Records",
          "operationId": "getRecordsUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            }
          ],
          "requestBody": {
            "description": "ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiRecordIds"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/MultiRecordInfo"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "invalidRecords": [
                          "[opendes:doc:6d29c781d5484e1dbc34d392f58cd055,opendes:doc:6d29c781d5484e1dbc34d392f58cd034,opendes:doc:6d29c781d5484e1dbc34d392f58cd067,opendes:doc:6d29c781d5484e1dbc34d392f58cd078]"
                        ],
                        "records": [
                          {
                            "data": {
                              "ResourceID": "srn:master-data/Well:2492:",
                              "ResourceTypeID": "srn:type:master-data/Well:",
                              "ResourceSecurityClassification": "srn:reference-data/ResourceSecurityClassification:PUBLIC:",
                              "Data": {
                                "IndividualTypeProperties": {
                                  "FacilityOperator": [
                                    {
                                      "FacilityOperatorOrganisationID": "srn:master-data/Organisation:nam:"
                                    }
                                  ],
                                  "DataSourceOrganisationID": "srn:master-data/Organisation:tno:",
                                  "SpatialLocation": [
                                    {
                                      "Coordinates": [
                                        {
                                          "x": 6.91700948,
                                          "y": 52.65622264
                                        }
                                      ],
                                      "SpatialGeometryTypeID": "srn:reference-data/SpatialGeometryType:point:",
                                      "VerticalCRSID": "srn:reference-data/VerticalCRS:nap:",
                                      "HorizontalCRSID": "srn:reference-data/HorizontalCRS:WGS84:",
                                      "HeightAboveGroundLevelUOMID": "srn:reference-data/UnitOfMeasure:m:"
                                    }
                                  ],
                                  "FacilityName": "SCH-586",
                                  "FacilityNameAlias": [
                                    {
                                      "AliasName": "SCH-586",
                                      "AliasNameTypeID": "srn:reference-data/AliasNameType:name:"
                                    },
                                    {
                                      "AliasName": "2492",
                                      "AliasNameTypeID": "srn:reference-data/AliasNameType:UWI:"
                                    }
                                  ],
                                  "FacilityState": [
                                    {
                                      "FacilityStateTypeID": "srn:reference-data/FacilityStateType:Abandoned:"
                                    }
                                  ],
                                  "FacilityEvent": [
                                    {
                                      "FacilityEventTypeID": "srn:reference-data/FacilityEventType:spud:",
                                      "EffectiveDateTime": "1984-09-16T00:00:00"
                                    },
                                    {
                                      "FacilityEventTypeID": "srn:reference-data/FacilityEventType:DRILLING FINISH:",
                                      "EffectiveDateTime": "1984-10-03T00:00:00"
                                    }
                                  ],
                                  "DefaultVerticalMeasurementID": "Rotary Table",
                                  "VerticalMeasurements": [
                                    {
                                      "VerticalMeasurementID": "Rotary Table",
                                      "VerticalMeasurementTypeID": "srn:reference-data/VerticalMeasurementType:Rotary Table:",
                                      "VerticalMeasurement": 20,
                                      "VerticalMeasurementPathID": "srn:reference-data/VerticalMeasurementPath:Elevation:",
                                      "VerticalMeasurementUnitOfMeasureID": "srn:reference-data/UnitOfMeasure:m:",
                                      "VerticalCRSID": "srn:reference-data/VerticalCRS:nap:"
                                    }
                                  ],
                                  "OperatingEnvironmentID": "srn:reference-data/WellOperatingEnvironment:on:",
                                  "CountryID": "srn:master-data/GeopoliticalEntity:Netherlands:",
                                  "StateProvinceID": "srn:master-data/GeopoliticalEntity:Drenthe:",
                                  "QuadrantID": "srn:master-data/GeopoliticalEntity:d:"
                                }
                              },
                              "meta": null,
                              "id": "opendes:doc:0f23276e96274461872adcb222f1ef1d",
                              "version": 1599141178852896,
                              "kind": "opendes:osdu-r2-core:test:1.0.0",
                              "acl": {
                                "viewers": [
                                  "data.default.viewers@opendes.ibm.com"
                                ],
                                "owners": [
                                  "data.default.owners@opendes.ibm.com"
                                ]
                              },
                              "legal": {
                                "legaltags": [
                                  "opendes-public-usa-dataset-1"
                                ],
                                "otherRelevantDataCountries": [
                                  "US"
                                ],
                                "status": "compliant"
                              },
                              "createUser": "osdu-dev@odi.ibm.com",
                              "createTime": "2020-09-03T13:53:00.719Z"
                            }
                          }
                        ],
                        "retryRecords": [
                          "[opendes:doc:6d29c781d5484e1dbc34d392f58cd055,opendes:doc:6d29c781d5484e1dbc34d392f58cd034,opendes:doc:6d29c781d5484e1dbc34d392f58cd067,opendes:doc:6d29c781d5484e1dbc34d392f58cd078]"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_query_records",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/query/records \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n-d '{\n\"attributes\": [\n\"string\"\n],\n\"records\": [\n\"string\"\n]\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n-d '{\n\"attributes\": [\n\"string\"\n],\n\"records\": [\n\"string\"\n]\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/query/records\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/query/records:batch": {
        "post": {
          "tags": [
            "Storage"
          ],
          "summary": "Fetch records",
          "operationId": "fetchRecordsUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            }
          ],
          "requestBody": {
            "description": "ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultiRecordRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/MultiRecordResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "conversionStatuses": [
                          {
                            "errors": [
                              "[value invalid,value not present]"
                            ],
                            "id": "AE12345",
                            "status": "Invalid"
                          }
                        ],
                        "notFound": [
                          "[opendes:doc:6d29c781d5484e1dbc34d392f58cd055,opendes:doc:6d29c781d5484e1dbc34d392f58cd034,opendes:doc:6d29c781d5484e1dbc34d392f58cd067,opendes:doc:6d29c781d5484e1dbc34d392f58cd078]"
                        ],
                        "records": [
                          {
                            "data": {
                              "ResourceID": "srn:master-data/Well:2492:",
                              "ResourceTypeID": "srn:type:master-data/Well:",
                              "ResourceSecurityClassification": "srn:reference-data/ResourceSecurityClassification:PUBLIC:",
                              "Data": {
                                "IndividualTypeProperties": {
                                  "FacilityOperator": [
                                    {
                                      "FacilityOperatorOrganisationID": "srn:master-data/Organisation:nam:"
                                    }
                                  ],
                                  "DataSourceOrganisationID": "srn:master-data/Organisation:tno:",
                                  "SpatialLocation": [
                                    {
                                      "Coordinates": [
                                        {
                                          "x": 6.91700948,
                                          "y": 52.65622264
                                        }
                                      ],
                                      "SpatialGeometryTypeID": "srn:reference-data/SpatialGeometryType:point:",
                                      "VerticalCRSID": "srn:reference-data/VerticalCRS:nap:",
                                      "HorizontalCRSID": "srn:reference-data/HorizontalCRS:WGS84:",
                                      "HeightAboveGroundLevelUOMID": "srn:reference-data/UnitOfMeasure:m:"
                                    }
                                  ],
                                  "FacilityName": "SCH-586",
                                  "FacilityNameAlias": [
                                    {
                                      "AliasName": "SCH-586",
                                      "AliasNameTypeID": "srn:reference-data/AliasNameType:name:"
                                    },
                                    {
                                      "AliasName": "2492",
                                      "AliasNameTypeID": "srn:reference-data/AliasNameType:UWI:"
                                    }
                                  ],
                                  "FacilityState": [
                                    {
                                      "FacilityStateTypeID": "srn:reference-data/FacilityStateType:Abandoned:"
                                    }
                                  ],
                                  "FacilityEvent": [
                                    {
                                      "FacilityEventTypeID": "srn:reference-data/FacilityEventType:spud:",
                                      "EffectiveDateTime": "1984-09-16T00:00:00"
                                    },
                                    {
                                      "FacilityEventTypeID": "srn:reference-data/FacilityEventType:DRILLING FINISH:",
                                      "EffectiveDateTime": "1984-10-03T00:00:00"
                                    }
                                  ],
                                  "DefaultVerticalMeasurementID": "Rotary Table",
                                  "VerticalMeasurements": [
                                    {
                                      "VerticalMeasurementID": "Rotary Table",
                                      "VerticalMeasurementTypeID": "srn:reference-data/VerticalMeasurementType:Rotary Table:",
                                      "VerticalMeasurement": 20,
                                      "VerticalMeasurementPathID": "srn:reference-data/VerticalMeasurementPath:Elevation:",
                                      "VerticalMeasurementUnitOfMeasureID": "srn:reference-data/UnitOfMeasure:m:",
                                      "VerticalCRSID": "srn:reference-data/VerticalCRS:nap:"
                                    }
                                  ],
                                  "OperatingEnvironmentID": "srn:reference-data/WellOperatingEnvironment:on:",
                                  "CountryID": "srn:master-data/GeopoliticalEntity:Netherlands:",
                                  "StateProvinceID": "srn:master-data/GeopoliticalEntity:Drenthe:",
                                  "QuadrantID": "srn:master-data/GeopoliticalEntity:d:"
                                }
                              },
                              "meta": null,
                              "id": "opendes:doc:0f23276e96274461872adcb222f1ef1d",
                              "version": 1599141178852896,
                              "kind": "opendes:osdu-r2-core:test:1.0.0",
                              "acl": {
                                "viewers": [
                                  "data.default.viewers@opendes.ibm.com"
                                ],
                                "owners": [
                                  "data.default.owners@opendes.ibm.com"
                                ]
                              },
                              "legal": {
                                "legaltags": [
                                  "opendes-public-usa-dataset-1"
                                ],
                                "otherRelevantDataCountries": [
                                  "US"
                                ],
                                "status": "compliant"
                              },
                              "createUser": "osdu-dev@odi.ibm.com",
                              "createTime": "2020-09-03T13:53:00.719Z"
                            }
                          }
                        ],
                        "retryRecords": [
                          "[opendes:doc:6d29c781d5484e1dbc34d392f58cd056,opendes:doc:6d29c781d5484e1dbc34d392f58cd014,opendes:doc:6d29c781d5484e1dbc34d392f58cd097,opendes:doc:6d29c781d5484e1dbc34d392f58cd058]"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_query_records_batch",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/query/records:batch \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n-d '{\n\"records\": [\n\"string\"\n]\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n-d '{\n\"records\": [\n\"string\"\n]\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/query/records:batch\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/records": {
        "put": {
          "tags": [
            "Storage"
          ],
          "summary": "Create or update records",
          "operationId": "createOrUpdateRecordsUsingPUT",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            },
            {
              "name": "skipdupes",
              "in": "query",
              "description": "skipdupes",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "requestBody": {
            "description": "records",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Record"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "recordCount": 12,
                        "recordIds": [
                          "[opendes:doc:6d29c781d5484e1dbc34d392f58cd055,opendes:doc:6d29c781d5484e1dbc34d392f58cd034,opendes:doc:6d29c781d5484e1dbc34d392f58cd067,opendes:doc:6d29c781d5484e1dbc34d392f58cd078]"
                        ],
                        "skippedRecordIds": [
                          "[opendes:doc:6d29c781d5484e1dbc34d392f58cd058,opendes:doc:6d29c781d5484e1dbc34d392f58cd036,opendes:doc:6d29c781d5484e1dbc34d392f58cd017]"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "create_update_records",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X PUT \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/records \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-H \"frame-of-reference: {reference_id}\n-d '[\n{\n\"acl\": {\n\"owners\": [\n\"string\"\n],\n\"viewers\": [\n\"string\"\n]\n},\n\"ancestry\": {\n\"parents\": [\n\"string\"\n]\n},\n\"data\": {},\n\"id\": \"common:welldb:123456\",\n\"kind\": \"common:welldb:wellbore:1.0.0\",\n\"legal\": {\n\"legaltags\": [\n\"string\"\n],\n\"otherRelevantDataCountries\": [\n\"string\"\n],\n\"status\": \"compliant\"\n},\n\"meta\": [\n{\n\"additionalProp1\": {},\n\"additionalProp2\": {},\n\"additionalProp3\": {}\n}\n],\n\"version\": 0\n}\n]'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X PUT -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\\\n-d '[\n{\n\"acl\": {\n\"owners\": [\n\"string\"\n],\n\"viewers\": [\n \"string\"\n]\n},\n\"ancestry\": {\n\"parents\": [\n\"string\"\n]\n},\n\"data\": {},\n\"id\": \"common:welldb:123456\",\n\"kind\": \"common:welldb:wellbore:1.0.0\",\n\"legal\": {\n\"legaltags\": [\n\"string\"\n],\n\"otherRelevantDataCountries\": [\n\"string\"\n],\n\"status\": \"compliant\"\n},\n\"meta\": [\n{\n\"additionalProp1\": {},\n\"additionalProp2\": {},\n\"additionalProp3\": {}\n}\n],\n\"version\": 0\n}\n]'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/records\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        },
        "patch": {
          "tags": [
            "Storage"
          ],
          "summary": "Update records metadata",
          "operationId": "updateRecordsMetadataUsingPATCH",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            }
          ],
          "requestBody": {
            "description": "Record bulk update param",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordBulkUpdateParam"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/BulkUpdateRecordsResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "lockedRecordIds": [
                          "[A12345,X45678,Y45678]"
                        ],
                        "notFoundRecordIds": [
                          "[A12349,X45671,Y45673]"
                        ],
                        "recordCount": 121,
                        "recordIds": [
                          "[A12345,X45678,Y45678]"
                        ],
                        "unAuthorizedRecordIds": [
                          "[A12346,X45688,Y45768]"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "204": {
              "description": "No Content",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "204",
                        "message": "No Content"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "update_records_metadata",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X PATCH \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/query/records \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-H \"frame-of-reference: {reference_id}\"\n-d '{\n\"ops\": [\n{\n\"op\": \"replace\",\n\"path\": \"/acl/owners\",\n\"value\": [\n\"string\"\n]\n}\n],\n\"query\": {\n\"ids\": \"common:welldb:123456\"\n}\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X PATCH -H \"data-partition-id: {partition_id}\" -H \"frame-of-reference: {reference_id} \\\n-d '{\n\"ops\": [\n{\n\"op\": \"replace\",\n\"path\": \"/acl/owners\",\n\"value\": [\n\"string\"\n]\n}\n],\n\"query\": {\n\"ids\": \"common:welldb:123456\"\n}\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/query/records\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/records/versions/{id}": {
        "get": {
          "tags": [
            "Storage"
          ],
          "summary": "Get record versions",
          "operationId": "getRecordVersionsUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "id",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "recordId": "opendes:doc:6d29c781d5484e1dbc34d392f58cd067",
                        "versions": [
                          1
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_record_versions_id",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/records/versions/{id} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/records/versions/{id}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/records/{id}": {
        "get": {
          "tags": [
            "Storage"
          ],
          "summary": "Get latest record version",
          "operationId": "getLatestRecordVersionUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "attribute",
              "in": "query",
              "description": "attribute",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "string"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "200",
                        "message": "OK"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_latest_record_on_id",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/records/{id} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/records/{id}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        },
        "delete": {
          "tags": [
            "Storage"
          ],
          "summary": "Purge record",
          "operationId": "purgeRecordUsingDELETE",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "200",
                        "message": "OK"
                      }
                    }
                  }
                }
              }
            },
            "204": {
              "description": "No Content",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "204",
                        "message": "No Content"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "purge_record_with_id",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X DELETE \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/records/{id} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X DELETE -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/records/{id}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/records/{id}/{version}": {
        "get": {
          "tags": [
            "Storage"
          ],
          "summary": "Get specific record version",
          "operationId": "getSpecificRecordVersionUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "version",
              "in": "path",
              "description": "version",
              "required": true,
              "schema": {
                "type": "integer",
                "format": "int64"
              }
            },
            {
              "name": "attribute",
              "in": "query",
              "description": "attribute",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "string"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "200",
                        "message": "Success",
                        "*/*": "string"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_specific_record_version_on_id",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/records/{id}/{version} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/records/{id}/{version}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/records/{id}:delete": {
        "post": {
          "tags": [
            "Storage"
          ],
          "summary": "Delete record",
          "operationId": "deleteRecordUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "200",
                        "message": "OK"
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "delete_record_with_id",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/records/{id}:delete \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n-H \"frame-of-reference: {reference_id}\"\n-d '{\n\"records\": [\n\"string\"\n]\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\" -H \"frame-of-reference: {reference_id} \\\n-d '{\n\"records\": [\n\"string\"\n]\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/records/{id}:delete\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/schemas": {
        "post": {
          "tags": [
            "Storage"
          ],
          "summary": "Create schemas",
          "operationId": "strg-createSchemaUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            }
          ],
          "requestBody": {
            "description": "schema",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "200",
                        "message": "OK"
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "create_schemas",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/schemas \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n-d '{\n\"ext\": {},\n\"kind\": \"common:welldb:wellbore:1.0.0\",\n\"schema\": [\n{\n\"ext\": {},\n\"kind\": \"string\",\n\"path\": \"string\"\n}\n]\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n-d '{\n\"ext\": {},\n\"kind\": \"common:welldb:wellbore:1.0.0\",\n\"schema\": [\n{\n\"ext\": {},\n\"kind\": \"string\",\n\"path\": \"string\"\n}\n]\n}'\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/schemas\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/schemas/{kind}": {
        "get": {
          "tags": [
            "Storage"
          ],
          "summary": "Get schema for kind of resource",
          "operationId": "strg-getSchemaUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            },
            {
              "name": "kind",
              "in": "path",
              "description": "kind",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/Schema"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "ext": "csv",
                        "kind": "common:welldb:wellbore:1.0.0",
                        "schema": [
                          {
                            "ext": "csv",
                            "kind": "core:dl:geopoint",
                            "path": "location"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "create_schemas_for_kind",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/schemas/{kind} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/schemas/{kind}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        },
        "delete": {
          "tags": [
            "Storage"
          ],
          "summary": "Delete schema for kind of resource",
          "operationId": "deleteSchemaUsingDELETE",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "reference",
              "required": true,
              "schema": {
                "type": "string",
                "default": "none"
              }
            },
            {
              "name": "kind",
              "in": "path",
              "description": "kind",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "200",
                        "message": "OK"
                      }
                    }
                  }
                }
              }
            },
            "204": {
              "description": "No Content",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "200",
                        "message": "No Content"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "delete_schemas_for_kind",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X DELETE \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-storage/api/storage/v2/schemas/{kind} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-H \"frame-of-reference: {reference_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X DELETE -H \"data-partition-id: {partition_id}\"  -H \"frame-of-reference: {reference_id}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-storage/api/storage/v2/schemas/{kind}\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/schema": {
        "post": {
          "tags": [
            "Schema"
          ],
          "summary": "Create schema",
          "description": "Adds a schema to the schema repository.",
          "operationId": "createSchema",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "example": "osdu",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema-Request"
                },
                "example": {
                  "schema-Info": {
                    "schemaIdentity": {
                      "authority": "osdu",
                      "source": "wks",
                      "entityType": "wellbore",
                      "schemaVersionMajor": 1,
                      "schemaVersionMinor": 0,
                      "schemaVersionPatch": 0
                    },
                    "status": "PUBLISHED"
                  },
                  "schema": {}
                }
              }
            },
            "description": "Schema description and schema to add",
            "required": true
          },
          "responses": {
            "201": {
              "description": "Schema created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Schema-Info"
                  },
                  "example": {
                    "createdBy": "user@opendes.com",
                    "dateCreated": {},
                    "schemaIdentity": {
                      "authority": "osdu",
                      "entityType": "wellbore",
                      "id": "osdu:wks:wellbore:1.0.0",
                      "schemaVersionMajor": 1,
                      "schemaVersionMinor": 1,
                      "schemaVersionPatch": 0,
                      "source": "wks"
                    },
                    "scope": "INTERNAL",
                    "status": "PUBLISHED",
                    "supersededBy": {
                      "authority": "osdu",
                      "entityType": "wellbore",
                      "id": "osdu:wks:wellbore:1.0.0",
                      "schemaVersionMajor": 1,
                      "schemaVersionMinor": 1,
                      "schemaVersionPatch": 0,
                      "source": "wks"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Input error. Mandatory fields missing or invalid value passed to API",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            },
            "401": {
              "description": "Unknown or invalid user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            },
            "403": {
              "description": "User not authorised to access the API",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "create_schema",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-schema/api/schema/v1/schema \\\n-H 'content-type: application/json' \\\n-H 'data-partition-id: {partition_id}' \\\n-d '{\n        \"schema-Info\": {\n        \"schemaIdentity\": {\n        \"authority\": \"osdu\",\n        \"source\": \"wks\",\n        \"entityType\": \"wellbore\",\n        \"schemaVersionMajor\": 1,\n        \"schemaVersionMinor\": 0,\n        \"schemaVersionPatch\": 0\n        },\n        \"status\": \"PUBLISHED\"\n        },\n        \"schema\": {}\n        }'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST https://{HOSTNAME}:{PORT_NUMBER}/osdu-schema/api/schema/v1/schema\n-H 'content-type: application/json'\n-H 'data-partition-id: {partition_id}'\n-d '{\n\"schema-Info\": {\n\"schemaIdentity\": {\n\"authority\": \"osdu\",\n\"source\": \"wks\",\n\"entityType\": \"wellbore\",\n\"schemaVersionMajor\": 1,\n\"schemaVersionMinor\": 0,\n\"schemaVersionPatch\": 0\n},\n\"status\": \"PUBLISHED\"\n},\n\"schema\": {}\n}'\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "put": {
          "tags": [
            "Schema"
          ],
          "summary": "Update schema",
          "description": "Update or create a schema in development status.",
          "operationId": "updateSchema",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "example": "osdu",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema-Request"
                },
                "example": {
                  "schema-Info": {
                    "schemaIdentity": {
                      "authority": "osdu",
                      "source": "wks",
                      "entityType": "wellbore",
                      "schemaVersionMajor": 1,
                      "schemaVersionMinor": 0,
                      "schemaVersionPatch": 0
                    },
                    "status": "PUBLISHED"
                  },
                  "schema": {}
                }
              }
            },
            "description": "Schema description and schema to update or add",
            "required": true
          },
          "responses": {
            "200": {
              "description": "Schema updated",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Schema-Info"
                  },
                  "example": {
                    "createdBy": "user@opendes.com",
                    "dateCreated": {},
                    "schemaIdentity": {
                      "authority": "osdu",
                      "entityType": "wellbore",
                      "id": "osdu:wks:wellbore:1.0.0",
                      "schemaVersionMajor": 1,
                      "schemaVersionMinor": 1,
                      "schemaVersionPatch": 0,
                      "source": "wks"
                    },
                    "scope": "INTERNAL",
                    "status": "PUBLISHED",
                    "supersededBy": {
                      "authority": "osdu",
                      "entityType": "wellbore",
                      "id": "osdu:wks:wellbore:1.0.0",
                      "schemaVersionMajor": 1,
                      "schemaVersionMinor": 1,
                      "schemaVersionPatch": 0,
                      "source": "wks"
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Schema created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Schema-Info"
                  },
                  "example": {
                    "createdBy": "user@opendes.com",
                    "dateCreated": {},
                    "schemaIdentity": {
                      "authority": "osdu",
                      "entityType": "wellbore",
                      "id": "osdu:wks:wellbore:1.0.0",
                      "schemaVersionMajor": 1,
                      "schemaVersionMinor": 1,
                      "schemaVersionPatch": 0,
                      "source": "wks"
                    },
                    "scope": "INTERNAL",
                    "status": "PUBLISHED",
                    "supersededBy": {
                      "authority": "osdu",
                      "entityType": "wellbore",
                      "id": "osdu:wks:wellbore:1.0.0",
                      "schemaVersionMajor": 1,
                      "schemaVersionMinor": 1,
                      "schemaVersionPatch": 0,
                      "source": "wks"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Input error. Mandatory fields missing or invalid value passed to API",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            },
            "401": {
              "description": "Unknown or invalid user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            },
            "403": {
              "description": "User not authorised to access the API",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "update_schema",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X PUT https://{HOSTNAME}:{PORT_NUMBER}/osdu-schema/api/schema-service/v1/api/schema-service/v1/schema \\\n-H 'Content-Type: application/json' \\\n-H 'data-partition-id: opendes' \\\n-d '{\n  \"schemaInfo\": {\n    \"schemaIdentity\": {\n      \"authority\": \"SchemaSanityTest\",\n      \"source\": \"testSource\",\n      \"entityType\": \"testEntity_279688\",\n      \"schemaVersionMajor\": 2,\n      \"schemaVersionMinor\": 2,\n      \"schemaVersionPatch\": 0,\n      \"id\": \"SchemaSanityTest:testSource:testEntity_279688:1.1.0\"\n    },\n    \"status\": \"DEVELOPMENT\"\n  },\n  \"schema\": {\n   \"$schema\":\"http://json-schema.org/draft-07/schema#\",\n   \"x-slb-lifecycle-state\":\"published\",\n   \"description\":\"Theentitywell.\",\n   \"title\":\"Well\",\n   \"type\":\"object\",\n   \"definitions\":{\n\n   },\n   \"properties\":{\n      \"locationOriginalCRS\":{\n         \"description\":\"Thewell'\\''soriginallocationasAnyCrsFeatureCollection-astructuresimilartobutdistinctfromGeoJSON.\",\n         \"title\":\"OriginalCRSLocation\",\n         \"$ref\":\"#/definition/anyCrsFeatureCollection.1.0\"\n      },\n      \"allOf\":{\n         \"$ref\":\"#/definition/slb..wks..well.1.0\"\n      },\n      \"locationWGS84\":{\n         \"description\":\"Thewell'\\''slocationasGeoJSONFeatureCollection.\",\n         \"title\":\"WGS84Location\",\n         \"$ref\":\"https://geojson.org/schema/FeatureCollection.json\",\n         \"example\":{\n            \"features\":[\n               {\n                  \"geometry\":{\n                     \"coordinates\":[\n                        -92.11569999999999,\n                        29.8823,\n                        153.4779442519685\n                     ],\n                     \"type\":\"Point\"\n                  },\n                  \"type\":\"Feature\",\n                  \"properties\":{\n                     \"name\":\"Newton2-31\"\n                  }\n               }\n            ],\n            \"type\":\"FeatureCollection\"\n         }\n      }\n   }\n}\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X PUT https://{HOSTNAME}:{PORT_NUMBER}/osdu-schema/api/schema-service/v1/api/schema-service/v1/schema \\\n-H 'Content-Type: application/json' \\\n-H 'data-partition-id: opendes' \\\n-d '{\n\"schemaInfo\": {\n\"schemaIdentity\": {\n\"authority\": \"SchemaSanityTest\",\n\"source\": \"testSource\",\n\"entityType\": \"testEntity_279688\",\n\"schemaVersionMajor\": 2,\n\"schemaVersionMinor\": 2,\n\"schemaVersionPatch\": 0,\n\"id\": \"SchemaSanityTest:testSource:testEntity_279688:1.1.0\"\n},\n\"status\": \"DEVELOPMENT\"\n},\n\"schema\": {\n\"$schema\":\"http://json-schema.org/draft-07/schema#\",\n\"x-slb-lifecycle-state\":\"published\",\n\"description\":\"Theentitywell.\",\n\"title\":\"Well\",\n\"type\":\"object\",\n\"definitions\":{\n\n},\n\"properties\":{\n\"locationOriginalCRS\":{\n\"description\":\"Thewell'\\''soriginallocationasAnyCrsFeatureCollection -astructuresimilartobutdistinctfromGeoJSON.\",\n\"title\":\"OriginalCRSLocation\",\n\"$ref\":\"#/definition/anyCrsFeatureCollection.1.0\"\n},\n\"allOf\":{\n \"$ref\":\"#/definition/slb..wks..well.1.0\"\n},\n\"locationWGS84\":{\n \"description\":\"Thewell'\\''slocationasGeoJSONFeatureCollection.\",\n \"title\":\"WGS84Location\",\n \"$ref\":\"https://geojson.org/schema/FeatureCollection.json\",\n \"example\":{\n  \"features\":[\n     {\n        \"geometry\":{\n           \"coordinates\":[\n              -92.11569999999999,\n              29.8823,\n              153.4779442519685\n           ],\n           \"type\":\"Point\"\n        },\n        \"type\":\"Feature\",\n        \"properties\":{\n           \"name\":\"Newton2-31\"\n        }\n     }\n  ],\n  \"type\":\"FeatureCollection\"\n      }\n    }\n  }\n}\n}'\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "get": {
          "tags": [
            "Schema"
          ],
          "summary": "Get all schemas",
          "description": "Get all schemas from the repository.",
          "operationId": "searchSchemaInfoRepository",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "example": "osdu",
              "schema": {
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "authority",
              "description": "Pass an optional string to search for a specific authority",
              "required": false,
              "schema": {
                "type": "string",
                "default": "*",
                "example": "osdu"
              }
            },
            {
              "in": "query",
              "name": "source",
              "description": "Pass an optional string to search for a specific source",
              "required": false,
              "schema": {
                "type": "string",
                "default": "*",
                "example": "wks"
              }
            },
            {
              "in": "query",
              "name": "entityType",
              "description": "Pass an optional string to search for a specific entityType",
              "required": false,
              "schema": {
                "type": "string",
                "default": "*",
                "example": "wellbore"
              }
            },
            {
              "in": "query",
              "name": "schemaVersionMajor",
              "description": "Pass an optional string to search for a specific schemaVersionMajor",
              "required": false,
              "schema": {
                "type": "string",
                "default": "*",
                "example": 1
              }
            },
            {
              "in": "query",
              "name": "schemaVersionMinor",
              "description": "Pass an optional string to search for a specific schemaVersionMinor",
              "required": false,
              "schema": {
                "type": "string",
                "default": "*",
                "example": 1
              }
            },
            {
              "in": "query",
              "name": "status",
              "description": "The schema status specification",
              "schema": {
                "type": "string",
                "title": "Schema Status",
                "default": "PUBLISHED",
                "enum": [
                  "PUBLISHED",
                  "DEVELOPMENT",
                  "OBSOLETE"
                ],
                "example": "PUBLISHED"
              }
            },
            {
              "in": "query",
              "name": "scope",
              "description": "The scope or schema visibility specification",
              "schema": {
                "type": "string",
                "title": "Scope",
                "default": "INTERNAL",
                "enum": [
                  "SHARED",
                  "INTERNAL"
                ],
                "example": "INTERNAL"
              }
            },
            {
              "in": "query",
              "name": "latestVersion",
              "description": "If true, only return the latest version",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false,
                "example": true
              }
            },
            {
              "in": "query",
              "name": "limit",
              "description": "Maximum number of schema records to return",
              "schema": {
                "type": "integer",
                "minimum": 0,
                "maximum": 100,
                "example": 10
              }
            },
            {
              "in": "query",
              "name": "offset",
              "description": "Number of records to skip for pagination",
              "schema": {
                "type": "integer",
                "minimum": 0,
                "example": 0
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Successful response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SchemaInfo-Response"
                  },
                  "example": {
                    "schemaInfos": [
                      {
                        "createdBy": "user@opendes.com",
                        "dateCreated": {},
                        "schemaIdentity": {
                          "authority": "osdu",
                          "entityType": "wellbore",
                          "id": "osdu:wks:wellbore:1.0.0",
                          "schemaVersionMajor": 1,
                          "schemaVersionMinor": 1,
                          "schemaVersionPatch": 0,
                          "source": "wks"
                        },
                        "scope": "INTERNAL",
                        "status": "PUBLISHED",
                        "supersededBy": {
                          "authority": "osdu",
                          "entityType": "wellbore",
                          "id": "osdu:wks:wellbore:1.0.0",
                          "schemaVersionMajor": 1,
                          "schemaVersionMinor": 1,
                          "schemaVersionPatch": 0,
                          "source": "wks"
                        }
                      }
                    ],
                    "offset": 0,
                    "count": 0,
                    "totalCount": 0
                  }
                }
              }
            },
            "400": {
              "description": "Input error. Mandatory fields missing or invalid value passed to API",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            },
            "401": {
              "description": "Unknown or invalid user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            },
            "403": {
              "description": "User not authorised to access the API",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_schema",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET 'https://{HOSTNAME}:{PORT_NUMBER}/osdu-schema/api/schema-service/v1/api/schema-service/v1/schema?authority=SchemaSanityTest&source=testSource&schemaVersionMajor=1&schemaVersionMinor=1' \\\n-H 'Content-Type: application/json' \\\n-H 'data-partition-id: opendes'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": "curl -k -X GET 'https://{HOSTNAME}:{PORT_NUMBER}/osdu-schema/api/schema-service/v1/api/schema-service/v1/schema?authority=SchemaSanityTest&source=testSource&schemaVersionMajor=1&schemaVersionMinor=1' \\\n-H 'Content-Type: application/json' \\\n-H 'data-partition-id: opendes'\n"
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/schema/{id}": {
        "get": {
          "tags": [
            "Schema"
          ],
          "summary": "Get specific schema",
          "description": "Get a schema from the schema repository by providing an identifier.",
          "operationId": "getSchema",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "example": "osdu",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "The system ID of the schema",
              "required": true,
              "example": "osdu:wks:wellbore:1.0.0",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "search results matching criteria",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  },
                  "example": {
                    "$schema": "http://json-schema.org/draft-07/schema#",
                    "description": "The entity shapefile.",
                    "title": "ShapeFile",
                    "type": "object",
                    "definitions": {},
                    "properties": {}
                  }
                }
              }
            },
            "400": {
              "description": "Input error. Mandatory fields missing or invalid value passed to API",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            },
            "401": {
              "description": "Unknown or invalid user",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            },
            "403": {
              "description": "User not authorised to access the API",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            },
            "404": {
              "description": "Requested Schema not found in repository",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/ErrorResponseFormat"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "get_schema",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET 'https://{HOSTNAME}:{PORT_NUMBER}/osdu-schema/api/schema-service/v1/api/schema-service/v1/schema/SchemaSanityTest:testSource:testEntity_279688:1.1.0' \\\n-H 'Content-Type: application/json' \\\n-H 'data-partition-id: opendes'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET 'https://{HOSTNAME}:{PORT_NUMBER}/osdu-schema/api/schema-service/v1/api/schema-service/v1/schema/SchemaSanityTest:testSource:testEntity_279688:1.1.0' \\\n-H 'Content-Type: application/json' \\\n-H 'data-partition-id: opendes'\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/delivery/GetFileSignedUrl": {
        "post": {
          "tags": [
            "File"
          ],
          "summary": "Get a signed URL for a file",
          "operationId": "getFileSignedURL",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "Frame for unit measurement",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request to get signed URL",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UrlSigningRequest"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UrlSigningResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "processed": {
                          "additionalProp1": {
                            "connectionString": "srn:file/segy:mysegy1",
                            "kind": "common:welldb:wellbore:1.0.0",
                            "signedUrl": "signed-url",
                            "unsignedUrl": "unsigned-url"
                          }
                        },
                        "unprocessed": [
                          "[srn:file/segy:mysegy2,srn:file/segy:mysegy3]"
                        ]
                      }
                    }
                  }
                }
              }
            },
            "201": {
              "description": "Created"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "Request to get signed URL",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-file/api/file/v2/delivery/GetFileSignedUrl \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n\"srns\": [\n  \"string\",\n]\n}'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST -H \"data-partition-id: {partition_id}\" \\\n",
                        "-d \"{\\\"srns\\\":\\\"string\\\"}\" \\\n",
                        "\"https://{cpd_cluster_host}{:port}/osdu-file/api/file/v2/delivery/GetFileSignedUrl\""
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/files/metadata": {
        "post": {
          "tags": [
            "File"
          ],
          "summary": "Create metadata for a file",
          "operationId": "postFilesMetadataUsingPOST",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "Frame for unit measurement",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Metadata of file",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileMetadata"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/FileMetadataResponse"
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "Create Meta Data For File",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-file/api/file/v2/files/metadata \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n    \"data\": {\n    \"Endian\": \"BIG\",\n    \"Description\": \"As originally delivered by ACME.com.\",\n    \"DatasetProperties\": {\n    \"FileSourceInfo\": {\n\n    \"FileSource\": \"\",\n    \"Name\": \"1234\",\n    \"PreLoadFilePath\": \"gs://osdu-cicd-epam-persistent-area/c3af38c1-654d-47a0-a3e6-9e94c32add84/b62b104f843142f49ee6d747e6bdd49d\",\n    \"PreloadFileCreateUser\": \"user1\",\n    \"PreloadFileModifyDate\": \"mar 11\",\n    \"PreloadFileModifyUser\": \"mar 11\"\n     }\n    },\n    \"TotalSize\": \"13245217273\",\n    \"Source\": \"Example Data Source\",\n    \"Name\": \"Dataset X221/15\"\n    },\n    \"kind\": \"osdu:wks:dataset--File.Generic:1.0.0\",\n    \"acl\": {\n    \"viewers\": [\n      \"data.default.viewers@opendes.osdu-gcp.go3-nrg.projects.epam.com\"\n    ],\n    \"owners\": [\n    \"data.default.owners@opendes.osdu-gcp.go3-nrg.projects.epam.com\"\n     ]\n    },\n    \"legal\": {\n    \"legaltags\": [\n    \"opendes-demo-legaltag\"\n    ],\n    \"otherRelevantDataCountries\": [\n    \"US\"\n    ],\n    \"status\": \"compliant\"\n    },\n    \"createUser\": \"osdu-community-sa-airflow@nice-etching-277309.iam.gserviceaccount.com\",\n    \"createTime\": \"2021-02-22T18:50:47.498Z\",\n    \"modifyUser\": \"osdu-community-sa-airflow@nice-etching-277309.iam.gserviceaccount.com\",\n    \"modifyTime\": \"2021-02-22T21:13:10.587Z\"\n    }'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-file/api/file/v2/files/metadata \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n\"data\": {\n\"Endian\": \"BIG\",\n\"Description\": \"As originally delivered by ACME.com.\",\n\"DatasetProperties\": {\n\"FileSourceInfo\": {\n\"FileSource\": \"\",\n\"Name\": \"1234\",\n\"PreLoadFilePath\": \"gs://osdu-cicd-epam-persistent-area/c3af38c1-654d-47a0-a3e6-9e94c32add84/b62b104f843142f49ee6d747e6bdd49d\",\n\"PreloadFileCreateUser\": \"user1\",\n\"PreloadFileModifyDate\": \"mar 11\",\n\"PreloadFileModifyUser\": \"mar 11\"\n}\n},\n\"TotalSize\": \"13245217273\",\n\"Source\": \"Example Data Source\",\n\"Name\": \"Dataset X221/15\"\n},\n\"kind\": \"osdu:wks:dataset--File.Generic:1.0.0\",\n\"acl\": {\n\"viewers\": [\n\"data.default.viewers@opendes.osdu-gcp.go3-nrg.projects.epam.com\"\n],\n\"owners\": [\n\"data.default.owners@opendes.osdu-gcp.go3-nrg.projects.epam.com\"\n]\n},\n\"legal\": {\n\"legaltags\": [\n\"opendes-demo-legaltag\"\n],\n\"otherRelevantDataCountries\": [\n\"US\"\n],\n\"status\": \"compliant\"\n},\n\"createUser\": \"osdu-community-sa-airflow@nice-etching-277309.iam.gserviceaccount.com\",\n\"createTime\": \"2021-02-22T18:50:47.498Z\",\n\"modifyUser\": \"osdu-community-sa-airflow@nice-etching-277309.iam.gserviceaccount.com\",\n\"modifyTime\": \"2021-02-22T21:13:10.587Z\"\n}'\n"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/files/uploadURL": {
        "get": {
          "tags": [
            "File"
          ],
          "summary": "Get location information for a file",
          "operationId": "getLocationFileUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "Frame for unit measurement",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LocationResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "Get Upload URL For File Upload",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-file/api/file/v2/files/uploadURL \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-file/api/file/v2/files/uploadURL \\\n-H \"data-partition-id: {partition_id}\"\n"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/files/{id}/downloadURL": {
        "get": {
          "tags": [
            "File"
          ],
          "summary": "Get a signed URL for a specific file",
          "operationId": "downloadURLUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "Frame for unit measurement",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for file to download",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DownloadUrlResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "Download URL For File",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-file/api/file/v2/files/{{record_id}}/downloadURL' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-file/api/file/v2/files/{{record_id}}/downloadURL' \\\n-H \"data-partition-id: {partition_id}\"\n"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/files/{id}/metadata": {
        "get": {
          "tags": [
            "File"
          ],
          "summary": "Get metadata for a specific file",
          "operationId": "getFileMetadataByIdUsingGET",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "frame-of-reference",
              "in": "header",
              "description": "Frame for unit measurement",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "id",
              "in": "path",
              "description": "Identifier for file to get metadata from",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersion"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "Get Meta Data For Specific File",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-file/api/file/v2/files/{{record_id}}/metadata \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-file/api/file/v2/files/{{record_id}}/metadata \\\n-H \"data-partition-id: {partition_id}\"\n"
                      ]
                    }
                  ]
                }
              ]
            }
          },
          "x-sdk-exclude": false
        }
      },
      "/workflow": {
        "get": {
          "tags": [
            "Workflow"
          ],
          "summary": "Get all workflows for a tenant",
          "operationId": "getAllWorkflowsForTenantUsingGET",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "description": "The file type or format of the request body",
              "required": true,
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            },
            {
              "name": "prefix",
              "in": "query",
              "description": "Text to search workflow by name",
              "required": false,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkflowMetadata"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "deprecated": false,
          "x-codegen-request-body-name": "Get Workflows",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "post": {
          "tags": [
            "Workflow"
          ],
          "summary": "Create a workflow",
          "operationId": "createUsingPOST",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "description": "The file type or format of the request body",
              "required": true,
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWorkflowRequest"
                }
              }
            },
            "description": "request",
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowMetadata"
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "deprecated": false,
          "x-codegen-request-body-name": "Create Workflow",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n    \"description\": \"This is csv parser workflow\",\n    \"registrationInstructions\": {},\n    \"workflowName\": \"{{workflow_name}}\"\n    }'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n    \"description\": \"This is csv parser workflow\",\n    \"registrationInstructions\": {},\n    \"workflowName\": \"{{workflow_name}}\"\n    }'\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/workflow/{workflow_name}": {
        "get": {
          "tags": [
            "Workflow"
          ],
          "summary": "Get a specific workflow based on its name",
          "operationId": "getWorkflowByNameUsingGET",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "description": "The file type or format of the request body",
              "required": true,
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            },
            {
              "name": "workflow_name",
              "in": "path",
              "description": "Workflow name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowMetadata"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "deprecated": false,
          "x-codegen-request-body-name": "Get Specific Workflow",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "delete": {
          "tags": [
            "Workflow"
          ],
          "summary": "Delete a specific workflow based on its name",
          "operationId": "deleteWorkflowByIdUsingDELETE",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "description": "The file type or format of the request body",
              "required": true,
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            },
            {
              "name": "workflow_name",
              "in": "path",
              "description": "Workflow name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "204": {
              "description": "No Content"
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "deprecated": false,
          "x-codegen-request-body-name": "Delete a specific workflow",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X DELETE \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X DELETE \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/workflow/{workflow_name}/workflowRun": {
        "get": {
          "tags": [
            "Workflow"
          ],
          "summary": "Get all instances that were run for a given workflow",
          "operationId": "getAllRunInstancesUsingGET",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "description": "The file type or format of the request body",
              "required": true,
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            },
            {
              "name": "params",
              "in": "query",
              "description": "Set of parameters that filter instances",
              "required": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            {
              "name": "workflow_name",
              "in": "path",
              "description": "Workflow name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/WorkflowRun"
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "deprecated": false,
          "x-codegen-request-body-name": "Get All Instance",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}}/workflowRun \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}}/workflowRun \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "post": {
          "tags": [
            "Workflow"
          ],
          "summary": "Trigger a workflow based on its name",
          "operationId": "triggerWorkflowUsingPOST",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "description": "The file type or format of the request body",
              "required": true,
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            },
            {
              "name": "workflow_name",
              "in": "path",
              "description": "Workflow name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerWorkflowRequest"
                }
              }
            },
            "description": "Request body structure",
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowRunResponse"
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "deprecated": false,
          "x-codegen-request-body-name": "Trigger Workflow",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}}/workflowRun \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n    \"executionContext\": {\"data-partition-id\": \"opendes\"},\n    \"runId\": \"{{runid}}\"\n    }'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}}/workflowRun \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n\"executionContext\": {\"data-partition-id\": \"opendes\"},\n\"runId\": \"{{runid}}\"\n}'\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/workflow/{workflow_name}/workflowRun/{runId}": {
        "get": {
          "tags": [
            "Workflow"
          ],
          "summary": "Get workflow that was run based on the run ID",
          "operationId": "getWorkflowRunByIdUsingGET",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "description": "The file type or format of the request body",
              "required": true,
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            },
            {
              "name": "runId",
              "in": "path",
              "description": "Run ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workflow_name",
              "in": "path",
              "description": "Workflow name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowRunResponse"
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "deprecated": false,
          "x-codegen-request-body-name": "Get Workflow By RunID",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}}/workflowRun/{{runid}} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}}/workflowRun/{{runid}} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\"\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        },
        "put": {
          "tags": [
            "Workflow"
          ],
          "summary": "Update the workflow for a specific run",
          "operationId": "updateWorkflowRunUsingPUT",
          "parameters": [
            {
              "name": "Content-Type",
              "in": "header",
              "description": "The file type or format of the request body",
              "required": true,
              "schema": {
                "type": "string",
                "default": "application/json"
              }
            },
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string",
                "default": "opendes"
              }
            },
            {
              "name": "runId",
              "in": "path",
              "description": "Run ID",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "workflow_name",
              "in": "path",
              "description": "Workflow name",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateWorkflowRunRequest"
                }
              }
            },
            "description": "Request body structure",
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "$ref": "#/components/schemas/WorkflowRunResponse"
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "deprecated": false,
          "x-codegen-request-body-name": "Update the workflow instance",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X PUT \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}}/workflowRun/{{runid}} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n    \"status\": \"submitted\"\n    }'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X PUT \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/workflow/v1/workflow/{{workflow_name}}/workflowRun/{{runid}} \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n    \"status\": \"submitted\"\n    }'\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/reindex": {
        "post": {
          "tags": [
            "Indexer"
          ],
          "summary": "Reindex searchable objects",
          "operationId": "reindexUsing",
          "parameters": [
            {
              "name": "data-partition-id",
              "in": "header",
              "description": "Tenant identifier",
              "required": false,
              "schema": {
                "type": "string",
                "default": "common"
              }
            },
            {
              "name": "X-API-Key",
              "in": "header",
              "description": "Authentication key for API access",
              "required": false,
              "schema": {
                "type": "string",
                "default": "this_123_is_456_dev_789_key"
              }
            },
            {
              "name": "force_clean",
              "in": "query",
              "description": "Flag to control indexing of partial or full records for particular kind.[ True : All records reindexed , False : Only delta records indexed]",
              "required": false,
              "schema": {
                "type": "boolean",
                "default": false
              }
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecordReindexRequest"
                }
              }
            },
            "description": "recordReindexRequest",
            "required": true
          },
          "responses": {
            "200": {
              "description": "OK",
              "content": {
                "*/*": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "201": {
              "description": "Created",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/successResponse"
                  },
                  "examples": {
                    "response": {
                      "value": {
                        "_messageCode_": "201",
                        "message": "Created"
                      }
                    }
                  }
                }
              }
            },
            "401": {
              "description": "Unauthorized",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "403": {
              "description": "Forbidden",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            },
            "404": {
              "description": "Not Found",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/errorResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "Reindex Data On Search Index",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/indexer/v2/reindex?force_clean=true \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n    \"kind\": \"opendes:osdu:well-master:0.2.1\"\n    }'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X POST \\\nhttps://{HOSTNAME}:{PORT_NUMBER}/osdu-workflow/api/indexer/v2/reindex?force_clean=true \\\n-H 'content-type: application/json' \\\n-H \"data-partition-id: {partition_id}\" \\\n-d '{\n    \"kind\": \"opendes:osdu:well-master:0.2.1\"\n    }'\n    \n    \n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/ddms/v2/about": {
        "get": {
          "tags": [
            "Wellbore DDMS | Know Service"
          ],
          "summary": "Know About Wellbore DDMS service",
          "operationId": "get_about_ddms_v2_about_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AboutResponse"
                  }
                }
              }
            }
          },
          "x-codegen-request-body-name": "Know the service",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET 'https://{HOSTNAME}:{PORT_NUMBER}/osdu-wellbore/api/os-wellbore-ddms/ddms/v2/about'\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET 'https://{HOSTNAME}:{PORT_NUMBER}/osdu-wellbore/api/os-wellbore-ddms/ddms/v2/about'\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/ddms/v2/version": {
        "get": {
          "tags": [
            "Wellbore DDMS | Know Service"
          ],
          "summary": "Get Wellbore DDMS service version",
          "operationId": "get_version_ddms_v2_version_get",
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/VersionDetailsResponse"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "Get Service Status",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET 'https://{HOSTNAME}:{PORT_NUMBER}/osdu-wellbore/api/os-wellbore-ddms/ddms/v2/version \\\n-H \"Authorization: Bearer {{token}}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET 'https://{HOSTNAME}:{PORT_NUMBER}/osdu-wellbore/api/os-wellbore-ddms/ddms/v2/version' \\\n-H 'Authorization: Bearer {{token}}'\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/ddms/v2/status": {
        "get": {
          "tags": [
            "Wellbore DDMS | Know Service"
          ],
          "summary": "Get the status of the Wellbore DDMS service",
          "operationId": "about_ddms_v2_status_get",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/V1AboutResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "Get Service Status",
          "x-code-samples": [
            {
              "lang": "Curl",
              "source": "curl -k -X GET 'https://{HOSTNAME}:{PORT_NUMBER}/osdu-wellbore/api/os-wellbore-ddms/ddms/v2/status' \\\n-H \"Authorization: Bearer {{token}}\"\n"
            }
          ],
          "x-sdk-operations": {
            "request-examples": {
              "curl": [
                {
                  "name": "Example request",
                  "example": [
                    {
                      "type": "code",
                      "source": [
                        "curl -k -X GET 'https://{HOSTNAME}:{PORT_NUMBER}/osdu-wellbore/api/os-wellbore-ddms/ddms/v2/status' \\\n-H 'Authorization: Bearer {{token}}'\n"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        }
      },
      "/ddms/v2/wells/{wellid}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Well"
          ],
          "summary": "Get the Well using wks:well:1.0.2 schema",
          "description": "Get the Well object using its **id**.  <p>If the well kind is\n        *wks:well:1.0.2* returns the record directly</p> <p>If the well\n        kind is different *wks:well:1.0.2* it will get the raw record and\n        convert the results to match the *wks:well:1.0.2*. If convertion is\n        not possible returns an error **500**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_well",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellid",
                "type": "string"
              },
              "name": "wellid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/well"
                  }
                }
              }
            },
            "404": {
              "description": "Well not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | Well"
          ],
          "summary": "Delete the well. The API performs a logical deletion of the given record",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "del_well",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellid",
                "type": "string"
              },
              "name": "wellid",
              "in": "path"
            },
            {
              "description": "Whether or not to delete records children",
              "required": false,
              "schema": {
                "title": "Recursive",
                "type": "boolean",
                "description": "Whether or not to delete records children",
                "default": false
              },
              "name": "recursive",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "204": {
              "description": "Record deleted successfully"
            },
            "404": {
              "description": "Well not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/wells/{wellid}/versions": {
        "get": {
          "tags": [
            "Wellbore DDMS | Well"
          ],
          "summary": "Get all versions of the Well",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_well_versions",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellid",
                "type": "string"
              },
              "name": "wellid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  }
                }
              }
            },
            "404": {
              "description": "Well not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/wells/{wellid}/versions/{version}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Well"
          ],
          "summary": "Get the given version of the Well using wks:well:1.0.2 schema",
          "description": "\"Get the Well object using its **id**.  <p>If the well kind is\n        *wks:well:1.0.2* returns the record directly</p> <p>If the well\n        kind is different *wks:well:1.0.2* it will get the raw record and\n        convert the results to match the *wks:well:1.0.2*. If convertion is\n        not possible returns an error **500**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_well_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellid",
                "type": "string"
              },
              "name": "wellid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/well"
                  }
                }
              }
            },
            "404": {
              "description": "Well not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/wells": {
        "post": {
          "tags": [
            "Wellbore DDMS | Well"
          ],
          "summary": "Create or update the Wells using wks:well:1.0.2 schema",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_well",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Wells",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/well"
                  },
                  "example": [
                    {
                      "acl": {
                        "viewers": [
                          "data.default.viewers@{{datapartitionid}}.{{domain}}.com"
                        ],
                        "owners": [
                          "data.default.owners@{{datapartitionid}}.{{domain}}.com"
                        ]
                      },
                      "data": {
                        "name": "myWell",
                        "uwi": "00-000-00000-00"
                      },
                      "id": "{{datapartitionid}}:well:myWell",
                      "kind": "{{datapartitionid}}:wks:well:1.0.2",
                      "legal": {
                        "legaltags": [
                          "{{legaltags}}"
                        ],
                        "otherRelevantDataCountries": [
                          "FR",
                          "US"
                        ],
                        "status": "compliant"
                      }
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Missing mandatory parameter or unknown parameter"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/wellbores/{wellboreid}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Wellbore v2"
          ],
          "summary": "Get the Wellbore using wks:wellbore:1.0.6 schema",
          "description": "Get the Wellbore object using its **id**.  <p>If the wellbore kind is\n        *wks:wellbore:1.0.6* returns the record directly</p> <p>If the wellbore\n        kind is different *wks:wellbore:1.0.6* it will get the raw record and\n        convert the results to match the *wks:wellbore:1.0.6*. If convertion is\n        not possible returns an error **500**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_wellbore",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/wellbore"
                  }
                }
              }
            },
            "404": {
              "description": "Wellbore not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | Wellbore v2"
          ],
          "summary": "Delete the wellbore. The API performs a logical deletion of the given record",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "del_wellbore",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreid",
              "in": "path"
            },
            {
              "description": "Whether or not to delete records children",
              "required": false,
              "schema": {
                "title": "Recursive",
                "type": "boolean",
                "description": "Whether or not to delete records children",
                "default": false
              },
              "name": "recursive",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "204": {
              "description": "Record deleted successfully"
            },
            "404": {
              "description": "Wellbore not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/wellbores/{wellboreid}/versions'": {
        "get": {
          "tags": [
            "Wellbore DDMS | Wellbore v2"
          ],
          "summary": "Get all versions of the Wellbore",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_wellbore_versions",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  }
                }
              }
            },
            "404": {
              "description": "Wellbore not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/wellbores/{wellboreid}/versions/{version}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Wellbore v2"
          ],
          "summary": "Get the given version of the Wellbore using wks:wellbore:1.0.6 schema",
          "description": "\"Get the Wellbore object using its **id**.  <p>If the wellbore kind is\n        *wks:wellbore:1.0.6* returns the record directly</p> <p>If the wellbore\n        kind is different *wks:wellbore:1.0.6* it will get the raw record and\n        convert the results to match the *wks:wellbore:1.0.6*. If convertion is\n        not possible returns an error **500**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_wellbore_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/wellbore"
                  }
                }
              }
            },
            "404": {
              "description": "Wellbore not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/wellbores": {
        "post": {
          "tags": [
            "Wellbore DDMS | Wellbore v2"
          ],
          "summary": "Create or update the Wellbores using wks:wellbore:1.0.6 schema",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_wellbore",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Wellbores",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/wellbore"
                  },
                  "example": [
                    {
                      "acl": {
                        "viewers": [
                          "data.default.viewers@{{datapartitionid}}.{{domain}}.com"
                        ],
                        "owners": [
                          "data.default.owners@{{datapartitionid}}.{{domain}}.com"
                        ]
                      },
                      "data": {
                        "name": "myWellbore",
                        "airGap": {
                          "unitKey": "ft",
                          "value": 35
                        },
                        "country": "United States of America",
                        "dateCreated": "2013-03-22T11:16:03.123Z",
                        "dateModified": "2013-03-22T11:16:03.123Z",
                        "locationWGS84": {
                          "features": [
                            {
                              "geometry": {
                                "coordinates": [
                                  [
                                    -103.2380248,
                                    46.8925081,
                                    5301
                                  ],
                                  [
                                    -103.2380248,
                                    46.8925081,
                                    2801
                                  ],
                                  [
                                    -103.2378748,
                                    46.892608100000004,
                                    301
                                  ],
                                  [
                                    -103.23742477750001,
                                    46.89270811,
                                    -2199
                                  ],
                                  [
                                    -103.23667470999663,
                                    46.892808120001,
                                    -4699
                                  ],
                                  [
                                    -103.2356245974865,
                                    46.892908130002,
                                    -7199
                                  ]
                                ],
                                "type": "LineString"
                              },
                              "properties": {
                                "name": "Newton 2-31-Lat-1"
                              },
                              "type": "Feature"
                            }
                          ],
                          "type": "FeatureCollection"
                        },
                        "propertyDictionary": {
                          "Country Name": "UNITED STATES",
                          "Date First Report": "11-12-1982",
                          "Date Last Activity": "06-03-2016",
                          "Field Name": "WILDCAT",
                          "Well Num": "34-14"
                        },
                        "relationships": {
                          "well": {
                            "confidence": 1,
                            "id": "{datapartitionid}:well:myWell",
                            "name": "myWell"
                          }
                        },
                        "uwi": "33-089-00300-00-01",
                        "wellHeadGeographic": {
                          "crsKey": "geographic",
                          "elevationFromMsl": {
                            "unitKey": "ft",
                            "value": 2650.5
                          },
                          "latitude": 46.89249512931594,
                          "longitude": -103.23756979739804
                        },
                        "wellHeadProjected": {
                          "crsKey": "projected",
                          "elevationFromMsl": {
                            "unitKey": "ft",
                            "value": 2650.5
                          },
                          "x": 1315694.366039069,
                          "y": 458966.7531300551
                        },
                        "wellHeadWgs84": {
                          "latitude": 46.8925081,
                          "longitude": -103.2380248
                        },
                        "wellboreType": "bypass"
                      },
                      "meta": [
                        {
                          "kind": "Unit",
                          "name": "Measure depth default unit",
                          "persistableReference": "persistableReference",
                          "propertyNames": [
                            "symbol"
                          ],
                          "propertyValues": [
                            "ft"
                          ]
                        },
                        {
                          "kind": "CRS",
                          "name": "projected",
                          "persistableReference": "{\"lateBoundCRS\":{\"wkt\":\"PROJCS[\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-100.5],PARAMETER[\\\"Standard_Parallel_1\\\",46.1833333333333],PARAMETER[\\\"Standard_Parallel_2\\\",47.4833333333333],PARAMETER[\\\"Latitude_Of_Origin\\\",45.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",32021]]\",\"ver\":\"PE_10_3_1\",\"name\":\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\",\"authCode\":{\"auth\":\"EPSG\",\"code\":\"32021\"},\"type\":\"LBC\"},\"singleCT\":{\"wkt\":\"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\"ver\":\"PE_10_3_1\",\"name\":\"NAD_1927_To_WGS_1984_79_CONUS\",\"authCode\":{\"auth\":\"EPSG\",\"code\":\"15851\"},\"type\":\"ST\"},\"ver\":\"PE_10_3_1\",\"name\":\"NAD27 * OGP-Usa Conus / North Dakota South [32021,15851]\",\"authCode\":{\"auth\":\"SLB\",\"code\":\"32021079\"},\"type\":\"EBC\"}",
                          "propertyNames": [
                            "wellHeadProjected.x",
                            "wellHeadProjected.y"
                          ]
                        }
                      ],
                      "id": "{{datapartitionid}}:wellbore:myWellbore",
                      "kind": "{{datapartitionid}}:wks:wellbore:1.0.6",
                      "legal": {
                        "legaltags": [
                          "{{legaltags}}"
                        ],
                        "otherRelevantDataCountries": [
                          "FR",
                          "US"
                        ],
                        "status": "compliant"
                      }
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Missing mandatory parameter or unknown parameter"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logsets/{logsetid}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Logset"
          ],
          "summary": "Get the LogSet using wks:logSet:1.0.5 schema",
          "description": "Get the LogSet object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_logset",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logsetid",
                "type": "string"
              },
              "name": "logsetid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/logset"
                  }
                }
              }
            },
            "404": {
              "description": "LogSet not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | Logset"
          ],
          "summary": "Delete the LogSet. The API performs a logical deletion of the given record",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "del_logset",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logsetid",
                "type": "string"
              },
              "name": "logsetid",
              "in": "path"
            },
            {
              "description": "Whether or not to delete records children",
              "required": false,
              "schema": {
                "title": "Recursive",
                "type": "boolean",
                "description": "Whether or not to delete records children",
                "default": false
              },
              "name": "recursive",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "204": {
              "description": "Record deleted successfully"
            },
            "404": {
              "description": "LogSet not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logsets/{logsetid}/versions": {
        "get": {
          "tags": [
            "Wellbore DDMS | Logset"
          ],
          "summary": "Get all versions of the logset.",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_logset_versions",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logsetid",
                "type": "string"
              },
              "name": "logsetid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  }
                }
              }
            },
            "404": {
              "description": "LogSet not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logsets/{logsetid}/versions/{version}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Logset"
          ],
          "summary": "Get the given version of LogSet using wks:logSet:1.0.5 schema",
          "description": "\"Get the LogSet object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_logset_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logsetid",
                "type": "string"
              },
              "name": "logsetid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/logset"
                  }
                }
              }
            },
            "404": {
              "description": "LogSet not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logsets": {
        "post": {
          "tags": [
            "Wellbore DDMS | Logset"
          ],
          "summary": "Create or update the LogSets using wks:logSet:1.0.5 schema",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_logset",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Logsets",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/logset"
                  },
                  "example": [
                    {
                      "acl": {
                        "viewers": [
                          "data.default.viewers@{{datapartitionid}}.{{domain}}.com"
                        ],
                        "owners": [
                          "data.default.owners@{{datapartitionid}}.{{domain}}.com"
                        ]
                      },
                      "data": {
                        "name": "myLogset",
                        "channelMnemonics": [
                          "GR",
                          "NPOR",
                          "RHOB"
                        ],
                        "channelNames": [
                          "Gamma Ray",
                          "Neutron Porosity",
                          "Bulk Density"
                        ],
                        "relationships": {
                          "well": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:well:myWell",
                            "name": "myWell"
                          },
                          "wellbore": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:wellbore:myWellbore",
                            "name": "myWellbore"
                          }
                        },
                        "elevationReference": {
                          "elevationFromMsl": {
                            "unitKey": "ft",
                            "value": 2680.5
                          },
                          "name": "KB"
                        },
                        "reference": {
                          "dataType": "number",
                          "dimension": 1,
                          "family": "Measured Depth",
                          "familyType": "Depth",
                          "format": "float32",
                          "mnemonic": "MD",
                          "name": "Measured Depth",
                          "unitKey": "ft"
                        },
                        "referenceType": "Measured Depth"
                      },
                      "id": "{{datapartitionid}}:logSet:myLogset",
                      "kind": "{{datapartitionid}}:wks:logSet:1.0.5",
                      "legal": {
                        "legaltags": [
                          "{{legaltags}}"
                        ],
                        "otherRelevantDataCountries": [
                          "FR",
                          "US"
                        ],
                        "status": "compliant"
                      }
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Missing mandatory parameter or unknown parameter"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/trajectories/{trajectoryid}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Trajectory"
          ],
          "summary": "Get the trajectory using wks:trajectory:1.0.5 schema",
          "description": "Get the Trajectory object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_trajectory",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Trajectoryid",
                "type": "string"
              },
              "name": "trajectoryid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/trajectory"
                  }
                }
              }
            },
            "404": {
              "description": "Trajectory not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | Trajectory"
          ],
          "summary": "Delete the Trajectory. The API performs a logical deletion of the given record",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "del_trajectory",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Trajectoryid",
                "type": "string"
              },
              "name": "trajectoryid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "204": {
              "description": "Record deleted successfully"
            },
            "404": {
              "description": "Trajectory not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/trajectories/{trajectoryid}/versions": {
        "get": {
          "tags": [
            "Wellbore DDMS | Trajectory"
          ],
          "summary": "Get all versions of the Trajectory",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_trajectory_versions",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Trajectoryid",
                "type": "string"
              },
              "name": "trajectoryid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  }
                }
              }
            },
            "404": {
              "description": "Trajectory not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/trajectories/{trajectoryid}/versions/{version}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Trajectory"
          ],
          "summary": "Get the given version of Trajectory using wks:Trajectory:1.0.5 schema",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_trajectory_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Trajectoryid",
                "type": "string"
              },
              "name": "trajectoryid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/trajectory"
                  }
                }
              }
            },
            "404": {
              "description": "Trajectory not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/trajectories": {
        "post": {
          "tags": [
            "Wellbore DDMS | Trajectory"
          ],
          "summary": "Create or update the trajectories using wks:Trajectory:1.0.5 schema",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_trajectory",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Trajectories",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/trajectory"
                  },
                  "example": [
                    {
                      "acl": {
                        "viewers": [
                          "data.default.viewers@{{datapartitionid}}.{{domain}}.com"
                        ],
                        "owners": [
                          "data.default.owners@{{datapartitionid}}.{{domain}}.com"
                        ]
                      },
                      "data": {
                        "azimuthReference": "string",
                        "channelMnemonics": [
                          "Measured Depth",
                          "True Vertical Depth",
                          "XOffset",
                          "YOffset"
                        ],
                        "channelNames": [
                          "MD",
                          "TVD",
                          "X",
                          "Y"
                        ],
                        "channels": [
                          {
                            "dimension": 1,
                            "family": "Measured Depth",
                            "name": "MD",
                            "unitKey": "ft"
                          },
                          {
                            "dimension": 1,
                            "family": "True Vertical Depth",
                            "name": "TVD",
                            "unitKey": "ft"
                          },
                          {
                            "dimension": 1,
                            "family": "XOffset",
                            "name": "X",
                            "unitKey": "ft"
                          },
                          {
                            "dimension": 1,
                            "family": "YOffset",
                            "name": "Y",
                            "unitKey": "ft"
                          }
                        ],
                        "name": "myTrajectory",
                        "relationships": {
                          "well": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:well:myWell",
                            "name": "myWell"
                          },
                          "wellbore": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:wellbore:myWellbore",
                            "name": "myWellbore"
                          }
                        }
                      },
                      "id": "{{datapartitionid}}:trajectory:myTrajectory",
                      "kind": "{{datapartitionid}}:wks:trajectory:1.0.5",
                      "legal": {
                        "legaltags": [
                          "{{legaltags}}"
                        ],
                        "otherRelevantDataCountries": [
                          "FR",
                          "US"
                        ],
                        "status": "compliant"
                      }
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Missing mandatory parameter or unknown parameter"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/trajectories/{trajectoryid}/data": {
        "get": {
          "tags": [
            "Wellbore DDMS | Trajectory"
          ],
          "summary": "Returns all data within the specified filters. Strongly consistent.",
          "description": "return full bulk data. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_traj_data",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Trajectoryid",
                "type": "string"
              },
              "name": "trajectoryid",
              "in": "path"
            },
            {
              "description": "List of channels to get. If not provided, return all channels.",
              "required": false,
              "schema": {
                "title": "Channels",
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "List of channels to get. If not provided, return all channels."
              },
              "name": "channels",
              "in": "query"
            },
            {
              "description": "define format when using JSON data is used. Value can be split, index, columns, records",
              "required": false,
              "schema": {
                "title": "Orient",
                "pattern": "split|index|columns|records",
                "type": "string",
                "description": "define format when using JSON data is used. Value can be split, index, columns, records",
                "default": "split"
              },
              "name": "orient",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Get trajectory data of the given channels.\nIt uses [Pandas.Dataframe json format](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html).\n Here're examples for data with 5 rows for channels MD, TVD, X, Y with different _orient_: \n* split:  <br/>`{\"columns\":[\"MD\",\"TVD\",\"X\",\"Y\"],\"index\":[0,1,2,3,4],\"data\":[[0.0,0.0,1001,2001],[0.5,0.5,1002,2002],[1.0,0.75,1003,2003],[1.5,1.0,1004,2004],[2.0,1.5,1005,2005]]}`<br/>&nbsp;\n* index:  <br/>`{\"0\":{\"MD\":0.0,\"TVD\":0.0,\"X\":1001,\"Y\":2001},\"1\":{\"MD\":0.5,\"TVD\":0.5,\"X\":1002,\"Y\":2002},\"2\":{\"MD\":1.0,\"TVD\":0.75,\"X\":1003,\"Y\":2003},\"3\":{\"MD\":1.5,\"TVD\":1.0,\"X\":1004,\"Y\":2004},\"4\":{\"MD\":2.0,\"TVD\":1.5,\"X\":1005,\"Y\":2005}}`<br/>&nbsp;\n* columns:  <br/>`{\"MD\":{\"0\":0.0,\"1\":0.5,\"2\":1.0,\"3\":1.5,\"4\":2.0},\"TVD\":{\"0\":0.0,\"1\":0.5,\"2\":0.75,\"3\":1.0,\"4\":1.5},\"X\":{\"0\":1001,\"1\":1002,\"2\":1003,\"3\":1004,\"4\":1005},\"Y\":{\"0\":2001,\"1\":2002,\"2\":2003,\"3\":2004,\"4\":2005}}`<br/>&nbsp;\n* records:  <br/>`[{\"MD\":0.0,\"TVD\":0.0,\"X\":1001,\"Y\":2001},{\"MD\":0.5,\"TVD\":0.5,\"X\":1002,\"Y\":2002},{\"MD\":1.0,\"TVD\":0.75,\"X\":1003,\"Y\":2003},{\"MD\":1.5,\"TVD\":1.0,\"X\":1004,\"Y\":2004},{\"MD\":2.0,\"TVD\":1.5,\"X\":1005,\"Y\":2005}]`<br/>&nbsp;\n* values:  <br/>`[[0.0,0.0,1001,2001],[0.5,0.5,1002,2002],[1.0,0.75,1003,2003],[1.5,1.0,1004,2004],[2.0,1.5,1005,2005]]`<br/>&nbsp;",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetLogDataResponse"
                  },
                  "example": "{\"columns\":[\"MD\",\"TVD\",\"X\",\"Y\"],\"index\":[0,1,2,3,4],\"data\":[[0.0,0.0,1001,2001],[0.5,0.5,1002,2002],[1.0,0.75,1003,2003],[1.5,1.0,1004,2004],[2.0,1.5,1005,2005]]}"
                }
              }
            },
            "204": {
              "description": "No bulkURI"
            },
            "400": {
              "description": "unknown channels"
            },
            "404": {
              "description": "trajectory not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            },
            "500": {
              "description": "Record has an invalid bulkURI"
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Wellbore DDMS | Trajectory"
          ],
          "summary": "Writes the specified data to the trajectory (atomic).",
          "description": "Overwrite if exists. <p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_traj_data",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Trajectoryid",
                "type": "string"
              },
              "name": "trajectoryid",
              "in": "path"
            },
            {
              "description": "define format when using JSON data is used. Value can be split, index, columns, records",
              "required": false,
              "schema": {
                "title": "Orient",
                "pattern": "split|index|columns|records",
                "type": "string",
                "description": "define format when using JSON data is used. Value can be split, index, columns, records",
                "default": "split"
              },
              "name": "orient",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "description": "Write trajectory bulk data. Each column corresponds to a channel.\nIt uses [Pandas.Dataframe json format](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html).\n Here're examples for data with 5 rows and 4 channels (MD, TVD, X, Y) with different _orient_: \n* split: <br/>`{\"columns\":[\"MD\",\"TVD\",\"X\",\"Y\"],\"index\":[0,1,2,3,4],\"data\":[[0.0,0.0,1001,2001],[0.5,0.5,1002,2002],[1.0,0.75,1003,2003],[1.5,1.0,1004,2004],[2.0,1.5,1005,2005]]}`<br/>&nbsp;\n* index: <br/>`{\"0\":{\"MD\":0.0,\"TVD\":0.0,\"X\":1001,\"Y\":2001},\"1\":{\"MD\":0.5,\"TVD\":0.5,\"X\":1002,\"Y\":2002},\"2\":{\"MD\":1.0,\"TVD\":0.75,\"X\":1003,\"Y\":2003},\"3\":{\"MD\":1.5,\"TVD\":1.0,\"X\":1004,\"Y\":2004},\"4\":{\"MD\":2.0,\"TVD\":1.5,\"X\":1005,\"Y\":2005}}`<br/>&nbsp;\n* columns: <br/>`{\"MD\":{\"0\":0.0,\"1\":0.5,\"2\":1.0,\"3\":1.5,\"4\":2.0},\"TVD\":{\"0\":0.0,\"1\":0.5,\"2\":0.75,\"3\":1.0,\"4\":1.5},\"X\":{\"0\":1001,\"1\":1002,\"2\":1003,\"3\":1004,\"4\":1005},\"Y\":{\"0\":2001,\"1\":2002,\"2\":2003,\"3\":2004,\"4\":2005}}`<br/>&nbsp;\n* records: <br/>`[{\"MD\":0.0,\"TVD\":0.0,\"X\":1001,\"Y\":2001},{\"MD\":0.5,\"TVD\":0.5,\"X\":1002,\"Y\":2002},{\"MD\":1.0,\"TVD\":0.75,\"X\":1003,\"Y\":2003},{\"MD\":1.5,\"TVD\":1.0,\"X\":1004,\"Y\":2004},{\"MD\":2.0,\"TVD\":1.5,\"X\":1005,\"Y\":2005}]`<br/>&nbsp;",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "example": "{\"columns\":[\"MD\",\"TVD\",\"X\",\"Y\"],\"index\":[0,1,2,3,4],\"data\":[[0.0,0.0,1001,2001],[0.5,0.5,1002,2002],[1.0,0.75,1003,2003],[1.5,1.0,1004,2004],[2.0,1.5,1005,2005]]}",
                  "oneOf": [
                    {
                      "title": "SplitFormat",
                      "type": "object",
                      "properties": {
                        "data": {
                          "title": "Data",
                          "anyOf": [
                            {
                              "type": "array",
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "array",
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "columns": {
                          "title": "Columns",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          }
                        },
                        "index": {
                          "title": "Index",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          }
                        }
                      },
                      "required": [
                        "data"
                      ]
                    },
                    {
                      "title": "IndexFormat",
                      "type": "object",
                      "properties": {
                        "TODO": {
                          "title": "Todo",
                          "type": "string"
                        }
                      },
                      "required": [
                        "TODO"
                      ]
                    },
                    {
                      "title": "ColumnFormat",
                      "type": "object",
                      "properties": {
                        "TODO": {
                          "title": "Todo",
                          "type": "string"
                        }
                      },
                      "required": [
                        "TODO"
                      ]
                    },
                    {
                      "title": "RecordsFormat",
                      "type": "object",
                      "properties": {
                        "TODO": {
                          "title": "Todo",
                          "type": "string"
                        }
                      },
                      "required": [
                        "TODO"
                      ]
                    },
                    {
                      "title": "ValuesFormat",
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "404": {
              "description": "trajectory not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/markers/{markerid}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Marker"
          ],
          "summary": "Get the marker using wks:marker:1.0.4 schema",
          "description": "Get the Marker object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_marker",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Markerid",
                "type": "string"
              },
              "name": "markerid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/marker"
                  }
                }
              }
            },
            "404": {
              "description": "marker not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | Marker"
          ],
          "summary": "Delete the marker. The API performs a logical deletion of the given record",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "del_marker",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Markerid",
                "type": "string"
              },
              "name": "markerid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "204": {
              "description": "Record deleted successfully"
            },
            "404": {
              "description": "Marker not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/markers/{markerid}/versions": {
        "get": {
          "tags": [
            "Wellbore DDMS | Marker"
          ],
          "summary": "Get all versions of the marker",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_marker_versions",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Markerid",
                "type": "string"
              },
              "name": "markerid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  }
                }
              }
            },
            "404": {
              "description": "marker not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/markers/{markerid}/versions/{version}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Marker"
          ],
          "summary": "Get the given version of marker using wks:marker:1.0.4 schema",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_marker_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Markerid",
                "type": "string"
              },
              "name": "markerid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/marker"
                  }
                }
              }
            },
            "404": {
              "description": "marker not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/markers": {
        "post": {
          "tags": [
            "Wellbore DDMS | Marker"
          ],
          "summary": "Create or update the markers using wks:marker:1.0.4 schema",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_marker",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Markers",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/marker"
                  },
                  "example": [
                    {
                      "acl": {
                        "viewers": [
                          "data.default.viewers@{{datapartitionid}}.{{domain}}.com"
                        ],
                        "owners": [
                          "data.default.owners@{{datapartitionid}}.{{domain}}.com"
                        ]
                      },
                      "data": {
                        "depth": {
                          "unitKey": "ft",
                          "value": 150
                        },
                        "md": {
                          "unitKey": "ft",
                          "value": 150
                        },
                        "tvd": {
                          "unitKey": "ft",
                          "value": 200
                        },
                        "name": "myMarker",
                        "relationships": {
                          "well": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:well:myWell",
                            "name": "myWell"
                          },
                          "wellbore": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:wellbore:myWellbore",
                            "name": "myWellbore"
                          }
                        }
                      },
                      "id": "{{datapartitionid}}:marker:myMarker",
                      "kind": "{{datapartitionid}}:wks:marker:1.0.4",
                      "legal": {
                        "legaltags": [
                          "{{legaltags}}"
                        ],
                        "otherRelevantDataCountries": [
                          "FR",
                          "US"
                        ],
                        "status": "compliant"
                      }
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Missing mandatory parameter or unknown parameter"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logs/{logid}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Get the Log using wks:log:1.0.5 schema",
          "description": "Get the log object using its data ecosystem **id**.  <p>If the log\n                kind is *wks:log:1.0.5* returns the record directly</p> <p>If the\n                wellbore kind is different *wks:log:1.0.5* it will get the raw\n                record and convert the results to match the *wks:log:1.0.5*. If\n                conversion is not possible returns an error **500**.</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_log",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logid",
                "type": "string"
              },
              "name": "logid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/log"
                  }
                }
              }
            },
            "404": {
              "description": "log not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Delete the log. The API performs a logical deletion of the given record",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "del_log",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logid",
                "type": "string"
              },
              "name": "logid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "204": {
              "description": "Record deleted successfully"
            },
            "404": {
              "description": "log not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Create or update the logs using wks:log:1.0.5 schema",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_log",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Logs",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/log"
                  },
                  "example": [
                    {
                      "acl": {
                        "viewers": [
                          "data.default.viewers@{{datapartitionid}}.{{domain}}.com"
                        ],
                        "owners": [
                          "data.default.owners@{{datapartitionid}}.{{domain}}.com"
                        ]
                      },
                      "data": {
                        "name": "myLog_GR",
                        "history": [
                          {
                            "date": "2019-02-01T11:16:03Z",
                            "description": "Fake example",
                            "user": "BWillis"
                          }
                        ],
                        "log": {
                          "dataType": "number",
                          "dimension": 1,
                          "family": "Gamma Ray",
                          "familyType": "Gamma Ray",
                          "format": "float32",
                          "mnemonic": "GR",
                          "name": "myLog_GR",
                          "properties": [
                            {
                              "description": "Linear depth offset of the channel sensor relative to some reference point, typically the toolstring zero",
                              "name": "MEASURE_POINT_OFFSET",
                              "unitKey": "m",
                              "value": 0.264922
                            }
                          ],
                          "unitKey": "gAPI"
                        },
                        "reference": {
                          "dataType": "number",
                          "dimension": 1,
                          "family": "Measured Depth",
                          "familyType": "Depth",
                          "format": "float32",
                          "mnemonic": "MD",
                          "name": "Measured Depth",
                          "unitKey": "ft"
                        },
                        "referenceType": "Measured Depth",
                        "relationships": {
                          "logSet": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:logSet:myLogset",
                            "name": "myLogset"
                          },
                          "well": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:well:myWell",
                            "name": "myWell"
                          },
                          "wellbore": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:wellbore:myWellbore",
                            "name": "myWellbore"
                          }
                        }
                      },
                      "id": "{{datapartitionid}}:log:myLog_GR",
                      "kind": "{{datapartitionid}}:wks:log:1.0.5",
                      "legal": {
                        "legaltags": [
                          "{{legaltags}}"
                        ],
                        "otherRelevantDataCountries": [
                          "FR",
                          "US"
                        ],
                        "status": "compliant"
                      }
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Missing mandatory parameter or unknown parameter"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logs/{logid}/versions": {
        "get": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Get all versions of the log",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_log_versions",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logid",
                "type": "string"
              },
              "name": "logid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  }
                }
              }
            },
            "404": {
              "description": "log not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logs/{logid}/versions/{version}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Get the given version of log using wks:log:1.0.5 schema",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_log_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logid",
                "type": "string"
              },
              "name": "logid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/log"
                  }
                }
              }
            },
            "404": {
              "description": "log not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logs/{logid}/data": {
        "get": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Returns all data within the specified filters. Strongly consistent.",
          "description": "return full bulk data. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_log_data",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logid",
                "type": "string"
              },
              "name": "logid",
              "in": "path"
            },
            {
              "description": "define format when using JSON data is used. Value can be split, index, columns, records, values",
              "required": false,
              "schema": {
                "title": "Orient",
                "pattern": "split|index|columns|records|values",
                "type": "string",
                "description": "define format when using JSON data is used. Value can be split, index, columns, records, values",
                "default": "split"
              },
              "name": "orient",
              "in": "query"
            },
            {
              "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log.",
              "required": false,
              "schema": {
                "title": "Bulk-Path",
                "type": "string",
                "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log."
              },
              "name": "bulk-path",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Get log bulk data in format in the given _orient_ value.\nIt uses [Pandas.Dataframe json format](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html).\n Here're examples for data with 5 rows and 3 columns with different _orient_: \n* split:  <br/>`{\"columns\":[\"Ref\",\"col_100X\",\"col_200X\"],\"index\":[0,1,2,3,4],\"data\":[[0.0,1001,2001],[0.5,1002,2002],[1.0,1003,2003],[1.5,1004,2004],[2.0,1005,2005]]}`<br/>&nbsp;\n* index:  <br/>`{\"0\":{\"Ref\":0.0,\"col_100X\":1001,\"col_200X\":2001},\"1\":{\"Ref\":0.5,\"col_100X\":1002,\"col_200X\":2002},\"2\":{\"Ref\":1.0,\"col_100X\":1003,\"col_200X\":2003},\"3\":{\"Ref\":1.5,\"col_100X\":1004,\"col_200X\":2004},\"4\":{\"Ref\":2.0,\"col_100X\":1005,\"col_200X\":2005}}`<br/>&nbsp;\n* columns:  <br/>`{\"Ref\":{\"0\":0.0,\"1\":0.5,\"2\":1.0,\"3\":1.5,\"4\":2.0},\"col_100X\":{\"0\":1001,\"1\":1002,\"2\":1003,\"3\":1004,\"4\":1005},\"col_200X\":{\"0\":2001,\"1\":2002,\"2\":2003,\"3\":2004,\"4\":2005}}`<br/>&nbsp;\n* records:  <br/>`[{\"Ref\":0.0,\"col_100X\":1001,\"col_200X\":2001},{\"Ref\":0.5,\"col_100X\":1002,\"col_200X\":2002},{\"Ref\":1.0,\"col_100X\":1003,\"col_200X\":2003},{\"Ref\":1.5,\"col_100X\":1004,\"col_200X\":2004},{\"Ref\":2.0,\"col_100X\":1005,\"col_200X\":2005}]`<br/>&nbsp;\n* values:  <br/>`[[0.0,1001,2001],[0.5,1002,2002],[1.0,1003,2003],[1.5,1004,2004],[2.0,1005,2005]]`<br/>&nbsp;",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetLogDataResponse"
                  },
                  "example": "{\"columns\":[\"Ref\",\"col_100X\",\"col_200X\"],\"index\":[0,1,2,3,4],\"data\":[[0.0,1001,2001],[0.5,1002,2002],[1.0,1003,2003],[1.5,1004,2004],[2.0,1005,2005]]}"
                }
              }
            },
            "404": {
              "description": "log not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Writes the specified data to the log (atomic).",
          "description": "Overwrite if exists. <p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "write_log_data",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logid",
                "type": "string"
              },
              "name": "logid",
              "in": "path"
            },
            {
              "description": "define format when using JSON data is used. Value can be split, index, columns, records, values",
              "required": false,
              "schema": {
                "title": "Orient",
                "pattern": "split|index|columns|records|values",
                "type": "string",
                "description": "define format when using JSON data is used. Value can be split, index, columns, records, values",
                "default": "split"
              },
              "name": "orient",
              "in": "query"
            },
            {
              "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log.",
              "required": false,
              "schema": {
                "title": "Bulk-Path",
                "type": "string",
                "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log."
              },
              "name": "bulk-path",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "404": {
              "description": "log not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "requestBody": {
            "description": "Write log bulk data.\nIt uses [Pandas.Dataframe json format](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html).\n Here're examples for data with 5 rows and 3 columns with different _orient_: \n* split:  <br/>`{\"columns\":[\"Ref\",\"col_100X\",\"col_200X\"],\"index\":[0,1,2,3,4],\"data\":[[0.0,1001,2001],[0.5,1002,2002],[1.0,1003,2003],[1.5,1004,2004],[2.0,1005,2005]]}`<br/>&nbsp;\n* index:  <br/>`{\"0\":{\"Ref\":0.0,\"col_100X\":1001,\"col_200X\":2001},\"1\":{\"Ref\":0.5,\"col_100X\":1002,\"col_200X\":2002},\"2\":{\"Ref\":1.0,\"col_100X\":1003,\"col_200X\":2003},\"3\":{\"Ref\":1.5,\"col_100X\":1004,\"col_200X\":2004},\"4\":{\"Ref\":2.0,\"col_100X\":1005,\"col_200X\":2005}}`<br/>&nbsp;\n* columns:  <br/>`{\"Ref\":{\"0\":0.0,\"1\":0.5,\"2\":1.0,\"3\":1.5,\"4\":2.0},\"col_100X\":{\"0\":1001,\"1\":1002,\"2\":1003,\"3\":1004,\"4\":1005},\"col_200X\":{\"0\":2001,\"1\":2002,\"2\":2003,\"3\":2004,\"4\":2005}}`<br/>&nbsp;\n* records:  <br/>`[{\"Ref\":0.0,\"col_100X\":1001,\"col_200X\":2001},{\"Ref\":0.5,\"col_100X\":1002,\"col_200X\":2002},{\"Ref\":1.0,\"col_100X\":1003,\"col_200X\":2003},{\"Ref\":1.5,\"col_100X\":1004,\"col_200X\":2004},{\"Ref\":2.0,\"col_100X\":1005,\"col_200X\":2005}]`<br/>&nbsp;\n* values:  <br/>`[[0.0,1001,2001],[0.5,1002,2002],[1.0,1003,2003],[1.5,1004,2004],[2.0,1005,2005]]`<br/>&nbsp;",
            "required": true,
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "columns": [
                      "Ref",
                      "col_100X",
                      "col_200X"
                    ],
                    "index": [
                      0,
                      1,
                      2,
                      3,
                      4
                    ],
                    "data": [
                      [
                        0,
                        1001,
                        2001
                      ],
                      [
                        0.5,
                        1002,
                        2002
                      ],
                      [
                        1,
                        1003,
                        2003
                      ],
                      [
                        1.5,
                        1004,
                        2004
                      ],
                      [
                        2,
                        1005,
                        2005
                      ]
                    ]
                  },
                  "oneOf": [
                    {
                      "title": "SplitFormat",
                      "type": "object",
                      "properties": {
                        "data": {
                          "title": "Data",
                          "anyOf": [
                            {
                              "type": "array",
                              "items": {
                                "anyOf": [
                                  {
                                    "type": "string"
                                  },
                                  {
                                    "type": "integer"
                                  },
                                  {
                                    "type": "number"
                                  }
                                ]
                              }
                            },
                            {
                              "type": "array",
                              "items": {
                                "type": "array",
                                "items": {
                                  "anyOf": [
                                    {
                                      "type": "string"
                                    },
                                    {
                                      "type": "integer"
                                    },
                                    {
                                      "type": "number"
                                    }
                                  ]
                                }
                              }
                            }
                          ]
                        },
                        "columns": {
                          "title": "Columns",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          }
                        },
                        "index": {
                          "title": "Index",
                          "type": "array",
                          "items": {
                            "anyOf": [
                              {
                                "type": "string"
                              },
                              {
                                "type": "integer"
                              },
                              {
                                "type": "number"
                              }
                            ]
                          }
                        }
                      },
                      "required": [
                        "data"
                      ]
                    },
                    {
                      "title": "IndexFormat",
                      "type": "object",
                      "properties": {
                        "TODO": {
                          "title": "Todo",
                          "type": "string"
                        }
                      },
                      "required": [
                        "TODO"
                      ]
                    },
                    {
                      "title": "ColumnFormat",
                      "type": "object",
                      "properties": {
                        "TODO": {
                          "title": "Todo",
                          "type": "string"
                        }
                      },
                      "required": [
                        "TODO"
                      ]
                    },
                    {
                      "title": "RecordsFormat",
                      "type": "object",
                      "properties": {
                        "TODO": {
                          "title": "Todo",
                          "type": "string"
                        }
                      },
                      "required": [
                        "TODO"
                      ]
                    },
                    {
                      "title": "ValuesFormat",
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "/ddms/v2/logs/{logid}/upload_data": {
        "post": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Writes the data to the log. Support json file (then orient must be provided) and parquet",
          "description": "Overwrite if exists. <p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "upload_log_data",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logid",
                "type": "string"
              },
              "name": "logid",
              "in": "path"
            },
            {
              "description": "define format when using JSON data is used. Value can be split, index, columns, records, values",
              "required": false,
              "schema": {
                "title": "Orient",
                "pattern": "split|index|columns|records|values",
                "type": "string",
                "description": "define format when using JSON data is used. Value can be split, index, columns, records, values",
                "default": "split"
              },
              "name": "orient",
              "in": "query"
            },
            {
              "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log.",
              "required": false,
              "schema": {
                "title": "Bulk-Path",
                "type": "string",
                "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log."
              },
              "name": "bulk-path",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "multipart/form-data": {
                "schema": {
                  "$ref": "#/components/schemas/Body_upload_log_data_file_ddms_v2_logs__logid__upload_data_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "invalid request"
            },
            "404": {
              "description": "log not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logs/{logid}/statistics": {
        "get": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Data statistics",
          "description": "This API will return count, mean, std, min, max and percentiles of each column. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_log_data_statistics_ddms_v2_logs__logid__statistics_get",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logid",
                "type": "string"
              },
              "name": "logid",
              "in": "path"
            },
            {
              "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log.",
              "required": false,
              "schema": {
                "title": "Bulk-Path",
                "type": "string",
                "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log."
              },
              "name": "bulk-path",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetStatisticResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logs/{logid}/versions/{version}/data": {
        "get": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Returns all data within the specified filters. Strongly consistent.",
          "description": "return full bulk data. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_log_data_by_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logid",
                "type": "string"
              },
              "name": "logid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "define format when using JSON data is used. Value can be split, index, columns, records, values",
              "required": false,
              "schema": {
                "title": "Orient",
                "pattern": "split|index|columns|records|values",
                "type": "string",
                "description": "define format when using JSON data is used. Value can be split, index, columns, records, values",
                "default": "split"
              },
              "name": "orient",
              "in": "query"
            },
            {
              "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log.",
              "required": false,
              "schema": {
                "title": "Bulk-Path",
                "type": "string",
                "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log."
              },
              "name": "bulk-path",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Get log bulk data in format in the given _orient_ value.\nIt uses [Pandas.Dataframe json format](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.to_json.html).\n Here're examples for data with 5 rows and 3 columns with different _orient_: \n* split:  <br/>`{\"columns\":[\"Ref\",\"col_100X\",\"col_200X\"],\"index\":[0,1,2,3,4],\"data\":[[0.0,1001,2001],[0.5,1002,2002],[1.0,1003,2003],[1.5,1004,2004],[2.0,1005,2005]]}`<br/>&nbsp;\n* index:  <br/>`{\"0\":{\"Ref\":0.0,\"col_100X\":1001,\"col_200X\":2001},\"1\":{\"Ref\":0.5,\"col_100X\":1002,\"col_200X\":2002},\"2\":{\"Ref\":1.0,\"col_100X\":1003,\"col_200X\":2003},\"3\":{\"Ref\":1.5,\"col_100X\":1004,\"col_200X\":2004},\"4\":{\"Ref\":2.0,\"col_100X\":1005,\"col_200X\":2005}}`<br/>&nbsp;\n* columns:  <br/>`{\"Ref\":{\"0\":0.0,\"1\":0.5,\"2\":1.0,\"3\":1.5,\"4\":2.0},\"col_100X\":{\"0\":1001,\"1\":1002,\"2\":1003,\"3\":1004,\"4\":1005},\"col_200X\":{\"0\":2001,\"1\":2002,\"2\":2003,\"3\":2004,\"4\":2005}}`<br/>&nbsp;\n* records:  <br/>`[{\"Ref\":0.0,\"col_100X\":1001,\"col_200X\":2001},{\"Ref\":0.5,\"col_100X\":1002,\"col_200X\":2002},{\"Ref\":1.0,\"col_100X\":1003,\"col_200X\":2003},{\"Ref\":1.5,\"col_100X\":1004,\"col_200X\":2004},{\"Ref\":2.0,\"col_100X\":1005,\"col_200X\":2005}]`<br/>&nbsp;\n* values:  <br/>`[[0.0,1001,2001],[0.5,1002,2002],[1.0,1003,2003],[1.5,1004,2004],[2.0,1005,2005]]`<br/>&nbsp;",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GetLogDataResponse"
                  },
                  "example": "{\"columns\":[\"Ref\",\"col_100X\",\"col_200X\"],\"index\":[0,1,2,3,4],\"data\":[[0.0,1001,2001],[0.5,1002,2002],[1.0,1003,2003],[1.5,1004,2004],[2.0,1005,2005]]}"
                }
              }
            },
            "404": {
              "description": "log not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/logs/{logid}/decimated": {
        "get": {
          "tags": [
            "Wellbore DDMS | Log"
          ],
          "summary": "Returns a decimated version of all data within the specified filters. Eventually consistent.",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_log_decimated",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logid",
                "type": "string"
              },
              "name": "logid",
              "in": "path"
            },
            {
              "description": "Number of division desired",
              "required": false,
              "schema": {
                "title": "Quantiles",
                "type": "integer",
                "description": "Number of division desired"
              },
              "name": "quantiles",
              "in": "query"
            },
            {
              "description": "The start value for the log decimation",
              "required": false,
              "schema": {
                "title": "Start",
                "type": "number",
                "description": "The start value for the log decimation"
              },
              "name": "start",
              "in": "query"
            },
            {
              "description": "The stop value for the log decimation",
              "required": false,
              "schema": {
                "title": "Stop",
                "type": "number",
                "description": "The stop value for the log decimation"
              },
              "name": "stop",
              "in": "query"
            },
            {
              "description": "define format when using JSON data is used. Value can be split, index, columns, records, values",
              "required": false,
              "schema": {
                "title": "Orient",
                "pattern": "split|index|columns|records|values",
                "type": "string",
                "description": "define format when using JSON data is used. Value can be split, index, columns, records, values",
                "default": "split"
              },
              "name": "orient",
              "in": "query"
            },
            {
              "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log.",
              "required": false,
              "schema": {
                "title": "Bulk-Path",
                "type": "string",
                "description": "The json path to the bulk reference (see https://goessner.net/articles/JsonPath/). Required for non wks:log."
              },
              "name": "bulk-path",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {}
                }
              }
            },
            "404": {
              "description": "log not found"
            },
            "422": {
              "description": "log is not compatible with decimation"
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/dipsets": {
        "post": {
          "tags": [
            "Wellbore DDMS | Dipset"
          ],
          "summary": "Create or update the DipSets using wks:dipSet:1.0.0 schema",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_dipset",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Dipsets",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dipset"
                  },
                  "example": [
                    {
                      "acl": {
                        "viewers": [
                          "data.default.viewers@{{datapartitionid}}.{{domain}}.com"
                        ],
                        "owners": [
                          "data.default.owners@{{datapartitionid}}.{{domain}}.com"
                        ]
                      },
                      "data": {
                        "classification": "Externally Processed LogSet",
                        "name": "myDipSet",
                        "relationships": {
                          "well": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:well:myWell",
                            "name": "myWell"
                          },
                          "wellbore": {
                            "confidence": 1,
                            "id": "{{datapartitionid}}:wellbore:myWellbore",
                            "name": "myWellbore"
                          }
                        }
                      },
                      "id": "{{datapartitionid}}:dipSet:myDipSet",
                      "kind": "{{datapartitionid}}:wks:dipSet:0.0.1",
                      "legal": {
                        "legaltags": [
                          "{{legaltags}}"
                        ],
                        "otherRelevantDataCountries": [
                          "FR",
                          "US"
                        ],
                        "status": "compliant"
                      }
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Missing mandatory parameter or unknown parameter"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/dipsets/{dipsetid}/versions/{version}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Dipset"
          ],
          "summary": "Get the given version of DipSet using wks:dipset:1.0.0 schema",
          "description": "\"Get the DipSet object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_dipset_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/dipset"
                  }
                }
              }
            },
            "404": {
              "description": "DipSet not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/dipsets/{dipsetid}/versions": {
        "get": {
          "tags": [
            "Wellbore DDMS | Dipset"
          ],
          "summary": "Get all versions of the dipset",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_dipset_versions",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  }
                }
              }
            },
            "404": {
              "description": "DipSet not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/dipsets/{dipsetid}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Dipset"
          ],
          "summary": "Get the DipSet using wks:dipSet:1.0.0 schema",
          "description": "Get the DipSet object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_dipset",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/dipset"
                  }
                }
              }
            },
            "404": {
              "description": "DipSet not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | Dipset"
          ],
          "summary": "Delete the DipSet. The API performs a logical deletion of the given record",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "del_dipset",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "description": "Whether or not to delete records children",
              "required": false,
              "schema": {
                "title": "Recursive",
                "type": "boolean",
                "description": "Whether or not to delete records children",
                "default": false
              },
              "name": "recursive",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "204": {
              "description": "Record deleted successfully"
            },
            "404": {
              "description": "DipSet not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/dipsets/{dipsetid}/dips": {
        "get": {
          "tags": [
            "Wellbore DDMS | Dips"
          ],
          "summary": "Get dips",
          "description": "Return dips from dipset from the given index until the given number of dips specifed in query parameters. \n    If not specified returns all dips from dipset. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_dips",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "required": false,
              "schema": {
                "title": "Index",
                "minimum": 0,
                "type": "integer"
              },
              "name": "index",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Limit",
                "minimum": 0,
                "type": "integer"
              },
              "name": "limit",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "title": "Response Get Dips Ddms V2 Dipsets  Dipsetid  Dips Get",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Dip"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "DipSet not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Wellbore DDMS | Dips"
          ],
          "summary": "Define the dips of the dipset",
          "description": "Replace previous dips by provided dips. Sort dips by reference and azimuth. <p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_dips",
          "parameters": [
            {
              "description": "The ID of the dipset",
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string",
                "description": "The ID of the dipset"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Dips",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dip"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "title": "Response Post Dips Ddms V2 Dipsets  Dipsetid  Dips Post",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Dip"
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/dipsets/{dipsetid}/dips/insert": {
        "post": {
          "tags": [
            "Wellbore DDMS | Dips"
          ],
          "summary": "Insert dip in a dipset",
          "description": "Insert dips in dipset. \n    Existing dips are not replaced. \n    Several dip can have same reference. \n    Operation will sort by reference all dips in dipset (may modify dip indexes). <p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "insert_dips",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Dips",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Dip"
                  }
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "title": "Response Insert Dips Ddms V2 Dipsets  Dipsetid  Dips Insert Post",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Dip"
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/dipsets/{dipsetid}/dips/query": {
        "get": {
          "tags": [
            "Wellbore DDMS | Dips"
          ],
          "summary": "Query dip from dipset",
          "description": "Search dip within reference interval and specific classification. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_dip",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "description": "Min reference for the dips to search in the dipset",
              "required": false,
              "schema": {
                "title": "Minreference",
                "type": "number",
                "description": "Min reference for the dips to search in the dipset"
              },
              "name": "minReference",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Max reference for the dips to search in the dipset",
                "type": "number"
              },
              "name": "maxReference",
              "in": "query"
            },
            {
              "required": false,
              "schema": {
                "title": "Classification for the dip to search in the dipset",
                "type": "string"
              },
              "name": "classification",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "title": "Response Query Dip Ddms V2 Dipsets  Dipsetid  Dips Query Get",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Dip"
                    }
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v2/dipsets/{dipsetid}/dips/{index}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Dips"
          ],
          "summary": "Get a dip at index",
          "description": "\"Return dip from dipset at the given index. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_dip_by_index",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Index",
                "type": "integer"
              },
              "name": "index",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Dip"
                  }
                }
              }
            },
            "404": {
              "description": "DipSet or index not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | Dips"
          ],
          "summary": "Delete a dip",
          "description": "Removes the dip at index. <p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "delete_dip_by_index",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Index",
                "type": "integer"
              },
              "name": "index",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "title": "Response Delete Dip By Index Ddms V2 Dipsets  Dipsetid  Dips  Index  Delete",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Dip"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "DipSet or index not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "patch": {
          "tags": [
            "Wellbore DDMS | Dips"
          ],
          "summary": "Update dip",
          "description": "\"Update dip at index     \n    Operation will sort by reference all dips in dipset (may modify dip indexes).",
          "operationId": "patch_dip",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Dipsetid",
                "type": "string"
              },
              "name": "dipsetid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Index",
                "type": "integer"
              },
              "name": "index",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dip"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "title": "Response Patch Dip Ddms V2 Dipsets  Dipsetid  Dips  Index  Patch",
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Dip"
                    }
                  }
                }
              }
            },
            "404": {
              "description": "DipSet not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/wellbores/{wellboreid}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Wellbore v3"
          ],
          "summary": "Get the Wellbore using osdu schema",
          "description": "Get the Wellbore object using its **id**.\n    <p>If the **id** is a Delfi Wellbore Id, tries to convert it on the fly to return the Wellbore as an osdu Wellbore.</p> \n    <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_wellbore_osdu",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Wellbore"
                  }
                }
              }
            },
            "404": {
              "description": "Wellbore not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | Wellbore v3"
          ],
          "summary": "Delete the wellbore. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "del_osdu_wellbore",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "204": {
              "description": "Record deleted successfully"
            },
            "404": {
              "description": "Wellbore not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/wellbores/{wellboreid}/versions": {
        "get": {
          "tags": [
            "Wellbore DDMS | Wellbore v3"
          ],
          "summary": "Get all versions of the Wellbore",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_osdu_wellbore_versions",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  }
                }
              }
            },
            "404": {
              "description": "Wellbore not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/wellbores/{wellboreid}/versions/{version}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Wellbore v3"
          ],
          "summary": "Get the given version of the Wellbore using OSDU wellbore schema",
          "description": "\"Get the Wellbore object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_osdu_wellbore_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Wellbore"
                  }
                }
              }
            },
            "404": {
              "description": "Wellbore not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/wellbores": {
        "post": {
          "tags": [
            "Wellbore DDMS | Wellbore v3"
          ],
          "summary": "Create or update the Wellbores using osdu schema",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_wellbore_osdu",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Wellbores",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Wellbore"
                  },
                  "example": [
                    {
                      "acl": {
                        "viewers": [
                          "data.default.viewers@{{datapartitionid}}.{{domain}}"
                        ],
                        "owners": [
                          "data.default.owners@{{datapartitionid}}.{{domain}}"
                        ]
                      },
                      "id": "{{datapartitionid}}:master-data--Wellbore:{{wellboreId}}:",
                      "kind": "osdu:wks:master-data--Wellbore:1.0.0",
                      "legal": {
                        "legaltags": [
                          "{{legaltags}}"
                        ],
                        "otherRelevantDataCountries": [
                          "FR",
                          "US"
                        ]
                      },
                      "data": {
                        "ExtensionProperties": {
                          "airGap": {
                            "unitKey": "ft",
                            "value": 35
                          },
                          "country": "United States of America",
                          "operator": "Francois Vinyes",
                          "uwi": "33-089-00300-00-01",
                          "wellboreType": "bypass"
                        },
                        "SpatialLocation": {
                          "Wgs84Coordinates": {
                            "features": [
                              {
                                "geometry": {
                                  "coordinates": [
                                    [
                                      -103.2380248,
                                      46.8925081,
                                      5301
                                    ],
                                    [
                                      -103.2380248,
                                      46.8925081,
                                      2801
                                    ],
                                    [
                                      -103.2378748,
                                      46.892608100000004,
                                      301
                                    ],
                                    [
                                      -103.23742477750001,
                                      46.89270811,
                                      -2199
                                    ],
                                    [
                                      -103.23667470999663,
                                      46.892808120001,
                                      -4699
                                    ],
                                    [
                                      -103.2356245974865,
                                      46.892908130002,
                                      -7199
                                    ]
                                  ],
                                  "type": "LineString"
                                },
                                "properties": {
                                  "name": "Newton 2-31-Lat-1"
                                },
                                "type": "Feature"
                              }
                            ],
                            "type": "FeatureCollection"
                          }
                        },
                        "FacilityName": "{{wellboreName}}",
                        "WellID": "{{datapartitionid}}:master-data--Well:{{wellId}}:"
                      },
                      "meta": [
                        {
                          "kind": "Unit",
                          "name": "Measure depth default unit",
                          "persistableReference": "persistableReference",
                          "propertyNames": [
                            "symbol"
                          ],
                          "propertyValues": [
                            "ft"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Missing mandatory parameter or unknown parameter"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/wells/{wellid}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Well v3"
          ],
          "summary": "Get the Well using osdu schema",
          "description": "Get the Well object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_well_osdu",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellid",
                "type": "string"
              },
              "name": "wellid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Well"
                  }
                }
              }
            },
            "404": {
              "description": "Well not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | Well v3"
          ],
          "summary": "Delete the well. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "del_osdu_well",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellid",
                "type": "string"
              },
              "name": "wellid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "204": {
              "description": "Record deleted successfully"
            },
            "404": {
              "description": "Well not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/wells/{wellid}/versions": {
        "get": {
          "tags": [
            "Wellbore DDMS | Well v3"
          ],
          "summary": "Get all versions of the Well",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_osdu_well_versions",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellid",
                "type": "string"
              },
              "name": "wellid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  }
                }
              }
            },
            "404": {
              "description": "Well not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/wells/{wellid}/versions/{version}": {
        "get": {
          "tags": [
            "Wellbore DDMS | Well v3"
          ],
          "summary": "Get the given version of the Well using OSDU well schema",
          "description": "\"Get the Well object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_osdu_well_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellid",
                "type": "string"
              },
              "name": "wellid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Well"
                  }
                }
              }
            },
            "404": {
              "description": "Well not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/wells": {
        "post": {
          "tags": [
            "Wellbore DDMS | Well v3"
          ],
          "summary": "Create or update the Wells using osdu schema",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_well_osdu",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Wells",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Well"
                  },
                  "example": [
                    {
                      "acl": {
                        "viewers": [
                          "data.default.viewers@{{datapartitionid}}.{{domain}}"
                        ],
                        "owners": [
                          "data.default.owners@{{datapartitionid}}.{{domain}}"
                        ]
                      },
                      "data": {
                        "FacilityName": "{{wellName}}",
                        "ExtensionProperties": {
                          "UWI": "20-000-00000-00"
                        }
                      },
                      "id": "{{datapartitionid}}:master-data--Well:{{wellId}}",
                      "kind": "osdu:wks:master-data--Well:1.0.0",
                      "legal": {
                        "legaltags": [
                          "{{legaltags}}"
                        ],
                        "otherRelevantDataCountries": [
                          "FR",
                          "US"
                        ],
                        "status": "compliant"
                      }
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Missing mandatory parameter or unknown parameter"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/welllogs/{welllogid}": {
        "get": {
          "tags": [
            "Wellbore DDMS | WellLog"
          ],
          "summary": "Get the WellLog using osdu schema",
          "description": "Get the WellLog object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_welllog_osdu",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Welllogid",
                "type": "string"
              },
              "name": "welllogid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WellLog"
                  }
                }
              }
            },
            "404": {
              "description": "WellLog not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "delete": {
          "tags": [
            "Wellbore DDMS | WellLog"
          ],
          "summary": "Delete the welllog. The API performs a logical deletion of the given record. No recursive delete for OSDU kinds",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "del_osdu_welllog",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Welllogid",
                "type": "string"
              },
              "name": "welllogid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "204": {
              "description": "Record deleted successfully"
            },
            "404": {
              "description": "WellLog not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/welllogs/{welllogid}/versions": {
        "get": {
          "tags": [
            "Wellbore DDMS | WellLog"
          ],
          "summary": "Get all versions of the WellLog",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_osdu_welllog_versions",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Welllogid",
                "type": "string"
              },
              "name": "welllogid",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/RecordVersions"
                  }
                }
              }
            },
            "404": {
              "description": "WellLog not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/welllogs/{welllogid}/versions/{version}": {
        "get": {
          "tags": [
            "Wellbore DDMS | WellLog"
          ],
          "summary": "Get the given version of the WellLog using OSDU welllog schema",
          "description": "\"Get the WellLog object using its **id**. <p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "get_osdu_welllog_version",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Welllogid",
                "type": "string"
              },
              "name": "welllogid",
              "in": "path"
            },
            {
              "required": true,
              "schema": {
                "title": "Version",
                "type": "integer"
              },
              "name": "version",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/WellLog"
                  }
                }
              }
            },
            "404": {
              "description": "WellLog not found"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/v3/welllogs": {
        "post": {
          "tags": [
            "Wellbore DDMS | WellLog"
          ],
          "summary": "Create or update the WellLogs using osdu schema",
          "description": "<p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "post_welllog_osdu",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "title": "Well logs",
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WellLog"
                  },
                  "example": [
                    {
                      "acl": {
                        "viewers": [
                          "data.default.viewers@{{datapartitionid}}.{{domain}}"
                        ],
                        "owners": [
                          "data.default.owners@{{datapartitionid}}.{{domain}}"
                        ]
                      },
                      "data": {
                        "Curves": [
                          {
                            "CurveID": "GR_ID",
                            "Mnemonic": "GR",
                            "CurveUnit": "{{datapartitionid}}:reference-data--UnitOfMeasure:m:",
                            "LogCurveFamilyID": "{{datapartitionid}}:reference-data--LogCurveFamily:GammaRay:"
                          },
                          {
                            "CurveID": "POR_ID",
                            "Mnemonic": "NPOR",
                            "CurveUnit": "{{datapartitionid}}:reference-data--UnitOfMeasure:m:",
                            "LogCurveFamilyID": "{{datapartitionid}}:reference-data--LogCurveFamily:NeutronPorosity:"
                          },
                          {
                            "CurveID": "Bulk Density",
                            "Mnemonic": "RHOB",
                            "CurveUnit": "{{datapartitionid}}:reference-data--UnitOfMeasure:m:",
                            "LogCurveFamilyID": "{{datapartitionid}}:reference-data--LogCurveFamily:BulkDensity:"
                          }
                        ],
                        "WellboreId": "{{datapartitionid}}:master-data--Wellbore:{{wellboreId}}:",
                        "CreationDateTime": "2013-03-22T11:16:03Z",
                        "VerticalMeasurement": {
                          "VerticalMeasurement": 2680.5,
                          "VerticalMeasurementPathID": "{{datapartitionid}}:reference-data--VerticalMeasurementPath:MD:",
                          "VerticalMeasurementUnitOfMeasureID": "{{datapartitionid}}:reference-data--UnitOfMeasure:ft:"
                        },
                        "TopMeasuredDepth": 12345.6,
                        "BottomMeasuredDepth": 13856.25,
                        "Name": "{{welllogName}}",
                        "ExtensionProperties": {
                          "step": {
                            "unitKey": "ft",
                            "value": 0.1
                          },
                          "dateModified": "2013-03-22T11:16:03Z"
                        }
                      },
                      "id": "{{datapartitionid}}:work-product-component--WellLog:{{welllogId}}",
                      "kind": "osdu:wks:work-product-component--WellLog:1.0.0",
                      "legal": {
                        "legaltags": [
                          "{{legaltags}}"
                        ],
                        "otherRelevantDataCountries": [
                          "US",
                          "FR"
                        ]
                      },
                      "meta": [
                        {
                          "kind": "Unit",
                          "name": "ft",
                          "persistableReference": "{\"scaleOffset\":{\"scale\":0.3048,\"offset\":0.0},\"symbol\":\"ft\",\"baseMeasurement\":{\"ancestry\":\"Length\",\"type\":\"UM\"},\"type\":\"USO\"}",
                          "propertyNames": [
                            "stop.value",
                            "elevationReference.elevationFromMsl.value",
                            "start.value",
                            "step.value",
                            "reference.unitKey"
                          ],
                          "propertyValues": [
                            "ft"
                          ]
                        },
                        {
                          "kind": "DateTime",
                          "name": "datetime",
                          "persistableReference": "{\"format\":\"yyyy-MM-ddTHH:mm:ssZ\",\"timeZone\":\"UTC\",\"type\":\"DTM\"}",
                          "propertyNames": [
                            "dateModified",
                            "dateCreated"
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "400": {
              "description": "Missing mandatory parameter or unknown parameter"
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_ddms_query_post",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/QueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query_with_cursor": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor",
          "description": "<p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_with_cursor_ddms_query_with_cursor_post",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/wellbores": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor",
          "description": "Get all Wellbores object.  <p>The wellbore kind is\n        *:wks:wellbore:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_wellbores_ddms_query_wellbores_post",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/wellbores/bydistance": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, CRS format: data.wellHeadWgs84",
          "description": "Get all Wellbores object in a specific area. <p>The specific area will be define by a circle\n            based on its center coordinates (lat, lon) and radius (meters) </p>\n            <p>The wellbore kind is *:wks:wellbore:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_wellbores_bydistance_ddms_query_wellbores_bydistance_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Latitude",
                "type": "number"
              },
              "name": "latitude",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Longitude",
                "type": "number"
              },
              "name": "longitude",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Distance",
                "type": "integer"
              },
              "name": "distance",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/wellbores/byboundingbox": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, CRS format: data.wellHeadWgs84",
          "description": "Get all Wellbores object in a specific area. <p>The specific area will be define by a square\n            based on its top left coordinates (lat, lon) and its bottom right coordinates (log, lat) </p>\n            <p>The wellbore kind is *:wks:wellbore:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_wellbores_byboundingbox_ddms_query_wellbores_byboundingbox_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Latitude Top Left",
                "type": "number"
              },
              "name": "latitude_top_left",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Longitude Top Left",
                "type": "number"
              },
              "name": "longitude_top_left",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Latitude Bottom Right",
                "type": "number"
              },
              "name": "latitude_bottom_right",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Longitude Bottom Right",
                "type": "number"
              },
              "name": "longitude_bottom_right",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/wellbores/bygeopolygon": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, CRS format: data.wellHeadWgs84",
          "description": "Get all Wellbores object in a specific area.  <p>The specific area will be define by a \n            polygon based on each of its coordinates (lat, lon) with a minimum of three</p>\n            <p>The wellbore kind is *:wks:wellbore:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_wellbores_bygeopolygon_ddms_query_wellbores_bygeopolygon_post",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Body_query_wellbores_bygeopolygon_ddms_query_wellbores_bygeopolygon_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/wellbore/{wellboreId}/logsets": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, search logSets by wellbore ID",
          "description": "Get all LogSets object using its relationship Wellbore ID.  <p>All LogSets linked to this\n            specific ID will be returned</p>\n            <p>The LogSet kind is *:wks:logSet:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_logsets_bywellbore_ddms_query_wellbore__wellboreId__logsets_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreId",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/wellbores/{wellboreAttribute}/logsets": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, search logSets by wellbore attribute",
          "description": "Get all LogSets object using a specific attribute of Wellbores.  <p>All LogSets linked to Wellbores\n            with this specific attribute will be returned</p>\n            <p>The LogSet kind is *:wks:logSet:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_logsets_bywellboreattribute_ddms_query_wellbores__wellboreAttribute__logsets_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreattribute",
                "type": "string"
              },
              "name": "wellboreAttribute",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, gets logs",
          "description": "Get all Logs object.  <p>The Logs kind is\n        *:wks:log:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_logs_ddms_query_logs_post",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/wellbore/{wellboreId}/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, search logs by wellbore ID",
          "description": "Get all Logs object using its relationship Wellbore ID.  <p>All Logs linked to this\n            specific ID will be returned</p>\n            <p>The Log kind is *:wks:log:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_logs_bywellbore_ddms_query_wellbore__wellboreId__logs_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreId",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/wellbores/{wellboreAttribute}/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, search logs by wellbore attribute",
          "description": "Get all Logs object using a specific attribute of Wellbores.  <p>All Logs linked to Wellbores\n            with this specific attribute will be returned</p>\n            <p>The Log kind is *:wks:log:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_logs_bywellboreattribute_ddms_query_wellbores__wellboreAttribute__logs_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreattribute",
                "type": "string"
              },
              "name": "wellboreAttribute",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/logset/{logsetId}/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, search logs by logSet ID",
          "description": "Get all Logs object using its relationship Logset ID.  <p>All Logs linked to this\n            specific ID will be returned</p>\n            <p>The Log kind is *:wks:log:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_logs_bylogset_ddms_query_logset__logsetId__logs_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logsetid",
                "type": "string"
              },
              "name": "logsetId",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/logsets/{logsetAttribute}/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, search logs by logSet attribute",
          "description": "Get all Logs object using a specific attribute of LogSets.  <p>All Logs linked to LogSets\n            with this specific attribute will be returned</p>\n            <p>The Log kind is *:wks:log:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_logs_bylogsetattribute_ddms_query_logsets__logsetAttribute__logs_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logsetattribute",
                "type": "string"
              },
              "name": "logsetAttribute",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/query/wellbore/{wellboreId}/markers": {
        "post": {
          "tags": [
            "Wellbore DDMS | Search"
          ],
          "summary": "Query with cursor, search markers by wellbore ID",
          "description": "Get all Markers object using its relationship Wellbore ID.  <p>All Markers linked to this\n            specific ID will be returned</p>\n            <p>The Marker kind is *:wks:marker:* returns all records directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "query_markers_bywellbore_ddms_query_wellbore__wellboreId__markers_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellboreid",
                "type": "string"
              },
              "name": "wellboreId",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/wellbores": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor",
          "description": "Get all Wellbores IDs object.  <p>The wellbore kind is\n        *:wks:wellbore:* returns all records IDs IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_wellbores_ddms_fastquery_wellbores_post",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/wellbores/bydistance": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, CRS format: data.wellHeadWgs84",
          "description": "Get all Wellbores IDs IDs objects in a specific area. <p>The specific area will be define by a circle\n            based on its center coordinates (lat, lon) and radius (meters) </p>\n            <p>The wellbore kind is *:wks:wellbore:* returns all records IDs IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_wellbores_bydistance_ddms_fastquery_wellbores_bydistance_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Latitude",
                "type": "number"
              },
              "name": "latitude",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Longitude",
                "type": "number"
              },
              "name": "longitude",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Distance",
                "type": "integer"
              },
              "name": "distance",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/wellbores/byboundingbox": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, CRS format: data.wellHeadWgs84",
          "description": "Get all Wellbores IDs objects in a specific area. <p>The specific area will be define by a square\n            based on its top left coordinates (lat, lon) and its bottom right coordinates (log, lat) </p>\n            <p>The wellbore kind is *:wks:wellbore:* returns all records IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_wellbores_byboundingbox_ddms_fastquery_wellbores_byboundingbox_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Latitude Top Left",
                "type": "number"
              },
              "name": "latitude_top_left",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Longitude Top Left",
                "type": "number"
              },
              "name": "longitude_top_left",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Latitude Bottom Right",
                "type": "number"
              },
              "name": "latitude_bottom_right",
              "in": "query"
            },
            {
              "required": true,
              "schema": {
                "title": "Longitude Bottom Right",
                "type": "number"
              },
              "name": "longitude_bottom_right",
              "in": "query"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/wellbores/bygeopolygon": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, CRS format: data.wellHeadWgs84",
          "description": "Get all Wellbores IDs objects in a specific area.  <p>The specific area will be define by a \n            polygon based on each of its coordinates (lat, lon) with a minimum of three</p>\n            <p>The wellbore kind is *:wks:wellbore:* returns all records IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_wellbores_bygeopolygon_ddms_fastquery_wellbores_bygeopolygon_post",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Body_fastquery_wellbores_bygeopolygon_ddms_fastquery_wellbores_bygeopolygon_post"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/wellbore/{wellbore_id}/logsets": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, search logSets IDs by wellbore ID",
          "description": "Get all LogSets IDs objects using its relationship Wellbore ID.  <p>All LogSets linked to this\n            specific ID will be returned</p>\n            <p>The LogSet kind is *:wks:logSet:* returns all records IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_logsets_bywellbore_ddms_fastquery_wellbore__wellbore_id__logsets_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellbore Id",
                "type": "string"
              },
              "name": "wellbore_id",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/wellbores/{wellbore_attribute}/logsets": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, search logSets IDs by wellbore attribute",
          "description": "Get all LogSets IDs objects using a specific attribute of Wellbores.  <p>All LogSets linked to Wellbores\n            with this specific attribute will be returned</p>\n            <p>The LogSet kind is *:wks:logSet:* returns all records IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_logsets_bywellboreattribute_ddms_fastquery_wellbores__wellbore_attribute__logsets_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellbore Attribute",
                "type": "string"
              },
              "name": "wellbore_attribute",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, gets logs",
          "description": "Get all Logs object.  <p>The Logs kind is\n        *:wks:log:* returns all records IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_logs_ddms_fastquery_logs_post",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/wellbore/{wellbore_id}/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, search logs IDs by wellbore ID",
          "description": "Get all Logs IDs objects using its relationship Wellbore ID.  <p>All Logs linked to this\n            specific ID will be returned</p>\n            <p>The Log kind is *:wks:log:* returns all records IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_logs_bywellbore_ddms_fastquery_wellbore__wellbore_id__logs_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellbore Id",
                "type": "string"
              },
              "name": "wellbore_id",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/wellbores/{wellbore_attribute}/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, search logs IDs by wellbore attribute",
          "description": "Get all Logs IDs objects using a specific attribute of Wellbores.  <p>All Logs linked to Wellbores\n            with this specific attribute will be returned</p>\n            <p>The Log kind is *:wks:log:* returns all records IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_logs_bywellboreattribute_ddms_fastquery_wellbores__wellbore_attribute__logs_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellbore Attribute",
                "type": "string"
              },
              "name": "wellbore_attribute",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/logset/{logset_id}/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, search logs IDs by logSet ID",
          "description": "Get all Logs IDs objects using its relationship Logset ID.  <p>All Logs linked to this\n            specific ID will be returned</p>\n            <p>The Log kind is *:wks:log:* returns all records IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_logs_bylogset_ddms_fastquery_logset__logset_id__logs_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logset Id",
                "type": "string"
              },
              "name": "logset_id",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/logsets/{logset_attribute}/logs": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, search logs IDs by logSet attribute",
          "description": "Get all Logs IDs objects using a specific attribute of LogSets.  <p>All Logs linked to LogSets\n            with this specific attribute will be returned</p>\n            <p>The Log kind is *:wks:log:* returns all records IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_logs_bylogsetattribute_ddms_fastquery_logsets__logset_attribute__logs_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Logset Attribute",
                "type": "string"
              },
              "name": "logset_attribute",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/ddms/fastquery/wellbore/{wellbore_id}/markers": {
        "post": {
          "tags": [
            "Wellbore DDMS | Fast-Search"
          ],
          "summary": "Query with cursor, search markers IDs by wellbore ID",
          "description": "Get all Markers IDs objects using its relationship Wellbore ID.  <p>All Markers linked to this\n            specific ID will be returned</p>\n            <p>The Marker kind is *:wks:marker:* returns all records IDs directly based on existing schemas</p><p>Required roles: 'users.datalake.viewers' or 'users.datalake.editors' or 'users.datalake.admins'. In addition, users must be a member of data groups to access the data.</p>",
          "operationId": "fastquery_markers_bywellbore_ddms_fastquery_wellbore__wellbore_id__markers_post",
          "parameters": [
            {
              "required": true,
              "schema": {
                "title": "Wellbore Id",
                "type": "string"
              },
              "name": "wellbore_id",
              "in": "path"
            },
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchQuery"
                }
              }
            }
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CursorQueryResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/log-recognition/family": {
        "post": {
          "tags": [
            "Wellbore DDMS | Log-recognition"
          ],
          "summary": "Recognize family and unit",
          "description": "Find the most probable family and unit using family assignment rule based catalogs. User defined catalog will have the priority.",
          "operationId": "family",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GuessRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/GuessResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/log-recognition/upload-catalog": {
        "put": {
          "tags": [
            "Wellbore DDMS | Log-recognition"
          ],
          "summary": "Upload user-defined catalog with family assignment rules",
          "description": "Upload user-defined catalog with family assignment rules for specific partition ID. \n            If there is an existing catalog, it will be replaced. It takes maximum of 5 mins to replace the existing catalog. \n            Hence, any call to retrieve the family should be made after 5 mins of uploading the catalog. <p>Required roles: 'users.datalake.editors' or 'users.datalake.admins'.</p>",
          "operationId": "upload-catalog",
          "parameters": [
            {
              "description": "identifier of the data partition to query",
              "required": false,
              "schema": {
                "title": "data partition id",
                "minLength": 1,
                "type": "string",
                "description": "identifier of the data partition to query"
              },
              "name": "data-partition-id",
              "in": "header"
            }
          ],
          "requestBody": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CatalogRecord"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Successful Response",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/CreateUpdateRecordsResponse"
                  }
                }
              }
            },
            "422": {
              "description": "Validation Error",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/HTTPValidationError"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/svcstatus": {
        "get": {
          "tags": [
            "Seismic DDMS | Know Service"
          ],
          "summary": "Get the status of the Seismic DDMS service",
          "description": "<ul><li>Return the seismic store service status.</li><li>Required roles: No Role Required</li></ul>",
          "operationId": "service-status",
          "responses": {
            "200": {
              "description": "service status",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string",
                    "example": "service OK"
                  }
                }
              }
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/tenant/{tenantid}": {
        "get": {
          "tags": [
            "Seismic DDMS | Tenant"
          ],
          "summary": "Retrieve the tenant metadata",
          "description": "<ul><li>Return the tenant metadata.</li><li>Required roles: seistore.system.admin</li></ul>",
          "operationId": "tenant-get",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Retrieved subproject metadata successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Tenant"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Seismic DDMS | Tenant"
          ],
          "summary": "Register a seismic-dms tenant",
          "description": "<ul><li>Register a seismic-dms tenant in a data partition.</li><li>Required roles: seistore.system.admin</li></ul>",
          "operationId": "tenant-create",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TenantCreateBody"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Creation of the tenant was successful.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Tenant"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            },
            "409": {
              "description": "Conflict",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "request body"
        }
      },
      "/tenant/sdpath": {
        "get": {
          "tags": [
            "Seismic DDMS | Tenant"
          ],
          "summary": "Retrieve the tenant seismic store path",
          "description": "<ul><li>Return the seistore path to a tenant associated with the data partition.</li><li>Required roles: No Role Required</li></ul>",
          "operationId": "tenant-sdpath",
          "parameters": [
            {
              "name": "datapartition",
              "in": "query",
              "description": "Tenant identifier",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Seismic store path to the tenant retrieved successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "string",
                    "example": "sd://tenant01"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/app": {
        "get": {
          "tags": [
            "Seismic DDMS | Apps"
          ],
          "summary": "Retrieve the list of registered applications",
          "description": "<ul><li>Retrieve the list of the registered application in seismic store.</li><li>Required roles: users.datalake.admin</li></ul>",
          "operationId": "app-list",
          "parameters": [
            {
              "name": "sdpath",
              "in": "query",
              "description": "Seismic store tenant path, sd://tenant",
              "required": true,
              "schema": {
                "type": "string",
                "default": "sd://common"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Retrieved list of all the registered applications successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "example": [
                      "app01@email",
                      "app02@email"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Seismic DDMS | Apps"
          ],
          "summary": "Register a new application",
          "description": "<ul><li>Register a new application in seismic store.</li><li>Required roles: users.datalake.admin</li></ul>",
          "operationId": "app-register",
          "parameters": [
            {
              "name": "email",
              "in": "query",
              "description": "Service account email of the application",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sdpath",
              "in": "query",
              "description": "Seismic store tenant path, sd://tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Registration of the application was successful.",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/app/trusted": {
        "get": {
          "tags": [
            "Seismic DDMS | Apps"
          ],
          "summary": "List the trusted applications in a seismic store tenant",
          "description": "<ul><li>Return the list of the trusted application in seismic store tenant.</li><li>Required roles: users.datalake.admin</li></ul>",
          "operationId": "trustedapp-list",
          "parameters": [
            {
              "name": "sdpath",
              "in": "query",
              "description": "Seismic store tenant path in the format sd://tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Retrieved the list of all the trusted applications in the tenant",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "example": [
                      "app01@email",
                      "app02@email"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Seismic DDMS | Apps"
          ],
          "summary": "Set a registered application as a trusted application",
          "description": "<ul><li>Set a registered application as a trusted application in seismic store.</li><li>Required roles: users.datalake.admin</li></ul>",
          "operationId": "trustedapp-register",
          "parameters": [
            {
              "name": "email",
              "in": "query",
              "description": "Service account email of the application",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sdpath",
              "in": "query",
              "description": "Seismic store tenant path, sd://tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Marking the application as a trusted application was successful.",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/subproject/tenant/{tenantid}/subproject/{subprojectid}": {
        "get": {
          "tags": [
            "Seismic DDMS | SubProject"
          ],
          "summary": "Retrieve the subproject metadata",
          "description": "<ul><li>Return the metadata for a requested sub-project.</li><li>Required roles: subproject.admin</li></ul>",
          "operationId": "subproject-get",
          "parameters": [
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Retrieved subproject metadata successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubProject"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Seismic DDMS | SubProject"
          ],
          "summary": "Create a new subproject",
          "description": "<ul><li>Creates a new sub-project resource in seismic store.</li><li>Required roles: users.datalake.admin</li></ul>",
          "operationId": "subproject-create",
          "parameters": [
            {
              "name": "ltag",
              "in": "header",
              "description": "Legal tag of the datapartition/tenant",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubProjectCreateBody"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "Creation of the subproject is successful.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubProject"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            },
            "409": {
              "description": "Conflict",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "request body"
        },
        "delete": {
          "tags": [
            "Seismic DDMS | SubProject"
          ],
          "summary": "Delete a subproject",
          "description": "<ul><li>Delete a subproject in seismic store.</li><li>Required roles: subproject.admin</li></ul>",
          "operationId": "subproject-delete",
          "parameters": [
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Deletion of the subproject completed",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "patch": {
          "tags": [
            "Seismic DDMS | SubProject"
          ],
          "summary": "Patch a subproject metadata",
          "description": "<ul><li>Patch a subproject metadata in seismic store.</li><li>Required roles: subproject.admin</li></ul>",
          "operationId": "subproject-patch",
          "parameters": [
            {
              "name": "ltag",
              "in": "header",
              "description": "Legal tag of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "recursive",
              "in": "query",
              "description": "True if the legal tags of all datasets in a subproject needs to be updated",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Updated subproject metadata successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/SubProject"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/subproject/tenant/{tenantid}": {
        "get": {
          "tags": [
            "Seismic DDMS | SubProject"
          ],
          "summary": "List subprojects in a tenant",
          "description": "<ul><li>Return the list of sub-project in a tenant.</li><li>Required roles: users.datalake.admin</li></ul>",
          "operationId": "sub-project-list",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Retrieved the list of subprojects in the tenant successfully.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/SubProject"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/dataset/tenant/{tenantid}/subproject/{subprojectid}/dataset/{datasetid}": {
        "get": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Retrieve a dataset",
          "description": "<ul><li>Return the dataset metadata from seismic store.</li><li>Required roles: subproject.admin, subproject.editor, subproject.viewer</li></ul>",
          "operationId": "dataset-get",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "Hierarchical path of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "datasetid",
              "in": "path",
              "description": "Name of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "seismicmeta",
              "in": "query",
              "description": "Include the seismic storage metadata record if it exists",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Metadata of the dataset",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "post": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Register a new dataset",
          "description": "<ul><li>Register a new dataset in seismic store.</li><li>Required roles: subproject.admin, subproject.editor</li></ul>",
          "operationId": "dataset-register",
          "parameters": [
            {
              "name": "ltag",
              "in": "header",
              "description": "Legal tag of the dataset",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "Hierarchical path of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "datasetid",
              "in": "path",
              "description": "Name of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetRegisterBody"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Registered dataset metadata",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            },
            "409": {
              "description": "Conflict",
              "content": {}
            },
            "423": {
              "description": "Locked. The error message contains the Reason in the form <b>[RCODE:REASON(2-char-code)TTL(sec-number)]</b>. Possible Reasons code are: <ul><li>WL(Write Locked)</li><li>RL(Read Locked)</li><li>CL(Cannot be Locked)</li><li>UL(Cannot be Unlocked)</ul>\nFor example the reason code <b>[RCODE:RL3600]</b> indicates the dataset is Read Locked with a TTL of 3600sec",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "request body"
        },
        "delete": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Delete a dataset",
          "description": "<ul><li>Delete a dataset in seismic store.</li><li>Required roles: subproject.admin, subproject.editor</li></ul>",
          "operationId": "dataset-delete",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "Hierarchical path of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "datasetid",
              "in": "path",
              "description": "Name of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The resource was deleted successfully.",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "patch": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Patch the dataset metadata",
          "description": "<ul><li>Update the dataset meta information in seismic store or close(unlock) the dataset. If the endpoint is used without the close parameter, at least one body field is required or the endpoint will return an error.</li><li>Required roles: subproject.admin, subproject.editor</li><li>Patchable fields: <ul><li><b>dataset_new_name:</b> new name to use for the dataset (rename)</li><li><b>filemetadata:</b> this is a seistore specific field and describe how the physical data are stored in the cloud storage system (GCS/AzureContainer etc etc). This metadata is mainly used by client libraries to correctly reconstruct the dataset. For example you can store a dataset as truncated in multiple objects of 64MB each, name them from 0 to N and save the filemetadata = “{nOboject: N, totalSize: 1024, objsize: 64, sizeUnit: MB }”.</li><li><b>last_modified_date:</b> mark this field as true to update the dataset last modified date</li><li><b>gtags:</b> upsert tags to an existing dataset metadata. If the dataset metadata already has gtags, then new gtags are appended to this list.</li><li><b>ltag:</b> update the existing legalTag value</b></li><li><b>readonly:</b> update the dataset mode to readonly(true) or to read/write(false)</li><li><b>seismicmeta:</b> update the DataEcosystem storage metadata (refer to the DataEcosystem storage service tutorial for more help)</b></li></ul></li></ul>",
          "operationId": "dataset-patch",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "Hierarchical path of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "datasetid",
              "in": "path",
              "description": "Name of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "close",
              "in": "query",
              "description": "Non null sbit value of the dataset. Using this value here will close the dataset",
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetPatch"
                }
              }
            },
            "required": false
          },
          "responses": {
            "200": {
              "description": "Metadata of the patched dataset",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            },
            "409": {
              "description": "Conflict",
              "content": {}
            },
            "423": {
              "description": "Locked. The error message contains the Reason in the form <b>[RCODE:REASON(2-char-code)TTL(sec-number)]</b>. Possible Reasons code are: <ul><li>WL(Write Locked)</li><li>RL(Read Locked)</li><li>CL(Cannot be Locked)</li><li>UL(Cannot be Unlocked)</ul>\nFor example the reason code <b>[RCODE:RL3600]</b> indicates the dataset is Read Locked with a TTL of 3600sec",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "request body"
        }
      },
      "/dataset/tenant/{tenantid}/subproject/{subprojectid}/dataset/{datasetid}/lock": {
        "put": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Acquire a lock for a dataset id",
          "description": "<ul><li>Open a dataset for read or write and lock its state.</li><li>Required roles open lock for write: subproject.admin, subproject.editor</li><li>Required roles open lock for read: subproject.admin, subproject.editor, subproject.viewer</ul>",
          "operationId": "dataset-lock",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "Hierarchical path of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "datasetid",
              "in": "path",
              "description": "Name of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "openmode",
              "in": "query",
              "description": "Type of the lock which can be set to 'read' (default) or 'write'",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "wid",
              "in": "query",
              "description": "Session identifier issued for a previous write lock acquisition operation",
              "schema": {
                "type": "number"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Acquired a lock and the return value is the dataset metadata with session identifier stored in 'sbit' attribute",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/Dataset"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            },
            "423": {
              "description": "Locked. The error message contains the Reason in the form <b>[RCODE:REASON(2-char-code)TTL(sec-number)]</b>. Possible Reasons code are: <ul><li>WL(Write Locked)</li><li>RL(Read Locked)</li><li>CL(Cannot be Locked)</li><li>UL(Cannot be Unlocked)</ul>\nFor example the reason code <b>[RCODE:RL3600]</b> indicates the dataset is Read Locked with a TTL of 3600sec",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/dataset/tenant/{tenantid}/subproject/{subprojectid}/dataset/{datasetid}/unlock": {
        "put": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Remove the lock associated with a dataset id.",
          "description": "<ul><li>Removes the lock for a dataset id.</li><li>Required roles: subproject.admin</li></ul>",
          "operationId": "dataset-lock-rm",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "Hierarchical path for the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "datasetid",
              "in": "path",
              "description": "Name of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Removed the lock value associated with dataset id",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            },
            "423": {
              "description": "Locked. The error message contains the Reason in the form <b>[RCODE:REASON(2-char-code)TTL(sec-number)]</b>. Possible Reasons code are: <ul><li>WL(Write Locked)</li><li>RL(Read Locked)</li><li>CL(Cannot be Locked)</li><li>UL(Cannot be Unlocked)</ul>\nFor example the reason code <b>[RCODE:RL3600]</b> indicates the dataset is Read Locked with a TTL of 3600sec",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/dataset/tenant/{tenantid}/subproject/{subprojectid}/dataset/{datasetid}/permission": {
        "get": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Retrieve the access permissions of a user on a dataset id.",
          "description": "<ul><li>Retrieve the access permission of a user on a dataset.</li><li>Required roles: subproject.admin, subproject.editor, subproject.viewer</li></ul>",
          "operationId": "dataset-permission",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "Hierarchical path for the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "datasetid",
              "in": "path",
              "description": "Name of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "User access permission on the dataset.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetPermission"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/dataset/tenant/{tenantid}/subproject/{subprojectid}/dataset/{datasetid}/ctagcheck": {
        "get": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Validate if a dataset ctag matches the pre-existing ctag in metadata catalog.",
          "description": "<ul><li>Check if the provided dataset cTag match the one stored in the metadata catalog.</li><li>Required roles: subproject.admin, subproject.editor, subproject.viewer</li></ul>",
          "operationId": "ctag-check",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "Hierarchical path of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "datasetid",
              "in": "path",
              "description": "Name of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "ctag",
              "in": "query",
              "description": "Ctag to be validated",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Return true if the ctag is valid or false if it is invalid",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "boolean",
                    "example": true
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/dataset/tenant/{tenantid}/subproject/{subprojectid}/dataset/{datasetid}/gtags": {
        "put": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Upsert tags to a dataset",
          "description": "<ul><li>Upsert tags to an existing dataset metadata. If the dataset metadata already has gtags, then  new gtags are appended to this list.</li><li>Required roles: subproject.admin, subproject.editor</li></ul>",
          "operationId": "add-tag",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "Hierarchical path of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "datasetid",
              "in": "path",
              "description": "Name of the dataset",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "gtag",
              "in": "query",
              "description": "Gtags array list",
              "required": true,
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "default": "tag1"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Gtags were upserted to the dataset metadata.",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/dataset/tenant/{tenantid}/subproject/{subprojectid}/readdsdirfulllist": {
        "get": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "content list",
          "description": "<ul><li>List datasets and sub-directories for a directory path.</li><li>Required roles: subproject.admin, subproject.editor, subproject.viewer</li></ul>",
          "operationId": "dataset-read-directory",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "The tenant project name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "The sub-project name",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "The hierarchy path",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The list of datasets and directories in the requested directory path.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/DatasetAndDirectories"
                  }
                }
              }
            }
          }
        }
      },
      "/dataset/tenant/{tenantid}/subproject/{subprojectid}": {
        "get": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Get the list of datasets in a subproject.",
          "description": "<ul><li>Return the list of datasets in a sub-project.If gtags are in the request parameters, then get only those datasets that have the exact list of gtags.</li><li>Required roles: subproject.admin, subproject.editor, subproject.viewer</li></ul>",
          "operationId": "dataset-list",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "gtag",
              "in": "query",
              "description": "Gtags associated with dataset metadata",
              "style": "form",
              "explode": true,
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The list of all datasets in the subproject if no gtags are in the request parameters. If gtags exist in the request parameters, then datasets that have the same list of gtags.",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Dataset"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/dataset/tenant/{tenantid}/subproject/{subprojectid}/exist": {
        "post": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Check if list of datasets exists in the subproject.",
          "description": "<ul><li>Check if the dataset exists.</li><li>Required roles: subproject.admin, subproject.editor, subproject.viewer</li></ul>",
          "operationId": "dataset-exist",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetCheckList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "A list of boolean values for all the input datasets in the request body. If a value is true, then corresponding dataset exists and if it is false, then the dataset does not exist",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "example": [
                      true,
                      false
                    ],
                    "items": {
                      "type": "boolean"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "request body"
        }
      },
      "/dataset/tenant/{tenantid}/subproject/{subprojectid}/sizes": {
        "post": {
          "tags": [
            "Seismic DDMS | Dataset"
          ],
          "summary": "Retrieve the size of datasets",
          "description": "<ul><li>Return a list with the sizes of the requested datasets.</li><li>Required roles: subproject.admin, subproject.editor, subproject.viewer</li></ul>",
          "operationId": "dataset-sizes",
          "parameters": [
            {
              "name": "tenantid",
              "in": "path",
              "description": "Name of the tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "subprojectid",
              "in": "path",
              "description": "Name of the subproject",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "requestBody": {
            "description": "Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetCheckList"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "The sizes list of all the datasets. If the dataset does not exist, the size would be -1",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "example": [
                      1024,
                      -1
                    ],
                    "items": {
                      "type": "number"
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "request body"
        }
      },
      "/utility/ls": {
        "get": {
          "tags": [
            "Seismic DDMS | Utility"
          ],
          "summary": "Retrieve list of datasets and sub-directories inside a seismic store path",
          "description": "<ul><li>Return the list of datasets and sub-directories of a seismic store path.</li><li>Required roles: subproject.admin, subproject.editor, subproject.viewer</li></ul>",
          "operationId": "ls",
          "parameters": [
            {
              "name": "sdpath",
              "in": "query",
              "description": "Seismic store path, sd://tenant/sub-project/path",
              "required": true,
              "schema": {
                "type": "string",
                "default": "sd://common/carbon/a/b/c"
              }
            },
            {
              "name": "wmode",
              "in": "query",
              "description": "Working mode, dirs or datasets or undefined for both",
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "limit",
              "in": "query",
              "description": "Limits total number of datasets to be returned",
              "schema": {
                "type": "number"
              }
            },
            {
              "name": "cursor",
              "in": "query",
              "description": "Pagination token - this query parameter can be omitted on first call",
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Seismic store path content",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LsDatasets"
                  }
                }
              }
            },
            "201": {
              "description": "Paginated seismic store path content - For documentation purpose if limit or cursor is given status code here is 200",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/LsPaginatedDatasets"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/utility/cp": {
        "post": {
          "tags": [
            "Seismic DDMS | Utility"
          ],
          "summary": "Copy dataset",
          "description": "<ul><li>Copy a seismic store dataset. The source and destination dataset must be in the same sub-project.</li><li>Required roles: subproject.admin, subproject.editor</li></ul>",
          "operationId": "cp",
          "parameters": [
            {
              "name": "sdpath_from",
              "in": "query",
              "description": "Seismic store source dataset path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "sdpath_to",
              "in": "query",
              "description": "Seismic store destination dataset path",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "lock",
              "in": "query",
              "description": "Lock source and destination while copying",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Copy operation succeeded",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            },
            "409": {
              "description": "Conflict",
              "content": {}
            },
            "423": {
              "description": "Locked. The error message contains the Reason in the form <b>[RCODE:REASON(2-char-code)TTL(sec-number)]</b>. Possible Reasons code are: <ul><li>WL(Write Locked)</li><li>RL(Read Locked)</li><li>CL(Cannot be Locked)</li><li>UL(Cannot be Unlocked)</ul>\nFor example the reason code <b>[RCODE:RL3600]</b> indicates the dataset is Read Locked with a TTL of 3600sec",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/utility/gcs-access-token": {
        "get": {
          "tags": [
            "Seismic DDMS | Utility"
          ],
          "summary": "Generate a GCS access token",
          "description": "<ul><li>Generate a GCS access token for a specified seismic store resource. The source and destination dataset must be in the same sub-project.</li><li>Required roles: subproject.admin, subproject.editor, subproject.viewer</li></ul>",
          "operationId": "gcs-access-token",
          "parameters": [
            {
              "name": "sdpath",
              "in": "query",
              "description": "Seismic store path in the format sd://tenant/sub-project",
              "required": true,
              "schema": {
                "type": "string",
                "default": "sd://common/carbon"
              }
            },
            {
              "name": "readonly",
              "in": "query",
              "description": "Readonly access, true(default) or false",
              "schema": {
                "type": "boolean"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "The GCS access token",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/AccessToken"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        }
      },
      "/user": {
        "get": {
          "tags": [
            "Seismic DDMS | Users"
          ],
          "summary": "List users in subproject's role based authorization groups",
          "description": "<ul><li>List users in subproject's role based authorization groups.</li><li>Required roles: subproject.admin</li></ul>",
          "operationId": "user-list",
          "parameters": [
            {
              "name": "sdpath",
              "in": "query",
              "description": "Seismic store path, sd://tenant/sub-project",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Retrieved sub-project users in admin, viewer, editor groups successfully",
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "example": [
                      [
                        "userA@email",
                        "admin"
                      ],
                      [
                        "userB@email",
                        "editor"
                      ]
                    ],
                    "items": {
                      "type": "array",
                      "example": [
                        "userA@email",
                        "admin"
                      ],
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ]
        },
        "put": {
          "tags": [
            "Seismic DDMS | Users"
          ],
          "summary": "Add an user to a seismic store subproject authorization group",
          "description": "<ul><li>Add an user to a subproject authorization group.</li><li>Required roles: subproject.admin</li></ul>",
          "operationId": "user-add",
          "requestBody": {
            "description": "Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAddRequest"
                }
              }
            },
            "required": true
          },
          "responses": {
            "200": {
              "description": "User was successfully added to a sub-project authorization group.",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "request body"
        },
        "delete": {
          "tags": [
            "Seismic DDMS | Users"
          ],
          "summary": "Remove user from subproject's role based authorization groups",
          "description": "<ul><li>Remove user from subproject's role based authorization groups.</li><li>Required roles: subproject.admin</li></ul>",
          "operationId": "user-rm",
          "parameters": [
            {
              "name": "email",
              "in": "query",
              "description": "Seismic store path, sd://tenant/sub-project",
              "required": true,
              "schema": {
                "type": "string"
              }
            },
            {
              "name": "path",
              "in": "query",
              "description": "Seismic store path, sd://tenant/sub-project",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Deletion of user email in subproject's role based authorization groups completed.\"",
              "content": {}
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          },
          "security": [
            {
              "JWT": [
                "global"
              ]
            }
          ],
          "x-codegen-request-body-name": "request body"
        }
      },
      "/user/roles": {
        "get": {
          "tags": [
            "Seismic DDMS | Users"
          ],
          "summary": "Retrieve user role in all subprojects of the tenant",
          "description": "<ul><li>Retrieve user role in all subprojects of the tenant.</li><li>Required roles: No Role Required</li></ul>",
          "operationId": "user-roles",
          "parameters": [
            {
              "name": "sdpath",
              "in": "query",
              "description": "Seismic store tenant path, sd://tenant",
              "required": true,
              "schema": {
                "type": "string"
              }
            }
          ],
          "responses": {
            "200": {
              "description": "Retrieved user roles in all subprojects of the tenant.",
              "content": {
                "application/json": {
                  "schema": {
                    "$ref": "#/components/schemas/UserRoles"
                  }
                }
              }
            },
            "400": {
              "description": "Bad request",
              "content": {}
            },
            "401": {
              "description": "Unauthorized",
              "content": {}
            },
            "403": {
              "description": "Forbidden",
              "content": {}
            },
            "404": {
              "description": "Not found",
              "content": {}
            }
          }
        }
      }
    },
    "components": {
      "schemas": {
        "AboutResponse": {
          "title": "AboutResponse",
          "type": "object",
          "properties": {
            "service": {
              "title": "Service",
              "type": "string"
            },
            "version": {
              "title": "Version",
              "type": "string"
            },
            "buildNumber": {
              "title": "Buildnumber",
              "type": "string"
            },
            "cloudEnvironment": {
              "title": "Cloudenvironment",
              "type": "string"
            }
          }
        },
        "successResponse": {
          "required": [
            "message"
          ],
          "type": "object",
          "properties": {
            "message": {
              "type": "string",
              "description": "Success response message"
            }
          }
        },
        "CreateGroup": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Group description"
            },
            "name": {
              "type": "string",
              "description": "Group name"
            }
          }
        },
        "SrnFileData": {
          "type": "object",
          "properties": {
            "connectionString": {
              "type": "string",
              "description": "The URL to connect to the stored object"
            },
            "kind": {
              "type": "string",
              "description": "The type of data object"
            },
            "signedUrl": {
              "type": "string",
              "description": "The signed URL to access the stored object"
            },
            "unsignedUrl": {
              "type": "string",
              "description": "The unsigned URL to access the stored object"
            }
          }
        },
        "GroupInfo": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Group information"
            },
            "email": {
              "type": "string",
              "description": "Group creator email "
            },
            "groupEmail": {
              "type": "string",
              "description": "Group email"
            },
            "name": {
              "type": "string",
              "description": "Group name"
            }
          }
        },
        "Groups": {
          "type": "object",
          "properties": {
            "desId": {
              "type": "string",
              "description": "The group id"
            },
            "groupNames": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Group names"
            },
            "groups": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GroupInfo"
              },
              "description": "Group information"
            },
            "memberEmail": {
              "type": "string",
              "description": "Group member emails"
            }
          }
        },
        "MemberInfo": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Member email"
            }
          }
        },
        "Members": {
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string",
              "description": "The cursor position of member"
            },
            "members": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MemberInfo"
              }
            }
          }
        },
        "UrlSigningRequest": {
          "type": "object",
          "properties": {
            "srns": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "State registration number for resources"
            }
          }
        },
        "UrlSigningResponse": {
          "type": "object",
          "properties": {
            "processed": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/SrnFileData"
              }
            },
            "unprocessed": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Unprocessed response"
            }
          }
        },
        "InvalidTagWithReason": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Tag name"
            },
            "reason": {
              "type": "string",
              "description": "Reason for the response"
            }
          }
        },
        "InvalidTagsWithReason": {
          "type": "object",
          "properties": {
            "invalidLegalTags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/InvalidTagWithReason"
              }
            }
          }
        },
        "LegalTagDto": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string",
              "description": "Legal tag description"
            },
            "name": {
              "type": "string",
              "description": "Legal tag name"
            },
            "properties": {
              "$ref": "#/components/schemas/Properties"
            }
          }
        },
        "LegalTagDtos": {
          "type": "object",
          "properties": {
            "legalTags": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LegalTagDto"
              }
            }
          }
        },
        "Properties": {
          "type": "object",
          "properties": {
            "contractId": {
              "type": "string",
              "description": "The contract identity"
            },
            "countryOfOrigin": {
              "type": "array",
              "description": "The country of origin",
              "items": {
                "type": "string"
              }
            },
            "dataType": {
              "type": "string",
              "description": "The type of data"
            },
            "expirationDate": {
              "type": "string",
              "description": "The expiration date"
            },
            "exportClassification": {
              "type": "string",
              "description": "The export class"
            },
            "originator": {
              "type": "string",
              "description": "The originator"
            },
            "personalData": {
              "type": "string",
              "description": "Personal data"
            },
            "securityClassification": {
              "type": "string",
              "description": "Security class"
            }
          }
        },
        "ReadablePropertyValues": {
          "type": "object",
          "properties": {
            "countriesOfOrigin": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "The country of origin"
            },
            "dataTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The type of datas"
            },
            "exportClassificationControlNumbers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The export class number"
            },
            "otherRelevantDataCountries": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "The other relevant countries related with data"
            },
            "personalDataTypes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Personal data types"
            },
            "securityClassifications": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Security classes"
            }
          }
        },
        "RequestLegalTags": {
          "type": "object",
          "properties": {
            "names": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Legal tag names"
            }
          }
        },
        "ResponseEntity": {
          "type": "object",
          "properties": {
            "body": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Legal tag name"
                },
                "contractId": {
                  "type": "string",
                  "description": "The contract identity"
                },
                "expirationDate": {
                  "type": "string",
                  "description": "The expiration date"
                }
              }
            },
            "statusCode": {
              "type": "string",
              "description": "The response status code",
              "enum": [
                "100 CONTINUE",
                "101 SWITCHING_PROTOCOLS",
                "102 PROCESSING",
                "103 CHECKPOINT",
                "200 OK",
                "201 CREATED",
                "202 ACCEPTED",
                "203 NON_AUTHORITATIVE_INFORMATION",
                "204 NO_CONTENT",
                "205 RESET_CONTENT",
                "206 PARTIAL_CONTENT",
                "207 MULTI_STATUS",
                "208 ALREADY_REPORTED",
                "226 IM_USED",
                "300 MULTIPLE_CHOICES",
                "301 MOVED_PERMANENTLY",
                "302 FOUND",
                "302 MOVED_TEMPORARILY",
                "303 SEE_OTHER",
                "304 NOT_MODIFIED",
                "305 USE_PROXY",
                "307 TEMPORARY_REDIRECT",
                "308 PERMANENT_REDIRECT",
                "400 BAD_REQUEST",
                "401 UNAUTHORIZED",
                "402 PAYMENT_REQUIRED",
                "403 FORBIDDEN",
                "404 NOT_FOUND",
                "405 METHOD_NOT_ALLOWED",
                "406 NOT_ACCEPTABLE",
                "407 PROXY_AUTHENTICATION_REQUIRED",
                "408 REQUEST_TIMEOUT",
                "409 CONFLICT",
                "410 GONE",
                "411 LENGTH_REQUIRED",
                "412 PRECONDITION_FAILED",
                "413 PAYLOAD_TOO_LARGE",
                "413 REQUEST_ENTITY_TOO_LARGE",
                "414 URI_TOO_LONG",
                "414 REQUEST_URI_TOO_LONG",
                "415 UNSUPPORTED_MEDIA_TYPE",
                "416 REQUESTED_RANGE_NOT_SATISFIABLE",
                "417 EXPECTATION_FAILED",
                "418 I_AM_A_TEAPOT",
                "419 INSUFFICIENT_SPACE_ON_RESOURCE",
                "420 METHOD_FAILURE",
                "421 DESTINATION_LOCKED",
                "422 UNPROCESSABLE_ENTITY",
                "423 LOCKED",
                "424 FAILED_DEPENDENCY",
                "426 UPGRADE_REQUIRED",
                "428 PRECONDITION_REQUIRED",
                "429 TOO_MANY_REQUESTS",
                "431 REQUEST_HEADER_FIELDS_TOO_LARGE",
                "451 UNAVAILABLE_FOR_LEGAL_REASONS",
                "500 INTERNAL_SERVER_ERROR",
                "501 NOT_IMPLEMENTED",
                "502 BAD_GATEWAY",
                "503 SERVICE_UNAVAILABLE",
                "504 GATEWAY_TIMEOUT",
                "505 HTTP_VERSION_NOT_SUPPORTED",
                "506 VARIANT_ALSO_NEGOTIATES",
                "507 INSUFFICIENT_STORAGE",
                "508 LOOP_DETECTED",
                "509 BANDWIDTH_LIMIT_EXCEEDED",
                "510 NOT_EXTENDED",
                "511 NETWORK_AUTHENTICATION_REQUIRED"
              ]
            },
            "statusCodeValue": {
              "type": "integer",
              "format": "int32",
              "description": "The status code value"
            }
          }
        },
        "UpdateLegalTag": {
          "type": "object",
          "properties": {
            "contractId": {
              "type": "string",
              "description": "The contract identity"
            },
            "description": {
              "type": "string",
              "description": "The legal tag description"
            },
            "expirationDate": {
              "type": "string",
              "format": "date",
              "description": "The expiration date"
            },
            "name": {
              "type": "string",
              "description": "Legal tag name"
            }
          }
        },
        "SchemaIdentity": {
          "type": "object",
          "properties": {
            "authority": {
              "type": "string",
              "description": "Schema authority"
            },
            "entityType": {
              "type": "string",
              "description": "The type of entity"
            },
            "id": {
              "type": "string",
              "description": "The schema identifier"
            },
            "schemaVersionMajor": {
              "type": "integer",
              "format": "int64",
              "description": "The schema version major"
            },
            "schemaVersionMinor": {
              "type": "integer",
              "format": "int64",
              "description": "The schema version minor"
            },
            "schemaVersionPatch": {
              "type": "integer",
              "format": "int64",
              "description": "The schema patch version"
            },
            "source": {
              "type": "string",
              "description": "The schema source"
            }
          }
        },
        "SchemaInfo": {
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string",
              "description": "The schema creation authority"
            },
            "dateCreated": {
              "type": "string",
              "format": "date-time",
              "description": "The schema creation date"
            },
            "schemaIdentity": {
              "$ref": "#/components/schemas/SchemaIdentity"
            },
            "scope": {
              "type": "string",
              "enum": [
                "INTERNAL",
                "SHARED"
              ],
              "description": "The schema scope 'Shared' or 'Internal'"
            },
            "status": {
              "type": "string",
              "enum": [
                "PUBLISHED",
                "OBSOLETE",
                "DEVELOPMENT"
              ],
              "description": "The schema status as in 'Published','Obsolete' or 'Development'"
            },
            "supersededBy": {
              "$ref": "#/components/schemas/SchemaIdentity"
            }
          }
        },
        "SchemaInfoResponse": {
          "type": "object",
          "properties": {
            "count": {
              "type": "integer",
              "format": "int32",
              "description": "The schema element count"
            },
            "offset": {
              "type": "integer",
              "format": "int32",
              "description": "The schema offset value"
            },
            "schemaInfos": {
              "type": "array",
              "description": "The schema information",
              "items": {
                "$ref": "#/components/schemas/SchemaInfo"
              }
            },
            "totalCount": {
              "type": "integer",
              "format": "int32",
              "description": "The schema total count"
            }
          }
        },
        "SchemaRequest": {
          "type": "object",
          "properties": {
            "schema": {
              "type": "object",
              "description": "The structure of data",
              "properties": {}
            },
            "schemaInfo": {
              "$ref": "#/components/schemas/SchemaInfo",
              "description": "The schema information"
            }
          }
        },
        "AppError": {
          "type": "object",
          "properties": {
            "code": {
              "type": "integer",
              "format": "int32",
              "description": "The application error code"
            },
            "message": {
              "type": "string",
              "description": "The application error message"
            },
            "reason": {
              "type": "string",
              "description": "The application error reason"
            }
          }
        },
        "ByBoundingBox": {
          "type": "object",
          "properties": {
            "bottomRight": {
              "$ref": "#/components/schemas/Point",
              "description": "The botton right coordinates"
            },
            "topLeft": {
              "$ref": "#/components/schemas/Point",
              "description": "The top left coordinates"
            }
          }
        },
        "ByDistance": {
          "type": "object",
          "properties": {
            "distance": {
              "type": "number",
              "description": "The radius of the circle centered on the specified location. Points which fall into this circle are considered to be matches.",
              "format": "double"
            },
            "point": {
              "$ref": "#/components/schemas/Point",
              "description": "The point coordinates"
            }
          }
        },
        "ByGeoPolygon": {
          "type": "object",
          "properties": {
            "points": {
              "type": "array",
              "description": "Polygon defined by a set of points",
              "items": {
                "$ref": "#/components/schemas/Point"
              }
            }
          }
        },
        "CcsQueryRequest": {
          "required": [
            "kind"
          ],
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "description": "kind to search"
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of results to return from the given offset. If no limit is provided, then it will return 10 items. Max number of items which can be fetched by the query is 100. (If you wish to fetch large set of items, please use query_with_cursor API)",
              "format": "int32"
            },
            "offset": {
              "type": "integer",
              "description": "The starting offset from which to return results.",
              "format": "int32"
            },
            "query": {
              "type": "string",
              "description": "The query string in Lucene query string syntax."
            },
            "queryAsOwner": {
              "type": "boolean",
              "description": "The queryAsOwner switches between viewer and owner to return results that you are entitled to view or results you are the owner of."
            }
          }
        },
        "CcsQueryResponse": {
          "type": "object",
          "properties": {
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Map"
              },
              "description": "The query result"
            },
            "totalCount": {
              "type": "integer",
              "format": "int64",
              "description": "The total count of elements in response"
            }
          }
        },
        "CursorQueryRequest": {
          "required": [
            "kind"
          ],
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string",
              "description": "Search context to retrieve next batch of results."
            },
            "kind": {
              "type": "string",
              "description": "'''kind'' to search'"
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of results to return from the given offset. If no limit is provided, then it will return 10 items. Max number of items which can be fetched by the query is 100. (If you wish to fetch large set of items, please use query_with_cursor API)",
              "format": "int32"
            },
            "query": {
              "type": "string",
              "description": "The query string in Lucene query string syntax."
            },
            "queryAsOwner": {
              "type": "boolean",
              "description": "The queryAsOwner switches between viewer and owner to return results that you are entitled to view or results you are the owner of."
            },
            "returnedFields": {
              "type": "array",
              "description": "The fields on which to project the results.",
              "items": {
                "type": "string"
              }
            },
            "sort": {
              "$ref": "#/components/schemas/SortQuery"
            },
            "spatialFilter": {
              "$ref": "#/components/schemas/SpatialFilter"
            }
          }
        },
        "CursorQueryResponse": {
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string",
              "description": "The cursor marker in query"
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Map"
              },
              "description": "The query result"
            },
            "totalCount": {
              "type": "integer",
              "format": "int64",
              "description": "The total count of elements in response"
            }
          }
        },
        "Map": {
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "properties": {}
          }
        },
        "Point": {
          "type": "object",
          "properties": {
            "latitude": {
              "type": "number",
              "description": "Latitude of point.",
              "format": "double"
            },
            "longitude": {
              "type": "number",
              "description": "Longitude of point.",
              "format": "double"
            }
          }
        },
        "QueryRequest": {
          "required": [
            "kind"
          ],
          "type": "object",
          "properties": {
            "kind": {
              "type": "string",
              "description": "''kind'' to search"
            },
            "limit": {
              "type": "integer",
              "description": "The maximum number of results to return from the given offset. If no limit is provided, then it will return 10 items. Max number of items which can be fetched by the query is 100. (If you wish to fetch large set of items, please use query_with_cursor API)",
              "format": "int32"
            },
            "offset": {
              "type": "integer",
              "description": "The starting offset from which to return results.",
              "format": "int32"
            },
            "query": {
              "type": "string",
              "description": "The query string in Lucene query string syntax."
            },
            "queryAsOwner": {
              "type": "boolean",
              "description": "The queryAsOwner switches between viewer and owner to return results that you are entitled to view or results you are the owner of."
            },
            "returnedFields": {
              "type": "array",
              "description": "The fields on which to project the results.",
              "items": {
                "type": "string"
              }
            },
            "sort": {
              "$ref": "#/components/schemas/SortQuery"
            },
            "spatialFilter": {
              "$ref": "#/components/schemas/SpatialFilter"
            }
          }
        },
        "QueryResponse": {
          "type": "object",
          "properties": {
            "aggregations": {
              "description": "Aggregated response",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AggregationResponse"
              }
            },
            "results": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Map"
              },
              "description": "The query result"
            },
            "totalCount": {
              "type": "integer",
              "format": "int64",
              "description": "The total count of elements in response"
            }
          }
        },
        "SortQuery": {
          "type": "object",
          "properties": {
            "field": {
              "type": "array",
              "description": "The list of fields to sort the results.",
              "items": {
                "type": "string"
              }
            },
            "order": {
              "type": "array",
              "description": "The list of orders to sort the results. The element must be either ASC or DESC.",
              "items": {
                "type": "string",
                "enum": [
                  "ASC",
                  "DESC"
                ]
              }
            }
          }
        },
        "SpatialFilter": {
          "type": "object",
          "properties": {
            "byBoundingBox": {
              "$ref": "#/components/schemas/ByBoundingBox"
            },
            "byDistance": {
              "$ref": "#/components/schemas/ByDistance"
            },
            "byGeoPolygon": {
              "$ref": "#/components/schemas/ByGeoPolygon"
            },
            "field": {
              "type": "string",
              "description": "geo-point field in the index on which filtering will be performed. Use GET schema to find which fields supports spatial search."
            }
          }
        },
        "Acl": {
          "type": "object",
          "properties": {
            "owners": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The owner of the resource"
            },
            "viewers": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The viewers of the resource"
            }
          }
        },
        "BulkUpdateRecordsResponse": {
          "type": "object",
          "properties": {
            "lockedRecordIds": {
              "type": "array",
              "description": "The locked records identity",
              "items": {
                "type": "string"
              }
            },
            "notFoundRecordIds": {
              "type": "array",
              "description": "The not found records identity",
              "items": {
                "type": "string"
              }
            },
            "recordCount": {
              "type": "integer",
              "description": "The records count",
              "format": "int32"
            },
            "recordIds": {
              "type": "array",
              "description": "The records identity",
              "items": {
                "type": "string"
              }
            },
            "unAuthorizedRecordIds": {
              "type": "array",
              "description": "The unauthorized records identity",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "ConversionStatus": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "array",
              "description": "The conversion error",
              "items": {
                "type": "string"
              }
            },
            "id": {
              "type": "string",
              "description": "The conversion status identity"
            },
            "status": {
              "type": "string",
              "description": "The conversion status"
            }
          }
        },
        "CreateUpdateRecordsResponse": {
          "type": "object",
          "properties": {
            "recordCount": {
              "type": "integer",
              "format": "int32",
              "example": 12,
              "description": "The records count"
            },
            "recordIds": {
              "type": "array",
              "description": "The records identity",
              "items": {
                "type": "string"
              }
            },
            "skippedRecordIds": {
              "type": "array",
              "description": "The skip records identity",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "DatastoreQueryResult": {
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string",
              "description": "The cursor marker in query",
              "example": ""
            },
            "results": {
              "type": "array",
              "description": "The query result",
              "items": {
                "type": "string",
                "example": [
                  ""
                ]
              }
            }
          }
        },
        "Legal": {
          "type": "object",
          "properties": {
            "legaltags": {
              "type": "array",
              "description": "The array of legal tags",
              "items": {
                "type": "string"
              }
            },
            "otherRelevantDataCountries": {
              "type": "array",
              "description": "The other relevant coutries",
              "items": {
                "type": "string"
              }
            },
            "status": {
              "type": "string",
              "description": "The legal tag status",
              "enum": [
                "compliant",
                "incompliant"
              ]
            }
          }
        },
        "MultiRecordIds": {
          "type": "object",
          "properties": {
            "attributes": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "records": {
              "type": "array",
              "description": "The record identity array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "MultiRecordInfo": {
          "type": "object",
          "properties": {
            "invalidRecords": {
              "type": "array",
              "description": "The invalid record identity array",
              "items": {
                "type": "string"
              }
            },
            "records": {
              "type": "array",
              "description": "The record identity array",
              "items": {
                "type": "string"
              }
            },
            "retryRecords": {
              "type": "array",
              "description": "The retry record identity array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "MultiRecordRequest": {
          "type": "object",
          "properties": {
            "records": {
              "type": "array",
              "description": "The record identity array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "MultiRecordResponse": {
          "type": "object",
          "properties": {
            "conversionStatuses": {
              "type": "array",
              "description": "The conversion status array",
              "items": {
                "$ref": "#/components/schemas/ConversionStatus"
              }
            },
            "notFound": {
              "type": "array",
              "description": "The not found response array",
              "items": {
                "type": "string"
              }
            },
            "records": {
              "type": "array",
              "description": "The record identity array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "PatchOperation": {
          "required": [
            "op",
            "path",
            "value"
          ],
          "type": "object",
          "properties": {
            "op": {
              "type": "string",
              "description": "Bulk update record operation."
            },
            "path": {
              "type": "string",
              "description": "Bulk update record path."
            },
            "value": {
              "type": "array",
              "description": "Bulk update record path.",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "Record": {
          "required": [
            "id",
            "kind"
          ],
          "type": "object",
          "properties": {
            "acl": {
              "$ref": "#/components/schemas/Acl"
            },
            "ancestry": {
              "$ref": "#/components/schemas/RecordAncestry"
            },
            "data": {
              "type": "object",
              "description": "The data as object",
              "properties": {}
            },
            "id": {
              "type": "string",
              "description": "Unique identifier in whole Data Ecosystem. When not provided, Data Ecosystem will create and assign an id to the record. Must follow the naming convention: {Data-Partition-Id}:{object-type}:{uuid}."
            },
            "kind": {
              "type": "string",
              "description": "Record kind for which the schema information is applied to."
            },
            "legal": {
              "$ref": "#/components/schemas/Legal"
            },
            "meta": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Map"
              }
            },
            "version": {
              "type": "integer",
              "format": "int64",
              "description": "The record version"
            }
          }
        },
        "RecordAncestry": {
          "type": "object",
          "properties": {
            "parents": {
              "type": "array",
              "description": "The record hierarchy",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "RecordBulkUpdateParam": {
          "required": [
            "ops",
            "query"
          ],
          "type": "object",
          "properties": {
            "ops": {
              "type": "array",
              "description": "Record metadata operations.",
              "items": {
                "$ref": "#/components/schemas/PatchOperation"
              }
            },
            "query": {
              "$ref": "#/components/schemas/RecordQuery"
            }
          }
        },
        "RecordQuery": {
          "required": [
            "ids"
          ],
          "type": "object",
          "properties": {
            "ids": {
              "type": "array",
              "description": "List of record ids. Each record id must follow the naming convention {Data-Partition-Id}:{dataset-name}:{record-type}:{version}.",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "RecordVersions": {
          "type": "object",
          "properties": {
            "recordId": {
              "type": "string",
              "description": "The record identity"
            },
            "versions": {
              "type": "array",
              "description": "The record version array",
              "items": {
                "type": "integer",
                "format": "int64"
              }
            }
          }
        },
        "Schema": {
          "required": [
            "kind"
          ],
          "type": "object",
          "properties": {
            "ext": {
              "type": "object",
              "description": "The schema extension properties",
              "properties": {}
            },
            "kind": {
              "type": "string",
              "description": "Record kind for which the schema information is applied to."
            },
            "schema": {
              "type": "array",
              "description": "The schema item array",
              "items": {
                "$ref": "#/components/schemas/SchemaItem"
              }
            }
          }
        },
        "SchemaItem": {
          "type": "object",
          "properties": {
            "ext": {
              "type": "object",
              "description": "The schema extension",
              "properties": {},
              "example": "csv"
            },
            "kind": {
              "type": "string",
              "description": "The schema kind"
            },
            "path": {
              "type": "string"
            }
          }
        },
        "baseError": {
          "type": "object",
          "properties": {
            "_messageCode_": {
              "description": "The identifier of the response.",
              "type": "string"
            },
            "message": {
              "description": "The explanation of the `_messageCode_`.",
              "type": "string"
            }
          }
        },
        "errorResponse": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/components/schemas/baseError"
            }
          ],
          "properties": {
            "_messageCode_": {
              "description": "Error code",
              "type": "string"
            },
            "_statusCode_": {
              "description": "The HTTP response code",
              "type": "integer",
              "format": "int32"
            },
            "exception": {
              "description": "An explanation of the problem.",
              "type": "string"
            },
            "message": {
              "description": "The error message.",
              "type": "string"
            }
          }
        },
        "Error": {
          "type": "object",
          "properties": {
            "message": {
              "type": "string"
            },
            "reason": {
              "type": "string"
            },
            "domain": {
              "type": "string"
            }
          }
        },
        "ErrorModel": {
          "type": "object",
          "properties": {
            "errors": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Error"
              }
            },
            "code": {
              "type": "integer",
              "format": "int32"
            },
            "message": {
              "type": "string"
            }
          }
        },
        "ErrorResponseFormat": {
          "type": "object",
          "properties": {
            "error": {
              "$ref": "#/components/schemas/ErrorModel"
            }
          },
          "description": "An error that occurs during normal application logic"
        },
        "SchemaInfo-Response": {
          "description": "The response for a GET schema request",
          "title": "SchemaInfo-Response",
          "properties": {
            "schemaInfos": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Schema-Info"
              }
            },
            "offset": {
              "type": "integer",
              "description": "The offset for the next query",
              "title": "Offset",
              "minimum": 0
            },
            "count": {
              "type": "integer",
              "description": "The number of schema versions in this response",
              "title": "Count",
              "minimum": 0
            },
            "totalCount": {
              "type": "integer",
              "description": "The total number of entity type codes in the repository",
              "title": "Count",
              "minimum": 0
            }
          }
        },
        "Schema-Info": {
          "type": "object",
          "required": [
            "schema-Identity",
            "status"
          ],
          "properties": {
            "createdBy": {
              "type": "string",
              "example": "user@opendes.com",
              "description": "The user who created the schema. This value is taken from the API caller token."
            },
            "dateCreated": {
              "type": "string",
              "format": "date-time",
              "example": "2019-05-23T11:16:03.000Z",
              "description": "The UTC date time of the entity creation"
            },
            "schemaIdentity": {
              "$ref": "#/components/schemas/Schema-Identity"
            },
            "scope": {
              "type": "string",
              "example": "INTERNAL",
              "description": "Scope of the schema, which can be internal or shared. This is a system-defined attribute based on the partition-id passed.",
              "enum": [
                "INTERNAL",
                "SHARED"
              ]
            },
            "status": {
              "type": "string",
              "description": "Schema lifecycle status",
              "enum": [
                "PUBLISHED",
                "OBSOLETE",
                "DEVELOPMENT"
              ]
            },
            "supersededBy": {
              "$ref": "#/components/schemas/Schema-Identity"
            }
          },
          "title": "Schema-Info",
          "description": "Schema info, including status, creation, and Schema-Identity"
        },
        "Schema-Identity": {
          "type": "object",
          "required": [
            "authority",
            "entityType",
            "source",
            "schemaVersionMajor",
            "schemaVersionMinor",
            "schemaVersionPatch"
          ],
          "properties": {
            "authority": {
              "type": "string",
              "example": "osdu",
              "description": "Entity authority"
            },
            "entityType": {
              "type": "string",
              "example": "wellbore",
              "description": "Entity type code"
            },
            "id": {
              "type": "string",
              "example": "osdu:wks:wellbore:1.0.0",
              "description": "A read-only system-defined ID used for referencing a schema."
            },
            "schemaVersionMajor": {
              "type": "integer",
              "example": 1,
              "description": "Major version number of the schema"
            },
            "schemaVersionMinor": {
              "type": "integer",
              "example": 1,
              "description": "Minor version number of the schema"
            },
            "schemaVersionPatch": {
              "type": "integer",
              "example": 0,
              "description": "Patch number of the schema"
            },
            "source": {
              "type": "string",
              "example": "wks",
              "description": "Entity source"
            }
          },
          "title": "Schema-Identity",
          "description": "Schema authority source and type description"
        },
        "Schema-Request": {
          "type": "object",
          "required": [
            "schema",
            "schema-Info"
          ],
          "properties": {
            "schema": {
              "type": "object"
            },
            "schemaInfo": {
              "$ref": "#/components/schemas/Schema-Info"
            }
          },
          "title": "Schema-Request",
          "example": {
            "schema-Info": {
              "schemaIdentity": {
                "authority": "osdu",
                "source": "wks",
                "entityType": "wellbore",
                "schemaVersionMajor": 1,
                "schemaVersionMinor": 0,
                "schemaVersionPatch": 0
              },
              "status": "PUBLISHED"
            },
            "schema": {}
          }
        },
        "Ancestry": {
          "type": "object",
          "properties": {
            "parents": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "DatasetProperties": {
          "type": "object",
          "properties": {
            "FileSourceInfo": {
              "$ref": "#/components/schemas/FileSourceInfo"
            }
          }
        },
        "DownloadUrlResponse": {
          "type": "object",
          "properties": {
            "SignedUrl": {
              "type": "string"
            }
          }
        },
        "ExtensionProperties": {
          "type": "object",
          "properties": {
            "Classification": {
              "type": "string"
            },
            "Description": {
              "type": "string"
            },
            "ExternalIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "FileContentsDetails": {
              "type": "object"
            },
            "FileDateCreated": {
              "type": "object"
            },
            "FileDateModified": {
              "type": "object"
            }
          }
        },
        "FileData": {
          "type": "object",
          "properties": {
            "Checksum": {
              "type": "string"
            },
            "DatasetProperties": {
              "$ref": "#/components/schemas/DatasetProperties"
            },
            "Description": {
              "type": "string"
            },
            "EncodingFormatTypeID": {
              "type": "string"
            },
            "Endian": {
              "type": "string",
              "enum": [
                "BIG",
                "LITTLE"
              ]
            },
            "ExistenceKind": {
              "type": "string"
            },
            "ExtensionProperties": {
              "$ref": "#/components/schemas/ExtensionProperties"
            },
            "Name": {
              "type": "string"
            },
            "ResourceCurationStatus": {
              "type": "string"
            },
            "ResourceHomeRegionID": {
              "type": "string"
            },
            "ResourceHostRegionIDs": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "ResourceLifecycleStatus": {
              "type": "string"
            },
            "ResourceSecurityClassification": {
              "type": "string"
            },
            "SchemaFormatTypeID": {
              "type": "string"
            },
            "Source": {
              "type": "string"
            },
            "TotalSize": {
              "type": "string"
            }
          }
        },
        "FileListRequest": {
          "type": "object",
          "properties": {
            "Items": {
              "type": "integer",
              "format": "int32"
            },
            "PageNum": {
              "type": "integer",
              "format": "int32"
            },
            "TimeFrom": {
              "type": "string",
              "format": "date-time"
            },
            "TimeTo": {
              "type": "string",
              "format": "date-time"
            },
            "UserID": {
              "type": "string"
            }
          }
        },
        "FileListResponse": {
          "type": "object",
          "properties": {
            "Content": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/FileLocation"
              }
            },
            "Number": {
              "type": "integer",
              "format": "int32"
            },
            "NumberOfElements": {
              "type": "integer",
              "format": "int32"
            },
            "Size": {
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "FileLocation": {
          "type": "object",
          "properties": {
            "CreatedAt": {
              "type": "string",
              "example": "yyyy-MM-dd'T'HH:mm:ss.SSSZ"
            },
            "CreatedBy": {
              "type": "string"
            },
            "Driver": {
              "type": "string",
              "enum": [
                "GCS"
              ]
            },
            "FileID": {
              "type": "string"
            },
            "Location": {
              "type": "string"
            }
          }
        },
        "FileLocationRequest": {
          "type": "object",
          "properties": {
            "FileID": {
              "type": "string"
            }
          }
        },
        "FileLocationResponse": {
          "type": "object",
          "properties": {
            "Driver": {
              "type": "object"
            },
            "Location": {
              "type": "string"
            }
          }
        },
        "FileMetadata": {
          "type": "object",
          "properties": {
            "acl": {
              "$ref": "#/components/schemas/Acl"
            },
            "ancestry": {
              "$ref": "#/components/schemas/Ancestry"
            },
            "data": {
              "$ref": "#/components/schemas/FileData"
            },
            "id": {
              "type": "string"
            },
            "kind": {
              "type": "string"
            },
            "legal": {
              "$ref": "#/components/schemas/Legal"
            },
            "meta": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Map"
              }
            },
            "tags": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "FileMetadataResponse": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            }
          }
        },
        "FileRequest": {
          "type": "object",
          "properties": {
            "FileID": {
              "type": "string"
            }
          }
        },
        "FileResponse": {
          "type": "object"
        },
        "FileSourceInfo": {
          "type": "object",
          "properties": {
            "EncodingFormatTypeID": {
              "type": "string"
            },
            "FileSize": {
              "type": "string"
            },
            "FileSource": {
              "type": "string"
            },
            "Name": {
              "type": "string"
            },
            "PreLoadFilePath": {
              "type": "string"
            },
            "PreloadFileCreateUser": {
              "type": "string"
            },
            "PreloadFileModifyDate": {
              "type": "string"
            },
            "PreloadFileModifyUser": {
              "type": "string"
            }
          }
        },
        "Legal1": {
          "type": "object",
          "properties": {
            "legaltags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "otherRelevantDataCountries": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "status": {
              "type": "string",
              "enum": [
                "compliant",
                "incompliant"
              ]
            }
          }
        },
        "LocationRequest": {
          "type": "object",
          "properties": {
            "FileID": {
              "type": "string"
            }
          }
        },
        "LocationResponse": {
          "type": "object",
          "properties": {
            "FileID": {
              "type": "string"
            },
            "Location": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "Map1": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "RecordVersion": {
          "type": "object",
          "properties": {
            "acl": {
              "$ref": "#/components/schemas/Acl"
            },
            "ancestry": {
              "$ref": "#/components/schemas/Ancestry"
            },
            "data": {
              "$ref": "#/components/schemas/FileData"
            },
            "id": {
              "type": "string"
            },
            "kind": {
              "type": "string"
            },
            "legal": {
              "$ref": "#/components/schemas/Legal"
            },
            "meta": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Map"
              }
            },
            "tags": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "version": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "SrnFileData1": {
          "type": "object",
          "properties": {
            "connectionString": {
              "type": "string"
            },
            "kind": {
              "type": "string"
            },
            "signedUrl": {
              "type": "string"
            },
            "unsignedUrl": {
              "type": "string"
            }
          }
        },
        "UrlSigningRequest1": {
          "type": "object",
          "properties": {
            "srns": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "UrlSigningResponse1": {
          "type": "object",
          "properties": {
            "processed": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/SrnFileData"
              }
            },
            "unprocessed": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "CreateWorkflowRequest": {
          "type": "object",
          "properties": {
            "description": {
              "type": "string"
            },
            "registrationInstructions": {
              "type": "object"
            },
            "workflowName": {
              "type": "string"
            }
          },
          "title": "CreateWorkflowRequest"
        },
        "TriggerWorkflowRequest": {
          "type": "object",
          "properties": {
            "executionContext": {
              "type": "object"
            },
            "runId": {
              "type": "string"
            }
          },
          "title": "TriggerWorkflowRequest"
        },
        "UpdateWorkflowRunRequest": {
          "type": "object",
          "properties": {
            "status": {
              "type": "string",
              "enum": [
                "SUBMITTED",
                "RUNNING",
                "FINISHED",
                "FAILED",
                "SUCCESS"
              ]
            }
          },
          "title": "UpdateWorkflowRunRequest"
        },
        "WorkflowMetadata": {
          "type": "object",
          "properties": {
            "createdBy": {
              "type": "string"
            },
            "creationTimestamp": {
              "type": "integer",
              "format": "int64"
            },
            "description": {
              "type": "string"
            },
            "registrationInstructions": {
              "type": "object"
            },
            "version": {
              "type": "integer",
              "format": "int64"
            },
            "workflowId": {
              "type": "string"
            },
            "workflowName": {
              "type": "string"
            }
          },
          "title": "WorkflowMetadata"
        },
        "WorkflowRun": {
          "type": "object",
          "properties": {
            "endTimeStamp": {
              "type": "integer",
              "format": "int64"
            },
            "runId": {
              "type": "string"
            },
            "startTimeStamp": {
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "type": "string",
              "enum": [
                "SUBMITTED",
                "RUNNING",
                "FINISHED",
                "FAILED",
                "SUCCESS"
              ]
            },
            "submittedBy": {
              "type": "string"
            },
            "workflowEngineExecutionDate": {
              "type": "string"
            },
            "workflowId": {
              "type": "string"
            },
            "workflowName": {
              "type": "string"
            }
          },
          "title": "WorkflowRun"
        },
        "WorkflowRunResponse": {
          "type": "object",
          "properties": {
            "endTimeStamp": {
              "type": "integer",
              "format": "int64"
            },
            "runId": {
              "type": "string"
            },
            "startTimeStamp": {
              "type": "integer",
              "format": "int64"
            },
            "status": {
              "type": "string",
              "enum": [
                "SUBMITTED",
                "RUNNING",
                "FINISHED",
                "FAILED",
                "SUCCESS"
              ]
            },
            "submittedBy": {
              "type": "string"
            },
            "workflowId": {
              "type": "string"
            }
          },
          "title": "WorkflowRunResponse"
        },
        "RecordReindexRequest": {
          "type": "object",
          "properties": {
            "cursor": {
              "type": "string"
            },
            "kind": {
              "type": "string"
            }
          }
        },
        "AboutResponseUser": {
          "title": "AboutResponseUser",
          "type": "object",
          "properties": {
            "tenant": {
              "title": "Tenant",
              "type": "string"
            },
            "email": {
              "title": "Email",
              "type": "string"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "AbstractAccessControlList100": {
          "title": "AbstractAccessControlList100",
          "required": [
            "owners",
            "viewers"
          ],
          "type": "object",
          "properties": {
            "owners": {
              "title": "List of Owners",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Owner"
              },
              "description": "The list of owners of this data record formatted as an email (core.common.model.storage.validation.ValidationDoc.EMAIL_REGEX)."
            },
            "viewers": {
              "title": "List of Viewers",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Viewer"
              },
              "description": "The list of viewers to which this data record is accessible/visible/discoverable formatted as an email (core.common.model.storage.validation.ValidationDoc.EMAIL_REGEX)."
            }
          },
          "description": "The access control tags associated with this entity."
        },
        "AbstractAliasNames100": {
          "title": "AbstractAliasNames100",
          "type": "object",
          "properties": {
            "AliasName": {
              "title": "Aliasname",
              "type": "string",
              "description": "Alternative Name value of defined name type for an object."
            },
            "AliasNameTypeID": {
              "title": "Aliasnametypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-AliasNameType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "A classification of alias names such as by role played or type of source, such as regulatory name, regulatory code, company code, international standard name, etc."
            },
            "DefinitionOrganisationID": {
              "title": "Definitionorganisationid",
              "pattern": "^[\\w\\-\\.]+:(reference-data\\-\\-StandardsOrganisation|master-data\\-\\-Organisation):[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The StandardsOrganisation (reference-data) or Organisation (master-data) that provided the name (the source)."
            },
            "EffectiveDateTime": {
              "title": "Effectivedatetime",
              "type": "string",
              "description": "The date and time when an alias name becomes effective.",
              "format": "date-time"
            },
            "TerminationDateTime": {
              "title": "Terminationdatetime",
              "type": "string",
              "description": "The data and time when an alias name is no longer in effect.",
              "format": "date-time"
            }
          },
          "description": "A list of alternative names for an object.  The preferred name is in a separate, scalar property.  It may or may not be repeated in the alias list, though a best practice is to include it if the list is present, but to omit the list if there are no other names.  Note that the abstract entity is an array so the $ref to it is a simple property reference."
        },
        "AbstractAnyCrsFeatureCollection100": {
          "title": "AbstractAnyCrsFeatureCollection100",
          "required": [
            "type",
            "persistableReferenceCrs",
            "features"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/app__model__osdu_model__Type"
            },
            "CoordinateReferenceSystemID": {
              "title": "Coordinate Reference System ID",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-CoordinateReferenceSystem:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The CRS reference into the CoordinateReferenceSystem catalog.",
              "example": "namespace:reference-data--CoordinateReferenceSystem:BoundCRS.SLB.32021.15851:"
            },
            "VerticalCoordinateReferenceSystemID": {
              "title": "Vertical Coordinate Reference System ID",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-CoordinateReferenceSystem:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The explicit VerticalCRS reference into the CoordinateReferenceSystem catalog. This property stays empty for 2D geometries. Absent or empty values for 3D geometries mean the context may be provided by a CompoundCRS in 'CoordinateReferenceSystemID' or implicitly EPSG:5714 MSL height",
              "example": "namespace:reference-data--CoordinateReferenceSystem:VerticalCRS.EPSG.5773:"
            },
            "persistableReferenceCrs": {
              "title": "CRS Reference",
              "type": "string",
              "description": "The CRS reference as persistableReference string. If populated, the CoordinateReferenceSystemID takes precedence.",
              "example": "{\"lateBoundCRS\":{\"wkt\":\"PROJCS[\\\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],PROJECTION[\\\"Lambert_Conformal_Conic\\\"],PARAMETER[\\\"False_Easting\\\",2000000.0],PARAMETER[\\\"False_Northing\\\",0.0],PARAMETER[\\\"Central_Meridian\\\",-100.5],PARAMETER[\\\"Standard_Parallel_1\\\",46.1833333333333],PARAMETER[\\\"Standard_Parallel_2\\\",47.4833333333333],PARAMETER[\\\"Latitude_Of_Origin\\\",45.6666666666667],UNIT[\\\"Foot_US\\\",0.304800609601219],AUTHORITY[\\\"EPSG\\\",32021]]\",\"ver\":\"PE_10_3_1\",\"name\":\"NAD_1927_StatePlane_North_Dakota_South_FIPS_3302\",\"authCode\":{\"auth\":\"EPSG\",\"code\":\"32021\"},\"type\":\"LBC\"},\"singleCT\":{\"wkt\":\"GEOGTRAN[\\\"NAD_1927_To_WGS_1984_79_CONUS\\\",GEOGCS[\\\"GCS_North_American_1927\\\",DATUM[\\\"D_North_American_1927\\\",SPHEROID[\\\"Clarke_1866\\\",6378206.4,294.9786982]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],GEOGCS[\\\"GCS_WGS_1984\\\",DATUM[\\\"D_WGS_1984\\\",SPHEROID[\\\"WGS_1984\\\",6378137.0,298.257223563]],PRIMEM[\\\"Greenwich\\\",0.0],UNIT[\\\"Degree\\\",0.0174532925199433]],METHOD[\\\"NADCON\\\"],PARAMETER[\\\"Dataset_conus\\\",0.0],AUTHORITY[\\\"EPSG\\\",15851]]\",\"ver\":\"PE_10_3_1\",\"name\":\"NAD_1927_To_WGS_1984_79_CONUS\",\"authCode\":{\"auth\":\"EPSG\",\"code\":\"15851\"},\"type\":\"ST\"},\"ver\":\"PE_10_3_1\",\"name\":\"NAD27 * OGP-Usa Conus / North Dakota South [32021,15851]\",\"authCode\":{\"auth\":\"SLB\",\"code\":\"32021079\"},\"type\":\"EBC\"}"
            },
            "persistableReferenceVerticalCrs": {
              "title": "Vertical CRS Reference",
              "type": "string",
              "description": "The VerticalCRS reference as persistableReference string. If populated, the VerticalCoordinateReferenceSystemID takes precedence. The property is null or empty for 2D geometries. For 3D geometries and absent or null persistableReferenceVerticalCrs the vertical CRS is either provided via persistableReferenceCrs's CompoundCRS or it is implicitly defined as EPSG:5714 MSL height.",
              "example": "{\"authCode\":{\"auth\":\"EPSG\",\"code\":\"5773\"},\"type\":\"LBC\",\"ver\":\"PE_10_3_1\",\"name\":\"EGM96_Geoid\",\"wkt\":\"VERTCS[\\\"EGM96_Geoid\\\",VDATUM[\\\"EGM96_Geoid\\\"],PARAMETER[\\\"Vertical_Shift\\\",0.0],PARAMETER[\\\"Direction\\\",1.0],UNIT[\\\"Meter\\\",1.0],AUTHORITY[\\\"EPSG\\\",5773]]\"}"
            },
            "persistableReferenceUnitZ": {
              "title": "Z-Unit Reference",
              "type": "string",
              "description": "The unit of measure for the Z-axis (only for 3-dimensional coordinates, where the CRS does not describe the vertical unit). Note that the direction is upwards positive, i.e. Z means height.",
              "example": "{\"scaleOffset\":{\"scale\":1.0,\"offset\":0.0},\"symbol\":\"m\",\"baseMeasurement\":{\"ancestry\":\"Length\",\"type\":\"UM\"},\"type\":\"USO\"}"
            },
            "features": {
              "title": "Features",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Feature"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "description": "The original or 'as ingested' coordinates (Point, MultiPoint, LineString, MultiLineString, Polygon or MultiPolygon). The name 'AsIngestedCoordinates' was chosen to contrast it to 'OriginalCoordinates', which carries the uncertainty whether any coordinate operations took place before ingestion. In cases where the original CRS is different from the as-ingested CRS, the OperationsApplied can also contain the list of operations applied to the coordinate prior to ingestion. The data structure is similar to GeoJSON FeatureCollection, however in a CRS context explicitly defined within the AbstractAnyCrsFeatureCollection. The coordinate sequence follows GeoJSON standard, i.e. 'eastward/longitude', 'northward/latitude' {, 'upward/height' unless overridden by an explicit direction in the AsIngestedCoordinates.VerticalCoordinateReferenceSystemID}."
        },
        "AbstractFacilityEvent100": {
          "title": "AbstractFacilityEvent100",
          "type": "object",
          "properties": {
            "FacilityEventTypeID": {
              "title": "Facilityeventtypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-FacilityEventType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The facility event type is a picklist. Examples: 'Permit', 'Spud', 'Abandon', etc."
            },
            "EffectiveDateTime": {
              "title": "Effectivedatetime",
              "type": "string",
              "description": "The date and time at which the event took place or takes effect.",
              "format": "date-time"
            },
            "TerminationDateTime": {
              "title": "Terminationdatetime",
              "type": "string",
              "description": "The date and time at which the event is no longer in effect. For point-in-time events the 'TerminationDateTime' must be set equal to 'EffectiveDateTime'. Open time intervals have an absent 'TerminationDateTime'.",
              "format": "date-time"
            }
          },
          "description": "A significant occurrence in the life of a facility, which often changes its state, or the state of one of its components. It can describe a point-in-time (event) or a time interval of a specific type (FacilityEventType)."
        },
        "AbstractFacilityOperator100": {
          "title": "AbstractFacilityOperator100",
          "type": "object",
          "properties": {
            "FacilityOperatorID": {
              "title": "Facility Operator ID",
              "type": "string",
              "description": "Internal, unique identifier for an item 'AbstractFacilityOperator'. This identifier is used by 'AbstractFacility.CurrentOperatorID' and 'AbstractFacility.InitialOperatorID'."
            },
            "FacilityOperatorOrganisationID": {
              "title": "Facilityoperatororganisationid",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Organisation:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The company that currently operates, or previously operated the facility"
            },
            "EffectiveDateTime": {
              "title": "Effectivedatetime",
              "type": "string",
              "description": "The date and time at which the facility operator becomes effective.",
              "format": "date-time"
            },
            "TerminationDateTime": {
              "title": "Terminationdatetime",
              "type": "string",
              "description": "The date and time at which the facility operator is no longer in effect. If the operator is still effective, the 'TerminationDateTime' is left absent.",
              "format": "date-time"
            }
          },
          "description": "The organisation that was responsible for a facility at some point in time."
        },
        "AbstractFacilitySpecification100": {
          "title": "AbstractFacilitySpecification100",
          "type": "object",
          "properties": {
            "EffectiveDateTime": {
              "title": "Effectivedatetime",
              "type": "string",
              "description": "The date and time at which the facility specification instance becomes effective.",
              "format": "date-time"
            },
            "TerminationDateTime": {
              "title": "Terminationdatetime",
              "type": "string",
              "description": "The date and time at which the facility specification instance is no longer in effect.",
              "format": "date-time"
            },
            "FacilitySpecificationQuantity": {
              "title": "Facilityspecificationquantity",
              "type": "number",
              "description": "The value for the specified parameter type."
            },
            "FacilitySpecificationDateTime": {
              "title": "Facilityspecificationdatetime",
              "type": "string",
              "description": "The actual date and time value of the parameter.",
              "format": "date-time"
            },
            "FacilitySpecificationIndicator": {
              "title": "Facilityspecificationindicator",
              "type": "boolean",
              "description": "The actual indicator value of the parameter."
            },
            "FacilitySpecificationText": {
              "title": "Facilityspecificationtext",
              "type": "string",
              "description": "The actual text value of the parameter."
            },
            "UnitOfMeasureID": {
              "title": "Unitofmeasureid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-UnitOfMeasure:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The unit for the quantity parameter, like metre (m in SI units system) for quantity Length."
            },
            "ParameterTypeID": {
              "title": "Parametertypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ParameterType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Parameter type of property or characteristic."
            }
          },
          "description": "A property, characteristic, or attribute about a facility that is not described explicitly elsewhere."
        },
        "AbstractFacilityState100": {
          "title": "AbstractFacilityState100",
          "type": "object",
          "properties": {
            "EffectiveDateTime": {
              "title": "Effectivedatetime",
              "type": "string",
              "description": "The date and time at which the facility state becomes effective.",
              "format": "date-time"
            },
            "TerminationDateTime": {
              "title": "Terminationdatetime",
              "type": "string",
              "description": "The date and time at which the facility state is no longer in effect.",
              "format": "date-time"
            },
            "FacilityStateTypeID": {
              "title": "Facilitystatetypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-FacilityStateType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The facility life cycle state from planning to abandonment."
            }
          },
          "description": "The life cycle status of a facility at some point in time."
        },
        "AbstractFacilityVerticalMeasurement100": {
          "title": "AbstractFacilityVerticalMeasurement100",
          "type": "object",
          "properties": {
            "EffectiveDateTime": {
              "title": "Effectivedatetime",
              "type": "string",
              "description": "The date and time at which a vertical measurement instance becomes effective.",
              "format": "date-time"
            },
            "VerticalMeasurement": {
              "title": "Verticalmeasurement",
              "type": "number",
              "description": "The value of the elevation or depth. Depth is positive downwards from a vertical reference or geodetic datum along a path, which can be vertical; elevation is positive upwards from a geodetic datum along a vertical path. Either can be negative."
            },
            "TerminationDateTime": {
              "title": "Terminationdatetime",
              "type": "string",
              "description": "The date and time at which a vertical measurement instance is no longer in effect.",
              "format": "date-time"
            },
            "VerticalMeasurementTypeID": {
              "title": "Verticalmeasurementtypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-VerticalMeasurementType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Specifies the type of vertical measurement (TD, Plugback, Kickoff, Drill Floor, Rotary Table...)."
            },
            "VerticalMeasurementPathID": {
              "title": "Verticalmeasurementpathid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-VerticalMeasurementPath:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Specifies Measured Depth, True Vertical Depth, or Elevation."
            },
            "VerticalMeasurementSourceID": {
              "title": "Verticalmeasurementsourceid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-VerticalMeasurementSource:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Specifies Driller vs Logger."
            },
            "WellboreTVDTrajectoryID": {
              "title": "Wellboretvdtrajectoryid",
              "pattern": "^[\\w\\-\\.]+:work-product-component\\-\\-WellboreTrajectory:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Specifies what directional survey or wellpath was used to calculate the TVD."
            },
            "VerticalMeasurementUnitOfMeasureID": {
              "title": "Verticalmeasurementunitofmeasureid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-UnitOfMeasure:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The unit of measure for the vertical measurement. If a unit of measure and a vertical CRS are provided, the unit of measure provided is taken over the unit of measure from the CRS."
            },
            "VerticalCRSID": {
              "title": "Verticalcrsid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-CoordinateReferenceSystem:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "A vertical coordinate reference system defines the origin for height or depth values. It is expected that either VerticalCRSID or VerticalReferenceID reference is provided in a given vertical measurement array object, but not both."
            },
            "VerticalReferenceID": {
              "title": "Verticalreferenceid",
              "type": "string",
              "description": "The reference point from which the relative vertical measurement is made. This is only populated if the measurement has no VerticalCRSID specified. The value entered must be the VerticalMeasurementID for another vertical measurement array element in this resource or its parent facility, and as a chain of measurements, they must resolve ultimately to a Vertical CRS. It is expected that a VerticalCRSID or a VerticalReferenceID is provided in a given vertical measurement array object, but not both."
            },
            "VerticalMeasurementDescription": {
              "title": "Verticalmeasurementdescription",
              "type": "string",
              "description": "Text which describes a vertical measurement in detail."
            }
          },
          "description": "A location along a wellbore, _usually_ associated with some aspect of the drilling of the wellbore, but not with any intersecting _subsurface_ natural surfaces."
        },
        "AbstractFeatureCollection100": {
          "title": "AbstractFeatureCollection100",
          "required": [
            "type",
            "features"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type9"
            },
            "features": {
              "title": "Features",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Feature1"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "description": "The normalized coordinates (Point, MultiPoint, LineString, MultiLineString, Polygon or MultiPolygon) based on WGS 84 (EPSG:4326 for 2-dimensional coordinates, EPSG:4326 + EPSG:5714 (MSL) for 3-dimensional coordinates). This derived coordinate representation is intended for global discoverability only. The schema of this substructure is identical to the GeoJSON FeatureCollection https://geojson.org/schema/FeatureCollection.json. The coordinate sequence follows GeoJSON standard, i.e. longitude, latitude {, height}"
        },
        "AbstractLegalParentList100": {
          "title": "AbstractLegalParentList100",
          "type": "object",
          "properties": {
            "parents": {
              "title": "Parents",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Parent"
              },
              "description": "An array of none, one or many entity references in the data ecosystem, which identify the source of data in the legal sense. In contract to other relationships, the source record version is required. Example: the 'parents' will be queried when e.g. the subscription of source data services is terminated; access to the derivatives is also terminated.",
              "example": []
            }
          },
          "description": "The links to data, which constitute the inputs."
        },
        "AbstractLegalTags100": {
          "title": "AbstractLegalTags100",
          "required": [
            "legaltags",
            "otherRelevantDataCountries"
          ],
          "type": "object",
          "properties": {
            "legaltags": {
              "title": "Legal Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The list of legal tags, which resolve to legal properties (like country of origin, export classification code, etc.) and rules with the help of the Compliance Service."
            },
            "otherRelevantDataCountries": {
              "title": "Other Relevant Data Countries",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/OtherRelevantDataCountry"
              },
              "description": "The list of other relevant data countries as an array of two-letter country codes, see https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2."
            },
            "status": {
              "title": "Legal Status",
              "pattern": "^(compliant|uncompliant)$",
              "type": "string",
              "description": "The legal status. Set by the system after evaluation against the compliance rules associated with the \"legaltags\" using the Compliance Service."
            }
          },
          "description": "The entity's legal tags and compliance status. The actual contents associated with the legal tags is managed by the Compliance Service."
        },
        "AbstractSpatialLocation100": {
          "title": "AbstractSpatialLocation100",
          "type": "object",
          "properties": {
            "SpatialLocationCoordinatesDate": {
              "title": "Spatiallocationcoordinatesdate",
              "type": "string",
              "description": "Date when coordinates were measured or retrieved.",
              "format": "date-time"
            },
            "QuantitativeAccuracyBandID": {
              "title": "Quantitativeaccuracybandid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-QuantitativeAccuracyBand:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "An approximate quantitative assessment of the quality of a location (accurate to > 500 m (i.e. not very accurate)), to < 1 m, etc."
            },
            "QualitativeSpatialAccuracyTypeID": {
              "title": "Qualitativespatialaccuracytypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-QualitativeSpatialAccuracyType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "A qualitative description of the quality of a spatial location, e.g. unverifiable, not verified, basic validation."
            },
            "CoordinateQualityCheckPerformedBy": {
              "title": "Coordinatequalitycheckperformedby",
              "type": "string",
              "description": "The user who performed the Quality Check."
            },
            "CoordinateQualityCheckDateTime": {
              "title": "Coordinatequalitycheckdatetime",
              "type": "string",
              "description": "The date of the Quality Check.",
              "format": "date-time"
            },
            "CoordinateQualityCheckRemarks": {
              "title": "Coordinatequalitycheckremarks",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Freetext remarks on Quality Check."
            },
            "AsIngestedCoordinates": {
              "title": "As Ingested Coordinates",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractAnyCrsFeatureCollection100"
                }
              ],
              "description": "The original or 'as ingested' coordinates (Point, MultiPoint, LineString, MultiLineString, Polygon or MultiPolygon). The name 'AsIngestedCoordinates' was chosen to contrast it to 'OriginalCoordinates', which carries the uncertainty whether any coordinate operations took place before ingestion. In cases where the original CRS is different from the as-ingested CRS, the OperationsApplied can also contain the list of operations applied to the coordinate prior to ingestion. The data structure is similar to GeoJSON FeatureCollection, however in a CRS context explicitly defined within the AbstractAnyCrsFeatureCollection. The coordinate sequence follows GeoJSON standard, i.e. 'eastward/longitude', 'northward/latitude' {, 'upward/height' unless overridden by an explicit direction in the AsIngestedCoordinates.VerticalCoordinateReferenceSystemID}."
            },
            "Wgs84Coordinates": {
              "title": "WGS 84 Coordinates",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractFeatureCollection100"
                }
              ],
              "description": "The normalized coordinates (Point, MultiPoint, LineString, MultiLineString, Polygon or MultiPolygon) based on WGS 84 (EPSG:4326 for 2-dimensional coordinates, EPSG:4326 + EPSG:5714 (MSL) for 3-dimensional coordinates). This derived coordinate representation is intended for global discoverability only. The schema of this substructure is identical to the GeoJSON FeatureCollection https://geojson.org/schema/FeatureCollection.json. The coordinate sequence follows GeoJSON standard, i.e. longitude, latitude {, height}"
            },
            "AppliedOperations": {
              "title": "Operations Applied",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The audit trail of operations applied to the coordinates from the original state to the current state. The list may contain operations applied prior to ingestion as well as the operations applied to produce the Wgs84Coordinates. The text elements refer to ESRI style CRS and Transformation names, which may have to be translated to EPSG standard names.",
              "example": [
                "conversion from ED_1950_UTM_Zone_31N to GCS_European_1950; 1 points converted",
                "transformation GCS_European_1950 to GCS_WGS_1984 using ED_1950_To_WGS_1984_24; 1 points successfully transformed"
              ]
            },
            "SpatialParameterTypeID": {
              "title": "Spatialparametertypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-SpatialParameterType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "A type of spatial representation of an object, often general (e.g. an Outline, which could be applied to Field, Reservoir, Facility, etc.) or sometimes specific (e.g. Onshore Outline, State Offshore Outline, Federal Offshore Outline, 3 spatial representations that may be used by Countries)."
            },
            "SpatialGeometryTypeID": {
              "title": "Spatialgeometrytypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-SpatialGeometryType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Indicates the expected look of the SpatialParameterType, e.g. Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon. The value constrains the type of geometries in the GeoJSON Wgs84Coordinates and AsIngestedCoordinates."
            }
          },
          "description": "The spatial location information such as coordinates, CRS information (left empty when not appropriate)."
        },
        "AbstractWellboreDrillingReason100": {
          "title": "AbstractWellboreDrillingReason100",
          "type": "object",
          "properties": {
            "DrillingReasonTypeID": {
              "title": "Drillingreasontypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-DrillingReasonType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Identifier of the drilling reason type for the corresponding time period."
            },
            "EffectiveDateTime": {
              "title": "Effectivedatetime",
              "type": "string",
              "description": "The date and time at which the event becomes effective.",
              "format": "date-time"
            },
            "TerminationDateTime": {
              "title": "Terminationdatetime",
              "type": "string",
              "description": "The date and time at which the event is no longer in effect.",
              "format": "date-time"
            }
          },
          "description": "Purpose for drilling a wellbore, which often is an indication of the level of risk."
        },
        "AggregationResponse": {
          "title": "AggregationResponse",
          "type": "object",
          "properties": {
            "key": {
              "title": "Key",
              "type": "string"
            },
            "count": {
              "title": "Count",
              "type": "integer"
            }
          }
        },
        "Artefact": {
          "title": "Artefact",
          "type": "object",
          "properties": {
            "RoleID": {
              "title": "Roleid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ArtefactRole:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The SRN of this artefact's role."
            },
            "ResourceKind": {
              "title": "Resourcekind",
              "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.]+:[0-9]+.[0-9]+.[0-9]+$",
              "type": "string",
              "description": "The kind or schema ID of the artefact. Resolvable with the Schema Service."
            },
            "ResourceID": {
              "title": "Resourceid",
              "pattern": "^[\\w\\-\\.]+:dataset\\-\\-[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The SRN which identifies this OSDU Artefact resource."
            }
          }
        },
        "Body_fastquery_wellbores_bygeopolygon_ddms_fastquery_wellbores_bygeopolygon_post": {
          "title": "Body_fastquery_wellbores_bygeopolygon_ddms_fastquery_wellbores_bygeopolygon_post",
          "required": [
            "points"
          ],
          "type": "object",
          "properties": {
            "points": {
              "title": "Points",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Point"
              }
            },
            "query": {
              "$ref": "#/components/schemas/SearchQuery"
            }
          }
        },
        "Body_query_wellbores_bygeopolygon_ddms_query_wellbores_bygeopolygon_post": {
          "title": "Body_query_wellbores_bygeopolygon_ddms_query_wellbores_bygeopolygon_post",
          "required": [
            "points"
          ],
          "type": "object",
          "properties": {
            "points": {
              "title": "Points",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Point"
              }
            },
            "query": {
              "$ref": "#/components/schemas/SearchQuery"
            }
          }
        },
        "Body_upload_log_data_file_ddms_v2_logs__logid__upload_data_post": {
          "title": "Body_upload_log_data_file_ddms_v2_logs__logid__upload_data_post",
          "required": [
            "file"
          ],
          "type": "object",
          "properties": {
            "file": {
              "title": "File",
              "type": "string",
              "format": "binary"
            }
          }
        },
        "Catalog": {
          "title": "Catalog",
          "required": [
            "family_catalog"
          ],
          "type": "object",
          "properties": {
            "family_catalog": {
              "title": "Family Catalog",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/CatalogItem"
              }
            },
            "main_family_catalog": {
              "title": "Main Family Catalog",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MainFamilyCatalogItem"
              }
            }
          }
        },
        "CatalogItem": {
          "title": "CatalogItem",
          "required": [
            "unit",
            "rule"
          ],
          "type": "object",
          "properties": {
            "unit": {
              "title": "Unit",
              "type": "string"
            },
            "family": {
              "title": "Family",
              "type": "string",
              "default": ""
            },
            "rule": {
              "title": "Rule",
              "type": "string"
            }
          }
        },
        "CatalogRecord": {
          "title": "CatalogRecord",
          "required": [
            "acl",
            "legal",
            "data"
          ],
          "type": "object",
          "properties": {
            "acl": {
              "$ref": "#/components/schemas/StorageAcl"
            },
            "legal": {
              "$ref": "#/components/schemas/odes_storage__models__Legal"
            },
            "data": {
              "$ref": "#/components/schemas/Catalog"
            }
          },
          "example": {
            "acl": {
              "viewers": [
                "abc@domain.com, cde@domain.com"
              ],
              "owners": [
                "abc@domain.com, cde@domain.com"
              ]
            },
            "legal": {
              "legaltags": [
                "opendes-public-usa-dataset-1"
              ],
              "otherRelevantDataCountries": [
                "US"
              ]
            },
            "data": {
              "family_catalog": [
                {
                  "unit": "ohm.m",
                  "family": "Medium Resistivity",
                  "rule": "MEDR"
                }
              ],
              "main_family_catalog": [
                {
                  "MainFamily": "Resistivity",
                  "Family": "Medium Resistivity",
                  "Unit": "OHMM"
                }
              ]
            }
          }
        },
        "Coordinate": {
          "title": "Coordinate",
          "type": "array",
          "items": {}
        },
        "Coordinate1": {
          "title": "Coordinate1",
          "type": "array",
          "items": {}
        },
        "Coordinate2": {
          "title": "Coordinate2",
          "type": "array",
          "items": {}
        },
        "Coordinate3": {
          "title": "Coordinate3",
          "type": "array",
          "items": {}
        },
        "Coordinate4": {
          "title": "Coordinate4",
          "type": "array",
          "items": {}
        },
        "Coordinate5": {
          "title": "Coordinate5",
          "type": "array",
          "items": {}
        },
        "Coordinate6": {
          "title": "Coordinate6",
          "type": "array",
          "items": {}
        },
        "Coordinate7": {
          "title": "Coordinate7",
          "type": "array",
          "items": {}
        },
        "Coordinate8": {
          "title": "Coordinate8",
          "type": "array",
          "items": {}
        },
        "Coordinate9": {
          "title": "Coordinate9",
          "type": "array",
          "items": {}
        },
        "Curve": {
          "title": "Curve",
          "type": "object",
          "properties": {
            "CurveID": {
              "title": "Curveid",
              "type": "string",
              "description": "The ID of the Well Log Curve"
            },
            "DateStamp": {
              "title": "Datestamp",
              "type": "string",
              "description": "Date curve was created in the database",
              "format": "date-time"
            },
            "CurveVersion": {
              "title": "Curveversion",
              "type": "string",
              "description": "The Version of the Log Curve."
            },
            "CurveQuality": {
              "title": "Curvequality",
              "type": "string",
              "description": "The Quality of the Log Curve."
            },
            "InterpreterName": {
              "title": "Interpretername",
              "type": "string",
              "description": "The name of person who interpreted this Log Curve."
            },
            "IsProcessed": {
              "title": "Isprocessed",
              "type": "boolean",
              "description": "Indicates if the curve has been (pre)processed or if it is a raw recording"
            },
            "NullValue": {
              "title": "Nullvalue",
              "type": "boolean",
              "description": "Indicates that there is no measurement within the curve"
            },
            "DepthCoding": {
              "title": "Depthcoding",
              "pattern": "^REGULAR|DISCRETE$",
              "type": "string",
              "description": "The Coding of the depth."
            },
            "Interpolate": {
              "title": "Interpolate",
              "type": "boolean",
              "description": "Whether curve can be interpolated or not"
            },
            "TopDepth": {
              "title": "Topdepth",
              "type": "number",
              "description": "Top Depth"
            },
            "BaseDepth": {
              "title": "Basedepth",
              "type": "number",
              "description": "Base Depth"
            },
            "DepthUnit": {
              "title": "Depthunit",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-UnitOfMeasure:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Unit of Measure for Top and Base depth"
            },
            "CurveUnit": {
              "title": "Curveunit",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-UnitOfMeasure:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Unit of Measure for the Log Curve"
            },
            "Mnemonic": {
              "title": "Mnemonic",
              "type": "string",
              "description": "The Mnemonic of the Log Curve is the value as received either from Raw Providers or from Internal Processing team "
            },
            "LogCurveTypeID": {
              "title": "Logcurvetypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-LogCurveType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The SRN of the Log Curve Type - which is the standard mnemonic chosen by the company - OSDU provides an initial list"
            },
            "LogCurveBusinessValueID": {
              "title": "Logcurvebusinessvalueid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-LogCurveBusinessValue:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The SRN of the Log Curve Business Value Type."
            },
            "LogCurveMainFamilyID": {
              "title": "Logcurvemainfamilyid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-LogCurveMainFamily:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The SRN of the Log Curve Main Family Type - which is the Geological Physical Quantity measured - such as porosity."
            },
            "LogCurveFamilyID": {
              "title": "Logcurvefamilyid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-LogCurveFamily:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The SRN of the Log Curve Family - which is the detailed Geological Physical Quantity Measured - such as neutron porosity"
            },
            "VerticalMeasurement": {
              "title": "Verticalmeasurement",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractFacilityVerticalMeasurement100"
                }
              ],
              "description": "References an entry in the Vertical Measurement array for the Wellbore identified by WellboreID, which defines the vertical reference datum for the logged depths."
            }
          }
        },
        "DataType": {
          "title": "DataType",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean"
          ],
          "description": "An enumeration."
        },
        "DataType_1": {
          "title": "DataType_1",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean"
          ],
          "description": "An enumeration."
        },
        "DataType_2": {
          "title": "DataType_2",
          "enum": [
            "string",
            "number",
            "integer",
            "boolean",
            "date-time"
          ],
          "description": "An enumeration."
        },
        "Dataset": {
          "title": "Dataset",
          "pattern": "^[\\w\\-\\.]+:dataset\\-\\-[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$",
          "type": "string",
          "description": "The SRN which identifies this OSDU File resource."
        },
        "Dip": {
          "title": "Dip",
          "required": [
            "reference",
            "azimuth",
            "inclination"
          ],
          "type": "object",
          "properties": {
            "reference": {
              "title": "Reference of the dip",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Only Measured Depth in meter is supported for the moment"
            },
            "azimuth": {
              "title": "Azimuth value of the dip",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Only degrees unit is supported for the moment"
            },
            "inclination": {
              "title": "Inclination value of the dip",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Only degrees unit is supported for the moment"
            },
            "quality": {
              "title": "Quality of the dip",
              "exclusiveMaximum": true,
              "exclusiveMinimum": false,
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Decimal number between 0 and 1"
            },
            "xCoordinate": {
              "title": "The X coordinate of the dip",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Only meter unit is supported for the moment"
            },
            "yCoordinate": {
              "title": "The Y coordinate of the dip",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Only meter unit is supported for the moment"
            },
            "zCoordinate": {
              "title": "The Z coordinate of the dip",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Only meter unit is supported for the moment"
            },
            "classification": {
              "title": "Classification of the dip",
              "type": "string",
              "description": "Any string is accepted."
            }
          },
          "example": {
            "reference": {
              "unitKey": "meter",
              "value": 1000.5
            },
            "azimuth": {
              "unitKey": "dega",
              "value": 42
            },
            "inclination": {
              "unitKey": "dega",
              "value": 9
            },
            "quality": {
              "unitKey": "unitless",
              "value": 0.5
            },
            "xCoordinate": {
              "unitKey": "meter",
              "value": 2
            },
            "yCoordinate": {
              "unitKey": "meter",
              "value": 45
            },
            "zCoordinate": {
              "unitKey": "meter",
              "value": 7
            },
            "classification": "fracture"
          }
        },
        "DirectionWell": {
          "title": "DirectionWell",
          "enum": [
            "huff-n-puff",
            "injector",
            "producer",
            "uncertain",
            "unknown"
          ],
          "description": "An enumeration."
        },
        "Feature": {
          "title": "Feature",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type1"
            },
            "properties": {
              "title": "Properties",
              "type": "object"
            },
            "geometry": {
              "title": "Geometry",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GeometryItem"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem1"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem2"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem3"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem4"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem5"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem6"
                }
              ]
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "Feature1": {
          "title": "Feature1",
          "required": [
            "type"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type10"
            },
            "properties": {
              "title": "Properties",
              "type": "object"
            },
            "geometry": {
              "title": "Geometry",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GeometryItem7"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem8"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem9"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem10"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem11"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem12"
                },
                {
                  "$ref": "#/components/schemas/GeometryItem13"
                }
              ]
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "FluidWell": {
          "title": "FluidWell",
          "enum": [
            "air",
            "condensate",
            "dry",
            "gas",
            "gas-water",
            "non HC gas",
            "non HC gas -- CO2",
            "oil",
            "oil-gas",
            "oil-water",
            "steam",
            "water",
            "water -- brine",
            "water -- fresh water",
            "unknown"
          ],
          "description": "An enumeration."
        },
        "Format": {
          "title": "Format",
          "enum": [
            "date",
            "date-time",
            "time",
            "byte",
            "binary",
            "boolean",
            "email",
            "uuid",
            "uri",
            "int8",
            "int16",
            "int32",
            "int64",
            "float32",
            "float64",
            "float128"
          ],
          "description": "An enumeration."
        },
        "Format_1": {
          "title": "Format_1",
          "enum": [
            "date",
            "date-time",
            "time",
            "byte",
            "binary",
            "boolean",
            "email",
            "uuid",
            "uri",
            "int8",
            "int16",
            "int32",
            "int64",
            "float32",
            "float64",
            "float128"
          ],
          "description": "An enumeration."
        },
        "Format_2": {
          "title": "Format_2",
          "enum": [
            "date",
            "date-time",
            "time",
            "byte",
            "binary",
            "email",
            "uuid",
            "uri",
            "int8",
            "int16",
            "int32",
            "int64",
            "float32",
            "float64",
            "float128"
          ],
          "description": "An enumeration."
        },
        "GeoJsonFeature": {
          "title": "GeoJsonFeature",
          "required": [
            "geometry",
            "properties",
            "type"
          ],
          "type": "object",
          "properties": {
            "bbox": {
              "title": "Bbox",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "geometry": {
              "title": "Geometry",
              "anyOf": [
                {
                  "$ref": "#/components/schemas/GeoJsonPoint"
                },
                {
                  "$ref": "#/components/schemas/GeoJsonMultiPoint"
                },
                {
                  "$ref": "#/components/schemas/GeoJsonLineString"
                },
                {
                  "$ref": "#/components/schemas/GeoJsonMultiLineString"
                },
                {
                  "$ref": "#/components/schemas/Polygon"
                },
                {
                  "$ref": "#/components/schemas/GeoJsonMultiPolygon"
                },
                {
                  "$ref": "#/components/schemas/geometryItem"
                }
              ]
            },
            "properties": {
              "title": "Properties",
              "type": "object"
            },
            "type": {
              "$ref": "#/components/schemas/Type_1"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "GeoJsonFeatureCollection": {
          "title": "GeoJsonFeatureCollection",
          "required": [
            "features",
            "type"
          ],
          "type": "object",
          "properties": {
            "bbox": {
              "title": "Bbox",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "features": {
              "title": "Features",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/GeoJsonFeature"
              }
            },
            "type": {
              "$ref": "#/components/schemas/Type_2"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "GeoJsonLineString": {
          "title": "GeoJsonLineString",
          "required": [
            "coordinates",
            "type"
          ],
          "type": "object",
          "properties": {
            "bbox": {
              "title": "Bbox",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            },
            "type": {
              "$ref": "#/components/schemas/Type_3"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "GeoJsonMultiLineString": {
          "title": "GeoJsonMultiLineString",
          "required": [
            "coordinates",
            "type"
          ],
          "type": "object",
          "properties": {
            "bbox": {
              "title": "Bbox",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            },
            "type": {
              "$ref": "#/components/schemas/Type_4"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "GeoJsonMultiPoint": {
          "title": "GeoJsonMultiPoint",
          "required": [
            "coordinates",
            "type"
          ],
          "type": "object",
          "properties": {
            "bbox": {
              "title": "Bbox",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "number"
                }
              }
            },
            "type": {
              "$ref": "#/components/schemas/Type_5"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "GeoJsonMultiPolygon": {
          "title": "GeoJsonMultiPolygon",
          "required": [
            "coordinates",
            "type"
          ],
          "type": "object",
          "properties": {
            "bbox": {
              "title": "Bbox",
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "Bounding box in longitude, latitude WGS 84."
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "array",
                    "items": {
                      "type": "number"
                    }
                  }
                }
              },
              "description": "Array of polygons (minimum 2D), containing an array of point coordinates (longitude, latitude, (optionally elevation and other properties)."
            },
            "type": {
              "$ref": "#/components/schemas/Type_6"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "GeoJsonPoint": {
          "title": "GeoJsonPoint",
          "required": [
            "coordinates",
            "type"
          ],
          "type": "object",
          "properties": {
            "bbox": {
              "title": "Bbox",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "type": {
              "$ref": "#/components/schemas/Type_7"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "GeometryItem": {
          "title": "GeometryItem",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type2"
            },
            "coordinates": {
              "title": "Coordinates",
              "minItems": 2,
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem1": {
          "title": "GeometryItem1",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type3"
            },
            "coordinates": {
              "title": "Coordinates",
              "minItems": 2,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coordinate"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem10": {
          "title": "GeometryItem10",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type14"
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coordinate7"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem11": {
          "title": "GeometryItem11",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type15"
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coordinate8"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem12": {
          "title": "GeometryItem12",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type16"
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Coordinate9"
                }
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem13": {
          "title": "GeometryItem13",
          "required": [
            "type",
            "geometries"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type17"
            },
            "geometries": {
              "title": "Geometries",
              "type": "array",
              "items": {}
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem2": {
          "title": "GeometryItem2",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type4"
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coordinate1"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem3": {
          "title": "GeometryItem3",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type5"
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coordinate2"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem4": {
          "title": "GeometryItem4",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type6"
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coordinate3"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem5": {
          "title": "GeometryItem5",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type7"
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Coordinate4"
                }
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem6": {
          "title": "GeometryItem6",
          "required": [
            "type",
            "geometries"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type8"
            },
            "geometries": {
              "title": "Geometries",
              "type": "array",
              "items": {}
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem7": {
          "title": "GeometryItem7",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type11"
            },
            "coordinates": {
              "title": "Coordinates",
              "minItems": 2,
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem8": {
          "title": "GeometryItem8",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type12"
            },
            "coordinates": {
              "title": "Coordinates",
              "minItems": 2,
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coordinate5"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GeometryItem9": {
          "title": "GeometryItem9",
          "required": [
            "type",
            "coordinates"
          ],
          "type": "object",
          "properties": {
            "type": {
              "$ref": "#/components/schemas/Type13"
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Coordinate6"
              }
            },
            "bbox": {
              "title": "Bbox",
              "minItems": 4,
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          }
        },
        "GetStatisticResponse": {
          "title": "GetStatisticResponse",
          "required": [
            "columns"
          ],
          "type": "object",
          "properties": {
            "columns": {
              "title": "Columns",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/StatsColumn"
              }
            }
          }
        },
        "GuessRequest": {
          "title": "GuessRequest",
          "required": [
            "label"
          ],
          "type": "object",
          "properties": {
            "label": {
              "title": "Label",
              "type": "string"
            },
            "log_unit": {
              "title": "Log Unit",
              "type": "string"
            },
            "description": {
              "title": "Description",
              "type": "string"
            }
          },
          "example": {
            "label": "GRD",
            "log_unit": "GAPI",
            "description": "LDTD Gamma Ray"
          }
        },
        "GuessResponse": {
          "title": "GuessResponse",
          "type": "object",
          "properties": {
            "family": {
              "title": "Family",
              "type": "string"
            },
            "family_type": {
              "title": "Family Type",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "log_unit": {
              "title": "Log Unit",
              "type": "string"
            },
            "base_unit": {
              "title": "Base Unit",
              "type": "string"
            }
          }
        },
        "HTTPValidationError": {
          "title": "HTTPValidationError",
          "type": "object",
          "properties": {
            "errors": {
              "title": "Errors",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ValidationError"
              }
            }
          }
        },
        "Kind": {
          "title": "Kind",
          "enum": [
            "CRS",
            "Unit",
            "Measurement",
            "AzimuthReference",
            "DateTime"
          ],
          "type": "string",
          "description": "An enumeration."
        },
        "LineageAssertion": {
          "title": "LineageAssertion",
          "type": "object",
          "properties": {
            "ID": {
              "title": "Id",
              "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The object reference identifying the DIRECT, INDIRECT, REFERENCE dependency."
            },
            "LineageRelationshipType": {
              "title": "Lineagerelationshiptype",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-LineageRelationshipType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Used by LineageAssertion to describe the nature of the line of descent of a work product component from a prior Resource, such as DIRECT, INDIRECT, REFERENCE.  It is not for proximity (number of nodes away), it is not to cover all the relationships in a full ontology or graph, and it is not to describe the type of activity that created the asserting WPC.  LineageAssertion does not encompass a full provenance, process history, or activity model."
            }
          }
        },
        "LinkList": {
          "title": "LinkList",
          "type": "object",
          "properties": {},
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "LogServiceDateInterval": {
          "title": "LogServiceDateInterval",
          "type": "object",
          "properties": {
            "StartDate": {
              "title": "Startdate",
              "type": "string",
              "format": "date-time"
            },
            "EndDate": {
              "title": "Enddate",
              "type": "string",
              "format": "date-time"
            }
          },
          "description": "An interval built from two nested values : StartDate and EndDate. It applies to the whole log services and may apply to composite logs as [start of the first run job] and [end of the last run job]Log Service Date"
        },
        "MainFamilyCatalogItem": {
          "title": "MainFamilyCatalogItem",
          "required": [
            "MainFamily",
            "Family",
            "Unit"
          ],
          "type": "object",
          "properties": {
            "MainFamily": {
              "title": "Mainfamily",
              "type": "string"
            },
            "Family": {
              "title": "Family",
              "type": "string"
            },
            "Unit": {
              "title": "Unit",
              "type": "string"
            }
          }
        },
        "MetaItem": {
          "title": "MetaItem",
          "required": [
            "kind",
            "persistableReference"
          ],
          "type": "object",
          "properties": {
            "kind": {
              "title": "Reference Kind",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Kind"
                }
              ],
              "description": "The kind of reference, unit, measurement, CRS or azimuth reference."
            },
            "name": {
              "title": "Name or Symbol",
              "type": "string",
              "description": "The name of the CRS or the symbol/name of the unit"
            },
            "persistableReference": {
              "title": "Persistable Reference",
              "type": "string",
              "description": "The persistable reference string uniquely identifying the CRS or Unit"
            },
            "propertyNames": {
              "title": "Attribute Names",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The list of property names, to which this meta data item provides Unit/CRS context to. Data structures, which come in a single frame of reference, can register the property name, others require a full path like \"data.structureA.propertyB\" to define a unique context."
            },
            "propertyValues": {
              "title": "Attribute Names",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The list of property values, to which this meta data item provides Unit/CRS context to. Typically a unit symbol is a value to a data structure; this symbol is then registered in this propertyValues array and the persistableReference provides the absolute reference."
            },
            "uncertainty": {
              "title": "Uncertainty",
              "type": "number",
              "description": "The uncertainty of the values measured given the unit or CRS unit."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "OtherRelevantDataCountry": {
          "title": "OtherRelevantDataCountry",
          "pattern": "^[A-Z]{2}$",
          "type": "string"
        },
        "Owner": {
          "title": "Owner",
          "pattern": "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$",
          "type": "string"
        },
        "Parent": {
          "title": "Parent",
          "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.\\:\\%]+:[0-9]+$",
          "type": "string"
        },
        "PlssLocation": {
          "title": "PlssLocation",
          "required": [
            "range",
            "section",
            "township"
          ],
          "type": "object",
          "properties": {
            "aliquotPart": {
              "title": "Aliquot Part",
              "type": "string",
              "description": "A terse, hierarchical reference to a piece of land, in which successive subdivisions of some larger area."
            },
            "range": {
              "title": "Range",
              "type": "string",
              "description": "Range, also known as Rng, R; a measure of the distance east or west from a referenced principal meridian, in units of six miles."
            },
            "section": {
              "title": "Section Number",
              "type": "integer",
              "description": "Section number (between 1 and 36)"
            },
            "township": {
              "title": "Township",
              "type": "string",
              "description": "Township, also known as T or Twp; (1) Synonym for survey township, i.e., a square parcel of land of 36 square miles, or (2) A measure of the distance north or south from a referenced baseline, in units of six miles"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "Point3dNonGeoJson": {
          "title": "Point3dNonGeoJson",
          "required": [
            "coordinates",
            "crsKey",
            "unitKey"
          ],
          "type": "object",
          "properties": {
            "coordinates": {
              "title": "3D Point",
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "3-dimensional point; the first coordinate is typically pointing east (easting or longitude), the second coordinate typically points north (northing or latitude). The third coordinate is an elevation (upwards positive, downwards negative). The point's CRS is given by the container."
            },
            "crsKey": {
              "title": "CRS Key",
              "type": "string",
              "description": "The 'crsKey', which can be looked up in the 'frameOfReference.crs' for further details."
            },
            "unitKey": {
              "title": "Unit Key",
              "type": "string",
              "description": "The 'unitKey' for the 3rd coordinate, which can be looked up in the 'frameOfReference.unit' for further details."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "Polygon": {
          "title": "Polygon",
          "required": [
            "coordinates",
            "type"
          ],
          "type": "object",
          "properties": {
            "bbox": {
              "title": "Bbox",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "coordinates": {
              "title": "Coordinates",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            },
            "type": {
              "$ref": "#/components/schemas/Type_8"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "ReferenceType": {
          "title": "ReferenceType",
          "enum": [
            "Date",
            "Date Time",
            "Measured Depth",
            "Core depth",
            "True Vertical Depth",
            "True Vertical Depth Sub Sea",
            "One-Way Time",
            "Two-Way Time"
          ],
          "description": "An enumeration."
        },
        "ResourceHostRegionID": {
          "title": "ResourceHostRegionID",
          "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-OSDURegion:[\\w\\-\\.\\:\\%]+:[0-9]*$",
          "type": "string"
        },
        "SearchQuery": {
          "title": "SearchQuery",
          "type": "object",
          "properties": {
            "query": {
              "title": "Query",
              "type": "string"
            }
          }
        },
        "Shape": {
          "title": "Shape",
          "enum": [
            "build and hold",
            "deviated",
            "double kickoff",
            "horizontal",
            "S-shaped",
            "vertical",
            "unknown"
          ],
          "description": "An enumeration."
        },
        "SimpleElevationReference": {
          "title": "SimpleElevationReference",
          "required": [
            "elevationFromMsl"
          ],
          "type": "object",
          "properties": {
            "elevationFromMsl": {
              "title": "Elevation from MSL",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The elevation above mean sea level (MSL), at which the vertical origin is 0.0. The 'unitKey' is further defined in 'frameOfReference.units'."
            },
            "name": {
              "title": "Elevation Reference Name",
              "type": "string",
              "description": "The name of the Elevation Reference."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "StatsColumn": {
          "title": "StatsColumn",
          "required": [
            "count",
            "mean",
            "std",
            "min",
            "25%",
            "50%",
            "75%",
            "max"
          ],
          "type": "object",
          "properties": {
            "count": {
              "title": "Count",
              "type": "integer",
              "description": "Count number of non-NA/null observations"
            },
            "mean": {
              "title": "Mean",
              "type": "number",
              "description": "Mean of the values"
            },
            "std": {
              "title": "Std",
              "type": "number",
              "description": "Standard deviation of the observations"
            },
            "min": {
              "title": "Min",
              "type": "number",
              "description": "Minimum of the values in the object"
            },
            "25%": {
              "title": "25%",
              "type": "number"
            },
            "50%": {
              "title": "50%",
              "type": "number"
            },
            "75%": {
              "title": "75%",
              "type": "number"
            },
            "max": {
              "title": "Max",
              "type": "number",
              "description": "Maximum of the values in the object"
            }
          }
        },
        "StorageAcl": {
          "title": "StorageAcl",
          "required": [
            "viewers",
            "owners"
          ],
          "type": "object",
          "properties": {
            "viewers": {
              "title": "Viewers",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "owners": {
              "title": "Owners",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "TagDictionary": {
          "title": "TagDictionary",
          "type": "object",
          "properties": {},
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "ToOneRelationship": {
          "title": "ToOneRelationship",
          "type": "object",
          "properties": {
            "confidence": {
              "title": "Relationship Confidence",
              "type": "number",
              "description": "The confidence of the relationship. If the property is absent a well-known relation is implied."
            },
            "id": {
              "title": "Related Object Id",
              "type": "string",
              "description": "The id of the related object in the Data Ecosystem. If set, the id has priority over the natural key in the name property."
            },
            "name": {
              "title": "Related Object Name",
              "type": "string",
              "description": "The name or natural key of the related object. This property is required if the target object id could not (yet) be identified."
            },
            "version": {
              "title": "Entity Version Number",
              "type": "number",
              "description": "The version number of the related entity. If no version number is specified, the last version is implied."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "Type1": {
          "title": "Type1",
          "enum": [
            "AnyCrsFeature"
          ],
          "description": "An enumeration."
        },
        "Type10": {
          "title": "Type10",
          "enum": [
            "Feature"
          ],
          "description": "An enumeration."
        },
        "Type11": {
          "title": "Type11",
          "enum": [
            "Point"
          ],
          "description": "An enumeration."
        },
        "Type12": {
          "title": "Type12",
          "enum": [
            "LineString"
          ],
          "description": "An enumeration."
        },
        "Type13": {
          "title": "Type13",
          "enum": [
            "Polygon"
          ],
          "description": "An enumeration."
        },
        "Type14": {
          "title": "Type14",
          "enum": [
            "MultiPoint"
          ],
          "description": "An enumeration."
        },
        "Type15": {
          "title": "Type15",
          "enum": [
            "MultiLineString"
          ],
          "description": "An enumeration."
        },
        "Type16": {
          "title": "Type16",
          "enum": [
            "MultiPolygon"
          ],
          "description": "An enumeration."
        },
        "Type17": {
          "title": "Type17",
          "enum": [
            "GeometryCollection"
          ],
          "description": "An enumeration."
        },
        "Type2": {
          "title": "Type2",
          "enum": [
            "AnyCrsPoint"
          ],
          "description": "An enumeration."
        },
        "Type3": {
          "title": "Type3",
          "enum": [
            "AnyCrsLineString"
          ],
          "description": "An enumeration."
        },
        "Type4": {
          "title": "Type4",
          "enum": [
            "AnyCrsPolygon"
          ],
          "description": "An enumeration."
        },
        "Type5": {
          "title": "Type5",
          "enum": [
            "AnyCrsMultiPoint"
          ],
          "description": "An enumeration."
        },
        "Type6": {
          "title": "Type6",
          "enum": [
            "AnyCrsMultiLineString"
          ],
          "description": "An enumeration."
        },
        "Type7": {
          "title": "Type7",
          "enum": [
            "AnyCrsMultiPolygon"
          ],
          "description": "An enumeration."
        },
        "Type8": {
          "title": "Type8",
          "enum": [
            "AnyCrsGeometryCollection"
          ],
          "description": "An enumeration."
        },
        "Type9": {
          "title": "Type9",
          "enum": [
            "FeatureCollection"
          ],
          "description": "An enumeration."
        },
        "Type_1": {
          "title": "Type_1",
          "enum": [
            "Feature"
          ],
          "description": "An enumeration."
        },
        "Type_2": {
          "title": "Type_2",
          "enum": [
            "FeatureCollection"
          ],
          "description": "An enumeration."
        },
        "Type_3": {
          "title": "Type_3",
          "enum": [
            "LineString"
          ],
          "description": "An enumeration."
        },
        "Type_4": {
          "title": "Type_4",
          "enum": [
            "MultiLineString"
          ],
          "description": "An enumeration."
        },
        "Type_5": {
          "title": "Type_5",
          "enum": [
            "MultiPoint"
          ],
          "description": "An enumeration."
        },
        "Type_6": {
          "title": "Type_6",
          "enum": [
            "MultiPolygon"
          ],
          "description": "An enumeration."
        },
        "Type_7": {
          "title": "Type_7",
          "enum": [
            "Point"
          ],
          "description": "An enumeration."
        },
        "Type_8": {
          "title": "Type_8",
          "enum": [
            "Polygon"
          ],
          "description": "An enumeration."
        },
        "V1AboutResponse": {
          "title": "V1AboutResponse",
          "type": "object",
          "properties": {
            "user": {
              "$ref": "#/components/schemas/AboutResponseUser"
            },
            "dmsInfo": {
              "$ref": "#/components/schemas/V1DmsInfo"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "V1DmsInfo": {
          "title": "V1DmsInfo",
          "type": "object",
          "properties": {
            "kinds": {
              "title": "Kinds",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "ValidationError": {
          "title": "ValidationError",
          "required": [
            "loc",
            "msg",
            "type"
          ],
          "type": "object",
          "properties": {
            "loc": {
              "title": "Location",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "msg": {
              "title": "Message",
              "type": "string"
            },
            "type": {
              "title": "Error Type",
              "type": "string"
            }
          }
        },
        "ValueWithUnit": {
          "title": "ValueWithUnit",
          "required": [
            "unitKey",
            "value"
          ],
          "type": "object",
          "properties": {
            "unitKey": {
              "title": "Unit Key",
              "type": "string",
              "description": "Unit for value of the corresponding attribute for the domain object in question. The key can be looked up in the 'frameOfReference.units' for further details."
            },
            "value": {
              "title": "Value",
              "type": "number",
              "description": "Value of the corresponding attribute for the domain object in question."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "VersionDetailsResponse": {
          "title": "VersionDetailsResponse",
          "type": "object",
          "properties": {
            "service": {
              "title": "Service",
              "type": "string"
            },
            "version": {
              "title": "Version",
              "type": "string"
            },
            "buildNumber": {
              "title": "Buildnumber",
              "type": "string"
            },
            "details": {
              "title": "Details",
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "VerticalMeasurement": {
          "title": "VerticalMeasurement",
          "type": "object",
          "properties": {
            "EffectiveDateTime": {
              "title": "Effectivedatetime",
              "type": "string",
              "description": "The date and time at which a vertical measurement instance becomes effective.",
              "format": "date-time"
            },
            "VerticalMeasurement": {
              "title": "Verticalmeasurement",
              "type": "number",
              "description": "The value of the elevation or depth. Depth is positive downwards from a vertical reference or geodetic datum along a path, which can be vertical; elevation is positive upwards from a geodetic datum along a vertical path. Either can be negative."
            },
            "TerminationDateTime": {
              "title": "Terminationdatetime",
              "type": "string",
              "description": "The date and time at which a vertical measurement instance is no longer in effect.",
              "format": "date-time"
            },
            "VerticalMeasurementTypeID": {
              "title": "Verticalmeasurementtypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-VerticalMeasurementType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Specifies the type of vertical measurement (TD, Plugback, Kickoff, Drill Floor, Rotary Table...)."
            },
            "VerticalMeasurementPathID": {
              "title": "Verticalmeasurementpathid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-VerticalMeasurementPath:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Specifies Measured Depth, True Vertical Depth, or Elevation."
            },
            "VerticalMeasurementSourceID": {
              "title": "Verticalmeasurementsourceid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-VerticalMeasurementSource:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Specifies Driller vs Logger."
            },
            "WellboreTVDTrajectoryID": {
              "title": "Wellboretvdtrajectoryid",
              "pattern": "^[\\w\\-\\.]+:work-product-component\\-\\-WellboreTrajectory:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Specifies what directional survey or wellpath was used to calculate the TVD."
            },
            "VerticalMeasurementUnitOfMeasureID": {
              "title": "Verticalmeasurementunitofmeasureid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-UnitOfMeasure:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The unit of measure for the vertical measurement. If a unit of measure and a vertical CRS are provided, the unit of measure provided is taken over the unit of measure from the CRS."
            },
            "VerticalCRSID": {
              "title": "Verticalcrsid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-CoordinateReferenceSystem:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "A vertical coordinate reference system defines the origin for height or depth values. It is expected that either VerticalCRSID or VerticalReferenceID reference is provided in a given vertical measurement array object, but not both."
            },
            "VerticalReferenceID": {
              "title": "Verticalreferenceid",
              "type": "string",
              "description": "The reference point from which the relative vertical measurement is made. This is only populated if the measurement has no VerticalCRSID specified. The value entered must be the VerticalMeasurementID for another vertical measurement array element in this resource or its parent facility, and as a chain of measurements, they must resolve ultimately to a Vertical CRS. It is expected that a VerticalCRSID or a VerticalReferenceID is provided in a given vertical measurement array object, but not both."
            },
            "VerticalMeasurementDescription": {
              "title": "Verticalmeasurementdescription",
              "type": "string",
              "description": "Text which describes a vertical measurement in detail."
            },
            "VerticalMeasurementID": {
              "title": "Verticalmeasurementid",
              "type": "string",
              "description": "The ID for a distinct vertical measurement within the Wellbore VerticalMeasurements array so that it may be referenced by other vertical measurements if necessary."
            }
          },
          "description": "A location along a wellbore, _usually_ associated with some aspect of the drilling of the wellbore, but not with any intersecting _subsurface_ natural surfaces."
        },
        "Viewer": {
          "title": "Viewer",
          "pattern": "^[a-zA-Z0-9_+&*-]+(?:\\.[a-zA-Z0-9_+&*-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,7}$",
          "type": "string"
        },
        "Well": {
          "title": "Well",
          "required": [
            "kind",
            "acl",
            "legal"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Entity ID",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Well:[\\w\\-\\.\\:\\%]+$",
              "type": "string",
              "description": "Previously called ResourceID or SRN which identifies this OSDU resource object without version.",
              "example": "namespace:master-data--Well:6c60ceb0-3521-57b7-9bd8-e1d7c9f66230"
            },
            "kind": {
              "title": "Entity Kind",
              "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.]+:[0-9]+.[0-9]+.[0-9]+$",
              "type": "string",
              "description": "The schema identification for the OSDU resource object following the pattern {Namespace}:{Source}:{Type}:{VersionMajor}.{VersionMinor}.{VersionPatch}. The versioning scheme follows the semantic versioning, https://semver.org/.",
              "example": "osdu:wks:master-data--Well:1.0.0"
            },
            "version": {
              "title": "Version Number",
              "type": "integer",
              "description": "The version number of this OSDU resource; set by the framework.",
              "example": 1562066009929332
            },
            "acl": {
              "title": "Access Control List",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractAccessControlList100"
                }
              ],
              "description": "The access control tags associated with this entity."
            },
            "legal": {
              "title": "Legal Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractLegalTags100"
                }
              ],
              "description": "The entity's legal tags and compliance status. The actual contents associated with the legal tags is managed by the Compliance Service."
            },
            "tags": {
              "title": "Tag Dictionary",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/app__model__osdu_model__Tags"
              },
              "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
              "example": {
                "NameOfKey": "String value"
              }
            },
            "createTime": {
              "title": "Resource Object Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:46:20.163Z"
            },
            "createUser": {
              "title": "Resource Object Creation User Reference",
              "type": "string",
              "description": "The user reference, which created the first version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "modifyTime": {
              "title": "Resource Object Version Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:52:24.477Z"
            },
            "modifyUser": {
              "title": "Resource Object Version Creation User Reference",
              "type": "string",
              "description": "The user reference, which created this version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "ancestry": {
              "title": "Ancestry",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractLegalParentList100"
                }
              ],
              "description": "The links to data, which constitute the inputs."
            },
            "meta": {
              "title": "Frame of Reference Meta Data",
              "type": "array",
              "items": {},
              "description": "The Frame of Reference meta data section linking the named properties to self-contained definitions."
            },
            "data": {
              "$ref": "#/components/schemas/WellData"
            }
          },
          "description": "The origin of a set of wellbores."
        },
        "WellBoreData": {
          "title": "WellBoreData",
          "type": "object",
          "properties": {
            "FacilityID": {
              "title": "Facilityid",
              "type": "string",
              "description": "A system-specified unique identifier of a Facility."
            },
            "FacilityTypeID": {
              "title": "Facilitytypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-FacilityType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The definition of a kind of capability to perform a business function or a service."
            },
            "FacilityOperators": {
              "title": "Facilityoperators",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractFacilityOperator100"
              },
              "description": "The history of operator organizations of the facility."
            },
            "InitialOperatorID": {
              "title": "Initial Operator ID",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Organisation:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "A initial operator organization ID; the organization ID may also be found in the FacilityOperatorOrganisationID of the FacilityOperator array providing the actual dates."
            },
            "CurrentOperatorID": {
              "title": "Current Operator ID",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Organisation:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The current operator organization ID; the organization ID may also be found in the FacilityOperatorOrganisationID of the FacilityOperator array providing the actual dates."
            },
            "DataSourceOrganisationID": {
              "title": "Datasourceorganisationid",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Organisation:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The main source of the header information."
            },
            "OperatingEnvironmentID": {
              "title": "Operatingenvironmentid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-OperatingEnvironment:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Identifies the Facility's general location as being onshore vs. offshore."
            },
            "FacilityName": {
              "title": "Facilityname",
              "type": "string",
              "description": "Name of the Facility."
            },
            "FacilityNameAliases": {
              "title": "Facilitynamealiases",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractAliasNames100"
              },
              "description": "Alternative names, including historical, by which this facility is/has been known."
            },
            "FacilityStates": {
              "title": "Facilitystates",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractFacilityState100"
              },
              "description": "The history of life cycle states the facility has been through."
            },
            "FacilityEvents": {
              "title": "Facilityevents",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractFacilityEvent100"
              },
              "description": "A list of key facility events."
            },
            "FacilitySpecifications": {
              "title": "Facilityspecifications",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractFacilitySpecification100"
              },
              "description": "facilitySpecification maintains the specification like slot name, wellbore drilling permit number, rig name etc."
            },
            "NameAliases": {
              "title": "Namealiases",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractAliasNames100"
              },
              "description": "Alternative names, including historical, by which this master data is/has been known (it should include all the identifiers)."
            },
            "GeoContexts": {
              "title": "Geocontexts",
              "type": "array",
              "items": {},
              "description": "List of geographic entities which provide context to the master data. This may include multiple types or multiple values of the same type."
            },
            "SpatialLocation": {
              "title": "Spatiallocation",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractSpatialLocation100"
                }
              ],
              "description": "The spatial location information such as coordinates, CRS information (left empty when not appropriate)."
            },
            "VersionCreationReason": {
              "title": "Versioncreationreason",
              "type": "string",
              "description": "This describes the reason that caused the creation of a new version of this master data."
            },
            "ResourceHomeRegionID": {
              "title": "Resource Home Region ID",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-OSDURegion:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The name of the home [cloud environment] region for this OSDU resource object."
            },
            "ResourceHostRegionIDs": {
              "title": "Resource Host Region ID",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceHostRegionID"
              },
              "description": "The name of the host [cloud environment] region(s) for this OSDU resource object."
            },
            "ResourceCurationStatus": {
              "title": "Resource Curation Status",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceCurationStatus:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Describes the current Curation status."
            },
            "ResourceLifecycleStatus": {
              "title": "Resource Lifecycle Status",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceLifecycleStatus:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Describes the current Resource Lifecycle status."
            },
            "ResourceSecurityClassification": {
              "title": "Resource Security Classification",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceSecurityClassification:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Classifies the security level of the resource."
            },
            "Source": {
              "title": "Data Source",
              "type": "string",
              "description": "The entity that produced the record, or from which it is received; could be an organization, agency, system, internal team, or individual. For informational purposes only, the list of sources is not governed."
            },
            "ExistenceKind": {
              "title": "Existence Kind",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ExistenceKind:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Where does this data resource sit in the cradle-to-grave span of its existence?"
            },
            "WellID": {
              "title": "Wellid",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Well:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string"
            },
            "SequenceNumber": {
              "title": "Sequencenumber",
              "type": "integer",
              "description": "A number that indicates the order in which wellbores were drilled."
            },
            "VerticalMeasurements": {
              "title": "Verticalmeasurements",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerticalMeasurement"
              },
              "description": "List of all depths and elevations pertaining to the wellbore, like, plug back measured depth, total measured depth, KB elevation"
            },
            "DrillingReasons": {
              "title": "Drillingreasons",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractWellboreDrillingReason100"
              },
              "description": "The history of drilling reasons of the wellbore."
            },
            "KickOffWellbore": {
              "title": "Kickoffwellbore",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Wellbore:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "This is a pointer to the parent wellbore. The wellbore that starts from top has no parent."
            },
            "TrajectoryTypeID": {
              "title": "Trajectorytypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WellboreTrajectoryType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Describes the predominant shapes the wellbore path can follow if deviated from vertical. Sample Values: Horizontal, Vertical, Directional."
            },
            "DefinitiveTrajectoryID": {
              "title": "Definitivetrajectoryid",
              "pattern": "^[\\w\\-\\.]+:work-product-component\\-\\-WellboreTrajectory:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "SRN of Wellbore Trajectory which is considered the authoritative or preferred version."
            },
            "TargetFormation": {
              "title": "Targetformation",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-GeologicalFormation:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The Formation of interest for which the Wellbore is drilled to interact with. The Wellbore may terminate in a lower formation if the requirement is to drill through the entirety of the target formation, therefore this is not necessarily the Formation at TD."
            },
            "PrimaryMaterialID": {
              "title": "Primarymaterialid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-MaterialType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The primary material injected/produced from the wellbore."
            },
            "DefaultVerticalMeasurementID": {
              "title": "Defaultverticalmeasurementid",
              "type": "string",
              "description": "The default datum reference point, or zero depth point, used to determine other points vertically in a wellbore.  References an entry in the Vertical Measurements array of this wellbore."
            },
            "ProjectedBottomHoleLocation": {
              "title": "Projectedbottomholelocation",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractSpatialLocation100"
                }
              ],
              "description": "The bottom hole location of the wellbore denoted by a projected horizontal coordinate reference system (Horizontal CRS), such a UTM zone. 'Projected' in this property does not mean 'planned' or 'projected-to-bit'. If both GeographicBottomHoleLocation and ProjectedBottomHoleLocation properties are populated on this wellbore, they must identify the same point, just in different CRSs."
            },
            "GeographicBottomHoleLocation": {
              "title": "Geographicbottomholelocation",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractSpatialLocation100"
                }
              ],
              "description": "The bottom hole location of the wellbore denoted by a specified geographic horizontal coordinate reference system (Horizontal CRS), such as WGS84, NAD27, or ED50. If both GeographicBottomHoleLocation and ProjectedBottomHoleLocation properties are populated on this wellbore, they must identify the same point, just in different CRSs."
            },
            "ExtensionProperties": {
              "title": "Extensionproperties",
              "type": "object"
            }
          },
          "description": "Common resources to be injected at root 'data' level for every entity, which is persistable in Storage. The insertion is performed by the OsduSchemaComposer script."
        },
        "WellData": {
          "title": "WellData",
          "type": "object",
          "properties": {
            "FacilityID": {
              "title": "Facilityid",
              "type": "string",
              "description": "A system-specified unique identifier of a Facility."
            },
            "FacilityTypeID": {
              "title": "Facilitytypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-FacilityType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The definition of a kind of capability to perform a business function or a service."
            },
            "FacilityOperators": {
              "title": "Facilityoperators",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractFacilityOperator100"
              },
              "description": "The history of operator organizations of the facility."
            },
            "InitialOperatorID": {
              "title": "Initial Operator ID",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Organisation:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "A initial operator organization ID; the organization ID may also be found in the FacilityOperatorOrganisationID of the FacilityOperator array providing the actual dates."
            },
            "CurrentOperatorID": {
              "title": "Current Operator ID",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Organisation:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The current operator organization ID; the organization ID may also be found in the FacilityOperatorOrganisationID of the FacilityOperator array providing the actual dates."
            },
            "DataSourceOrganisationID": {
              "title": "Datasourceorganisationid",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Organisation:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The main source of the header information."
            },
            "OperatingEnvironmentID": {
              "title": "Operatingenvironmentid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-OperatingEnvironment:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Identifies the Facility's general location as being onshore vs. offshore."
            },
            "FacilityName": {
              "title": "Facilityname",
              "type": "string",
              "description": "Name of the Facility."
            },
            "FacilityNameAliases": {
              "title": "Facilitynamealiases",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractAliasNames100"
              },
              "description": "Alternative names, including historical, by which this facility is/has been known."
            },
            "FacilityStates": {
              "title": "Facilitystates",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractFacilityState100"
              },
              "description": "The history of life cycle states the facility has been through."
            },
            "FacilityEvents": {
              "title": "Facilityevents",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractFacilityEvent100"
              },
              "description": "A list of key facility events."
            },
            "FacilitySpecifications": {
              "title": "Facilityspecifications",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractFacilitySpecification100"
              },
              "description": "facilitySpecification maintains the specification like slot name, wellbore drilling permit number, rig name etc."
            },
            "NameAliases": {
              "title": "Namealiases",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AbstractAliasNames100"
              },
              "description": "Alternative names, including historical, by which this master data is/has been known (it should include all the identifiers)."
            },
            "GeoContexts": {
              "title": "Geocontexts",
              "type": "array",
              "items": {},
              "description": "List of geographic entities which provide context to the master data. This may include multiple types or multiple values of the same type."
            },
            "SpatialLocation": {
              "title": "Spatiallocation",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractSpatialLocation100"
                }
              ],
              "description": "The spatial location information such as coordinates, CRS information (left empty when not appropriate)."
            },
            "VersionCreationReason": {
              "title": "Versioncreationreason",
              "type": "string",
              "description": "This describes the reason that caused the creation of a new version of this master data."
            },
            "ResourceHomeRegionID": {
              "title": "Resource Home Region ID",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-OSDURegion:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The name of the home [cloud environment] region for this OSDU resource object."
            },
            "ResourceHostRegionIDs": {
              "title": "Resource Host Region ID",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceHostRegionID"
              },
              "description": "The name of the host [cloud environment] region(s) for this OSDU resource object."
            },
            "ResourceCurationStatus": {
              "title": "Resource Curation Status",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceCurationStatus:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Describes the current Curation status."
            },
            "ResourceLifecycleStatus": {
              "title": "Resource Lifecycle Status",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceLifecycleStatus:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Describes the current Resource Lifecycle status."
            },
            "ResourceSecurityClassification": {
              "title": "Resource Security Classification",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceSecurityClassification:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Classifies the security level of the resource."
            },
            "Source": {
              "title": "Data Source",
              "type": "string",
              "description": "The entity that produced the record, or from which it is received; could be an organization, agency, system, internal team, or individual. For informational purposes only, the list of sources is not governed."
            },
            "ExistenceKind": {
              "title": "Existence Kind",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ExistenceKind:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Where does this data resource sit in the cradle-to-grave span of its existence?"
            },
            "DefaultVerticalMeasurementID": {
              "title": "Defaultverticalmeasurementid",
              "type": "string",
              "description": "The default datum reference point, or zero depth point, used to determine other points vertically in a well.  References an entry in the VerticalMeasurements array."
            },
            "DefaultVerticalCRSID": {
              "title": "Defaultverticalcrsid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-CoordinateReferenceSystem:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The default vertical coordinate reference system used in the vertical measurements for a well or wellbore if absent from input vertical measurements and there is no other recourse for obtaining a valid CRS."
            },
            "VerticalMeasurements": {
              "title": "Verticalmeasurements",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/VerticalMeasurement"
              },
              "description": "List of all depths and elevations pertaining to the well, like, water depth, mud line elevation, etc."
            },
            "InterestTypeID": {
              "title": "Interesttypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-WellInterestType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Pre-defined reasons for interest in the well or information about the well."
            },
            "ExtensionProperties": {
              "title": "Extensionproperties",
              "type": "object"
            }
          },
          "description": "Common resources to be injected at root 'data' level for every entity, which is persistable in Storage. The insertion is performed by the OsduSchemaComposer script."
        },
        "WellLocationType": {
          "title": "WellLocationType",
          "enum": [
            "Onshore",
            "Offshore",
            "unknown"
          ],
          "description": "An enumeration."
        },
        "WellLog": {
          "title": "WellLog",
          "required": [
            "kind",
            "acl",
            "legal"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Entity ID",
              "pattern": "^[\\w\\-\\.]+:work-product-component\\-\\-WellLog:[\\w\\-\\.\\:\\%]+$",
              "type": "string",
              "description": "Previously called ResourceID or SRN which identifies this OSDU resource object without version.",
              "example": "namespace:work-product-component--WellLog:c2c79f1c-90ca-5c92-b8df-04dbe438f414"
            },
            "kind": {
              "title": "Entity Kind",
              "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.]+:[0-9]+.[0-9]+.[0-9]+$",
              "type": "string",
              "description": "The schema identification for the OSDU resource object following the pattern {Namespace}:{Source}:{Type}:{VersionMajor}.{VersionMinor}.{VersionPatch}. The versioning scheme follows the semantic versioning, https://semver.org/.",
              "example": "osdu:wks:work-product-component--WellLog:1.0.0"
            },
            "version": {
              "title": "Version Number",
              "type": "integer",
              "description": "The version number of this OSDU resource; set by the framework.",
              "example": 1562066009929332
            },
            "acl": {
              "title": "Access Control List",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractAccessControlList100"
                }
              ],
              "description": "The access control tags associated with this entity."
            },
            "legal": {
              "title": "Legal Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractLegalTags100"
                }
              ],
              "description": "The entity's legal tags and compliance status. The actual contents associated with the legal tags is managed by the Compliance Service."
            },
            "tags": {
              "title": "Tag Dictionary",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/app__model__osdu_model__Tags"
              },
              "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
              "example": {
                "NameOfKey": "String value"
              }
            },
            "createTime": {
              "title": "Resource Object Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:46:20.163Z"
            },
            "createUser": {
              "title": "Resource Object Creation User Reference",
              "type": "string",
              "description": "The user reference, which created the first version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "modifyTime": {
              "title": "Resource Object Version Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:52:24.477Z"
            },
            "modifyUser": {
              "title": "Resource Object Version Creation User Reference",
              "type": "string",
              "description": "The user reference, which created this version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "ancestry": {
              "title": "Ancestry",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractLegalParentList100"
                }
              ],
              "description": "The links to data, which constitute the inputs."
            },
            "meta": {
              "title": "Frame of Reference Meta Data",
              "type": "array",
              "items": {},
              "description": "The Frame of Reference meta data section linking the named properties to self-contained definitions."
            },
            "data": {
              "$ref": "#/components/schemas/WellLogData"
            }
          }
        },
        "WellLogData": {
          "title": "WellLogData",
          "type": "object",
          "properties": {
            "Name": {
              "title": "Name",
              "type": "string",
              "description": "Name"
            },
            "Description": {
              "title": "Description",
              "type": "string",
              "description": "Description.  Summary of the work product component.  Not the same as Remark which captures thoughts of creator about the wpc."
            },
            "CreationDateTime": {
              "title": "Creationdatetime",
              "type": "string",
              "description": "Date that a resource (work  product component here) is formed outside of OSDU before loading (e.g. publication date).",
              "format": "date-time"
            },
            "Tags": {
              "title": "Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of key words to identify the work product, especially to help in search."
            },
            "SpatialPoint": {
              "title": "Spatialpoint",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractSpatialLocation100"
                }
              ],
              "description": "A centroid point that reflects the locale of the content of the work product component (location of the subject matter)."
            },
            "SpatialArea": {
              "title": "Spatialarea",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractSpatialLocation100"
                }
              ],
              "description": "A polygon boundary that reflects the locale of the content of the work product component (location of the subject matter)."
            },
            "GeoContexts": {
              "title": "Geocontexts",
              "type": "array",
              "items": {},
              "description": "List of geographic entities which provide context to the WPC.  This may include multiple types or multiple values of the same type."
            },
            "SubmitterName": {
              "title": "Submittername",
              "type": "string",
              "description": "Name of the person that first submitted the work product component to OSDU."
            },
            "BusinessActivities": {
              "title": "Businessactivities",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of business processes/workflows that the work product component has been through (ex. well planning, exploration)."
            },
            "AuthorIDs": {
              "title": "Authorids",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Array of Authors' names of the work product component.  Could be a person or company entity."
            },
            "LineageAssertions": {
              "title": "Lineageassertions",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/LineageAssertion"
              },
              "description": "Defines relationships with other objects (any kind of Resource) upon which this work product component depends.  The assertion is directed only from the asserting WPC to ancestor objects, not children.  It should not be used to refer to files or artefacts within the WPC -- the association within the WPC is sufficient and Artefacts are actually children of the main WPC file. They should be recorded in the Data.Artefacts[] array."
            },
            "Datasets": {
              "title": "Datasets",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Dataset"
              }
            },
            "Artefacts": {
              "title": "Artefacts",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Artefact"
              },
              "description": "An array of Artefacts - each artefact has a Role, Resource tuple. An artefact is distinct from the file, in the sense certain valuable information is generated during loading process (Artefact generation process). Examples include retrieving location data, performing an OCR which may result in the generation of artefacts which need to be preserved distinctly"
            },
            "IsExtendedLoad": {
              "title": "Isextendedload",
              "type": "boolean",
              "description": "A flag that indicates if the work product component is undergoing an extended load.  It reflects the fact that the work product component is in an early stage and may be updated before finalization."
            },
            "IsDiscoverable": {
              "title": "Isdiscoverable",
              "type": "boolean",
              "description": "A flag that indicates if the work product component is searchable, which means covered in the search index."
            },
            "ResourceHomeRegionID": {
              "title": "Resource Home Region ID",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-OSDURegion:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The name of the home [cloud environment] region for this OSDU resource object."
            },
            "ResourceHostRegionIDs": {
              "title": "Resource Host Region ID",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ResourceHostRegionID"
              },
              "description": "The name of the host [cloud environment] region(s) for this OSDU resource object."
            },
            "ResourceCurationStatus": {
              "title": "Resource Curation Status",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceCurationStatus:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Describes the current Curation status."
            },
            "ResourceLifecycleStatus": {
              "title": "Resource Lifecycle Status",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceLifecycleStatus:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Describes the current Resource Lifecycle status."
            },
            "ResourceSecurityClassification": {
              "title": "Resource Security Classification",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ResourceSecurityClassification:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Classifies the security level of the resource."
            },
            "Source": {
              "title": "Data Source",
              "type": "string",
              "description": "The entity that produced the record, or from which it is received; could be an organization, agency, system, internal team, or individual. For informational purposes only, the list of sources is not governed."
            },
            "ExistenceKind": {
              "title": "Existence Kind",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-ExistenceKind:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Where does this data resource sit in the cradle-to-grave span of its existence?"
            },
            "WellboreID": {
              "title": "Wellboreid",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Wellbore:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "The Wellbore where the Well Log Work Product Component was recorded"
            },
            "WellLogTypeID": {
              "title": "Welllogtypeid",
              "pattern": "^[\\w\\-\\.]+:reference-data\\-\\-LogType:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Well Log Type short Description such as Raw; Evaluated; Composite;...."
            },
            "TopMeasuredDepth": {
              "title": "Top Measured Depth",
              "type": "number",
              "description": "OSDU Native Top Measured Depth of the Well Log."
            },
            "BottomMeasuredDepth": {
              "title": "Bottom Measured Depth",
              "type": "number",
              "description": "OSDU Native Bottom Measured Depth of the Well Log."
            },
            "ServiceCompanyID": {
              "title": "Servicecompanyid",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Organisation:[\\w\\-\\.\\:\\%]+:[0-9]*$",
              "type": "string",
              "description": "Service Company ID"
            },
            "LogSource": {
              "title": "Logsource",
              "type": "string",
              "description": "OSDU Native Log Source - will be updated for later releases - not to be used yet "
            },
            "LogActivity": {
              "title": "Logactivity",
              "type": "string",
              "description": "Log Activity, used to describe the type of pass such as Calibration Pass - Main Pass - Repeated Pass"
            },
            "LogRun": {
              "title": "Logrun",
              "type": "string",
              "description": "Log Run - describe the run of the log - can be a number, but may be also a alphanumeric description such as a version name"
            },
            "LogVersion": {
              "title": "Logversion",
              "type": "string",
              "description": "Log Version"
            },
            "LoggingService": {
              "title": "Loggingservice",
              "type": "string",
              "description": "Logging Service - mainly a short concatenation of the names of the tools"
            },
            "LogServiceDateInterval": {
              "title": "Logservicedateinterval",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LogServiceDateInterval"
                }
              ],
              "description": "An interval built from two nested values : StartDate and EndDate. It applies to the whole log services and may apply to composite logs as [start of the first run job] and [end of the last run job]Log Service Date"
            },
            "ToolStringDescription": {
              "title": "Toolstringdescription",
              "type": "string",
              "description": "Tool String Description - a long concatenation of the tools used for logging services such as GammaRay+NeutronPorosity"
            },
            "LoggingDirection": {
              "title": "Loggingdirection",
              "type": "string",
              "description": "Specifies whether curves were collected downward or upward"
            },
            "PassNumber": {
              "title": "Passnumber",
              "type": "integer",
              "description": "Indicates if the Pass is the Main one (1) or a repeated one - and it's level repetition"
            },
            "ActivityType": {
              "title": "Activitytype",
              "type": "string",
              "description": "General method or circumstance of logging - MWD, completion, ..."
            },
            "DrillingFluidProperty": {
              "title": "Drillingfluidproperty",
              "type": "string",
              "description": "Type of mud at time of logging (oil, water based,...)"
            },
            "HoleTypeLogging": {
              "title": "Holetypelogging",
              "pattern": "^OPENHOLE|CASEDHOLE|CEMENTEDHOLE$",
              "type": "string",
              "description": "Description of the hole related type of logging - POSSIBLE VALUE : OpenHole / CasedHole / CementedHole"
            },
            "VerticalMeasurementID": {
              "title": "Verticalmeasurementid",
              "type": "string",
              "description": "References an entry in the Vertical Measurement array for the Wellbore identified by WellboreID, which defines the vertical reference datum for all curve measured depths."
            },
            "Curves": {
              "title": "Curves",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Curve"
              }
            },
            "ExtensionProperties": {
              "title": "Extensionproperties",
              "type": "object"
            }
          },
          "description": "Common resources to be injected at root 'data' level for every entity, which is persistable in Storage. The insertion is performed by the OsduSchemaComposer script."
        },
        "WellPurpose": {
          "title": "WellPurpose",
          "enum": [
            "appraisal",
            "appraisal -- confirmation appraisal",
            "appraisal -- exploratory appraisal",
            "exploration",
            "exploration -- deeper-pool wildcat",
            "exploration -- new-field wildcat",
            "exploration -- new-pool wildcat",
            "exploration -- outpost wildcat",
            "exploration -- shallower-pool wildcat",
            "development",
            "development -- infill development",
            "development -- injector",
            "development -- producer",
            "fluid storage",
            "fluid storage -- gas storage",
            "general srvc",
            "general srvc -- borehole re-acquisition",
            "general srvc -- observation",
            "general srvc -- relief",
            "general srvc -- research",
            "general srvc -- research -- drill test",
            "general srvc -- research -- strat test",
            "general srvc -- waste disposal",
            "mineral",
            "unknown"
          ],
          "description": "An enumeration."
        },
        "WellStatus": {
          "title": "WellStatus",
          "enum": [
            "abandoned",
            "active",
            "active -- injecting",
            "active -- producing",
            "completed",
            "drilling",
            "partially plugged",
            "permitted",
            "plugged and abandoned",
            "proposed",
            "sold",
            "suspended",
            "temporarily abandoned",
            "testing",
            "tight",
            "working over",
            "unknown"
          ],
          "description": "An enumeration."
        },
        "WellType": {
          "title": "WellType",
          "enum": [
            "bypass",
            "initial",
            "redrill",
            "reentry",
            "respud",
            "sidetrack",
            "unknown"
          ],
          "description": "An enumeration."
        },
        "Wellbore": {
          "title": "Wellbore",
          "required": [
            "kind",
            "acl",
            "legal"
          ],
          "type": "object",
          "properties": {
            "id": {
              "title": "Entity ID",
              "pattern": "^[\\w\\-\\.]+:master-data\\-\\-Wellbore:[\\w\\-\\.\\:\\%]+$",
              "type": "string",
              "description": "Previously called ResourceID or SRN which identifies this OSDU resource object without version.",
              "example": "namespace:master-data--Wellbore:c7c421a7-f496-5aef-8093-298c32bfdea9"
            },
            "kind": {
              "title": "Entity Kind",
              "pattern": "^[\\w\\-\\.]+:[\\w\\-\\.]+:[\\w\\-\\.]+:[0-9]+.[0-9]+.[0-9]+$",
              "type": "string",
              "description": "The schema identification for the OSDU resource object following the pattern {Namespace}:{Source}:{Type}:{VersionMajor}.{VersionMinor}.{VersionPatch}. The versioning scheme follows the semantic versioning, https://semver.org/.",
              "example": "osdu:wks:master-data--Wellbore:1.0.0"
            },
            "version": {
              "title": "Version Number",
              "type": "integer",
              "description": "The version number of this OSDU resource; set by the framework.",
              "example": 1562066009929332
            },
            "acl": {
              "title": "Access Control List",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractAccessControlList100"
                }
              ],
              "description": "The access control tags associated with this entity."
            },
            "legal": {
              "title": "Legal Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractLegalTags100"
                }
              ],
              "description": "The entity's legal tags and compliance status. The actual contents associated with the legal tags is managed by the Compliance Service."
            },
            "tags": {
              "title": "Tag Dictionary",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/app__model__osdu_model__Tags"
              },
              "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
              "example": {
                "NameOfKey": "String value"
              }
            },
            "createTime": {
              "title": "Resource Object Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:46:20.163Z"
            },
            "createUser": {
              "title": "Resource Object Creation User Reference",
              "type": "string",
              "description": "The user reference, which created the first version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "modifyTime": {
              "title": "Resource Object Version Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:52:24.477Z"
            },
            "modifyUser": {
              "title": "Resource Object Version Creation User Reference",
              "type": "string",
              "description": "The user reference, which created this version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "ancestry": {
              "title": "Ancestry",
              "allOf": [
                {
                  "$ref": "#/components/schemas/AbstractLegalParentList100"
                }
              ],
              "description": "The links to data, which constitute the inputs."
            },
            "meta": {
              "title": "Frame of Reference Meta Data",
              "type": "array",
              "items": {},
              "description": "The Frame of Reference meta data section linking the named properties to self-contained definitions."
            },
            "data": {
              "$ref": "#/components/schemas/WellBoreData"
            }
          },
          "description": "A hole in the ground extending from a point at the earth's surface to the maximum point of penetration."
        },
        "WellborePurpose": {
          "title": "WellborePurpose",
          "enum": [
            "appraisal",
            "appraisal -- confirmation appraisal",
            "appraisal -- exploratory appraisal",
            "exploration",
            "exploration -- deeper-pool wildcat",
            "exploration -- new-field wildcat",
            "exploration -- new-pool wildcat",
            "exploration -- outpost wildcat",
            "exploration -- shallower-pool wildcat",
            "development",
            "development -- infill development",
            "development -- injector",
            "development -- producer",
            "fluid storage",
            "fluid storage -- gas storage",
            "general srvc",
            "general srvc -- borehole re-acquisition",
            "general srvc -- observation",
            "general srvc -- relief",
            "general srvc -- research",
            "general srvc -- research -- drill test",
            "general srvc -- research -- strat test",
            "general srvc -- waste disposal",
            "mineral",
            "unknown"
          ],
          "description": "An enumeration."
        },
        "WellboreStatus": {
          "title": "WellboreStatus",
          "enum": [
            "abandoned",
            "active",
            "active -- injecting",
            "active -- producing",
            "completed",
            "drilling",
            "partially plugged",
            "permitted",
            "plugged and abandoned",
            "proposed",
            "sold",
            "suspended",
            "temporarily abandoned",
            "testing",
            "tight",
            "working over",
            "unknown"
          ],
          "description": "An enumeration."
        },
        "WellboreType": {
          "title": "WellboreType",
          "enum": [
            "bypass",
            "initial",
            "redrill",
            "reentry",
            "respud",
            "sidetrack",
            "unknown"
          ],
          "description": "An enumeration."
        },
        "app__model__model_curated__Legal": {
          "title": "Legal",
          "type": "object",
          "properties": {
            "legaltags": {
              "title": "Legal Tags",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The list of legal tags, see compliance API."
            },
            "otherRelevantDataCountries": {
              "title": "Other Relevant Data Countries",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The list of other relevant data countries using the ISO 2-letter codes, see compliance API."
            },
            "status": {
              "title": "Legal Status",
              "type": "string",
              "description": "The legal status."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "app__model__model_curated__Tags": {
          "title": "Tags",
          "type": "string"
        },
        "app__model__model_curated__Type": {
          "title": "Type",
          "enum": [
            "GeometryCollection"
          ],
          "description": "An enumeration."
        },
        "app__model__osdu_model__Tags": {
          "title": "Tags",
          "type": "string"
        },
        "app__model__osdu_model__Type": {
          "title": "Type",
          "enum": [
            "AnyCrsFeatureCollection"
          ],
          "description": "An enumeration."
        },
        "basinContext": {
          "title": "basinContext",
          "type": "object",
          "properties": {
            "basinCode": {
              "title": "Basin Code",
              "type": "string",
              "description": "The code of the basin in which the well is located."
            },
            "basinName": {
              "title": "Basin Name",
              "type": "string",
              "description": "The name of the basin in which the well is located."
            },
            "subBasinCode": {
              "title": "Sub-Basin Code",
              "type": "string",
              "description": "The code of the sub-basin in which the well is located."
            },
            "subBasinName": {
              "title": "Sub-Basin Name",
              "type": "string",
              "description": "The name of the sub-basin in which the well is located."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "channel": {
          "title": "channel",
          "type": "object",
          "properties": {
            "absentValue": {
              "title": "Absent Value",
              "type": "string",
              "description": "Optional field carrying the absent value as string for this channel."
            },
            "dataType": {
              "title": "Data Type",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DataType"
                }
              ],
              "description": "The log value type (per log sample). The 'format' property may contain further hints about data type presentation.",
              "default": "number"
            },
            "dimension": {
              "title": "Dimension",
              "type": "integer",
              "description": "The dimension of this log or channel"
            },
            "family": {
              "title": "Log Family",
              "type": "string",
              "description": "The log family code of this log or channel (optional)"
            },
            "familyType": {
              "title": "Log Family Type",
              "type": "string",
              "description": "The log family type code of this log or channel. Example: 'Neutron Porosity' for 'Thermal Neutron Porosity Sandstone'. (optional)"
            },
            "format": {
              "title": "Format Hint",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Format"
                }
              ],
              "description": "Optional format hint how to treat the log values as strings or number of bits per 'dataType'.",
              "default": "float32"
            },
            "logstoreId": {
              "title": "Logstore ID",
              "type": "number",
              "description": "The id of this log or channel in the Logstore. This property is not present in the index channel."
            },
            "bulkURI": {
              "title": "bulk URI",
              "type": "string",
              "description": "bulkURI either URL or URN."
            },
            "longName": {
              "title": "Log Long Name",
              "type": "string",
              "description": "The long name of this log or channel"
            },
            "mnemonic": {
              "title": "Mnemonic",
              "type": "string",
              "description": "The mnemonic of this log or channel"
            },
            "name": {
              "title": "Log Name",
              "type": "string",
              "description": "The name of this log or channel."
            },
            "properties": {
              "title": "Named Properties",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/namedProperty"
              },
              "description": "The named properties of this log or channel."
            },
            "source": {
              "title": "Source",
              "type": "string",
              "description": "The source of this log or channel as a data reference; Typically this refers to the raw LogSet, from which this log WKE is generated."
            },
            "unitKey": {
              "title": "Unit",
              "type": "string",
              "description": "The unitKey to be looked up in the 'frameOfReference.units' dictionary to find the self-contained definition."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "core_dl_geopoint": {
          "title": "core_dl_geopoint",
          "required": [
            "latitude",
            "longitude"
          ],
          "type": "object",
          "properties": {
            "latitude": {
              "title": "Latitude",
              "maximum": 90,
              "minimum": -90,
              "type": "number",
              "description": "The latitude value in degrees of arc (dega). Value range [-90, 90]."
            },
            "longitude": {
              "title": "Longitude",
              "maximum": 180,
              "minimum": -180,
              "type": "number",
              "description": "The longitude value in degrees of arc (dega). Value range [-180, 180]"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "dipSetData": {
          "title": "dipSetData",
          "type": "object",
          "properties": {
            "azimuthReference": {
              "title": "Azimuth Reference Code",
              "type": "string",
              "description": "Azimuth reference code defining the type of North. Only used for dipSets with azimuth data"
            },
            "classification": {
              "title": "Log Set Classification",
              "type": "string",
              "description": "The well-known log set classification code.",
              "default": "Externally Processed LogSet"
            },
            "dateCreated": {
              "title": "Creation Date and Time",
              "type": "string",
              "description": "The UTC date time of the entity creation",
              "format": "date-time"
            },
            "dateModified": {
              "title": "Last Modification Date and Time",
              "type": "string",
              "description": "The UTC date time of the last entity modification",
              "format": "date-time"
            },
            "elevationReference": {
              "$ref": "#/components/schemas/SimpleElevationReference"
            },
            "externalIds": {
              "title": "Array of External IDs",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of identities (e.g. some kind if URL to be resolved in an external data store), which links to external realizations of the same entity."
            },
            "name": {
              "title": "Dip Set Name",
              "type": "string",
              "description": "The name of this dip set"
            },
            "operation": {
              "title": "Operation",
              "type": "string",
              "description": "The operation which created this entity"
            },
            "reference": {
              "$ref": "#/components/schemas/channel"
            },
            "referenceType": {
              "title": "Reference Type",
              "type": "string",
              "description": "The reference index type of the dip set."
            },
            "relationships": {
              "$ref": "#/components/schemas/dipsetrelationships"
            },
            "start": {
              "$ref": "#/components/schemas/ValueWithUnit"
            },
            "step": {
              "$ref": "#/components/schemas/ValueWithUnit"
            },
            "stop": {
              "$ref": "#/components/schemas/ValueWithUnit"
            },
            "bulkURI": {
              "title": "bulk URI",
              "type": "string",
              "description": "bulkURI either URL or URN."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "dipset": {
          "title": "dipset",
          "type": "object",
          "properties": {
            "ancestry": {
              "title": "Ancestry",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LinkList"
                }
              ],
              "description": "The links to data, which constitute the inputs."
            },
            "meta": {
              "title": "Frame of Reference Meta Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MetaItem"
              },
              "description": "The meta data section linking the 'unitKey', 'crsKey' to self-contained definitions (persistableReference)"
            },
            "type": {
              "title": "Entity Type",
              "type": "string",
              "description": "The reference entity type as declared in common:metadata:entity:*."
            },
            "tags": {
              "title": "Tag Dictionary",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/app__model__model_curated__Tags"
              },
              "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
              "example": {
                "NameOfKey": "String value"
              }
            },
            "createTime": {
              "title": "Resource Object Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:46:20.163Z"
            },
            "createUser": {
              "title": "Resource Object Creation User Reference",
              "type": "string",
              "description": "The user reference, which created the first version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "modifyTime": {
              "title": "Resource Object Version Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:52:24.477Z"
            },
            "modifyUser": {
              "title": "Resource Object Version Creation User Reference",
              "type": "string",
              "description": "The user reference, which created this version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "acl": {
              "title": "Access Control List",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDictionary"
                }
              ],
              "description": "The access control tags associated with this entity."
            },
            "data": {
              "title": "Dip Set Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/dipSetData"
                }
              ],
              "description": "dipset data"
            },
            "id": {
              "title": "Dip Set ID",
              "type": "string",
              "description": "The unique identifier of the dip set"
            },
            "kind": {
              "title": "Dip Set Kind",
              "type": "string",
              "description": "Kind specification",
              "default": "osdu:wks:dipSet:0.0.1"
            },
            "legal": {
              "title": "Legal Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__model__model_curated__Legal"
                }
              ],
              "description": "The dip-set's legal tags"
            },
            "version": {
              "title": "Entity Version Number",
              "type": "number",
              "description": "The version number of this dip set; set by the framework."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "dipsetrelationships": {
          "title": "dipsetrelationships",
          "required": [
            "wellbore"
          ],
          "type": "object",
          "properties": {
            "well": {
              "title": "Well",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The well to which this dipSet belongs. Only required if the wellbore is unknown."
            },
            "wellbore": {
              "title": "Wellbore",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The wellbore to which this dipSet belongs."
            },
            "wellboreSection": {
              "title": "Wellbore Section",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The wellbore section to which this dipSet belongs."
            },
            "referenceLog": {
              "title": "True dip azimuth log",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The true dip azimuth log of the dipset."
            },
            "trueDipAzimuthLog": {
              "title": "True dip azimuth log",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The true dip azimuth log of the dipset."
            },
            "trueDipInclinationLog": {
              "title": "X-coordinate log",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The X-coordinate log of the dipset"
            },
            "xCoordinateLog": {
              "title": "X-coordinate log",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The X-coordinate log of the dipset"
            },
            "yCoordinateLog": {
              "title": "Y-coordinate log",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The Y-coordinate log of the dipset"
            },
            "zCoordinateLog": {
              "title": "Z-coordinate log",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The Z-coordinate log of the dipset"
            },
            "qualityLog": {
              "title": "Quality log",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The quality log of the dipset"
            },
            "classificationLog": {
              "title": "Classification log",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The classification log of the dipset"
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "geographicPosition": {
          "title": "geographicPosition",
          "required": [
            "crsKey",
            "elevationFromMsl",
            "latitude",
            "longitude"
          ],
          "type": "object",
          "properties": {
            "crsKey": {
              "title": "CRS Key",
              "type": "string",
              "description": "The 'crsKey', which can be looked up in the 'frameOfReference.crs' for further details."
            },
            "elevationFromMsl": {
              "title": "Elevation from MSL",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Elevation from Mean Seal Level, downwards negative. The unit definition is found via 'elevationFromMsl.unitKey' in 'frameOfReference.units' dictionary."
            },
            "latitude": {
              "title": "Native Latitude",
              "type": "number",
              "description": "Native or original latitude (unit defined by CRS)"
            },
            "longitude": {
              "title": "Native Longitude",
              "type": "number",
              "description": "Native or original longitude (unit defined by CRS)"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "geometryItem": {
          "title": "geometryItem",
          "required": [
            "geometries",
            "type"
          ],
          "type": "object",
          "properties": {
            "bbox": {
              "title": "Bbox",
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "geometries": {
              "title": "Geometries",
              "type": "array",
              "items": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/GeoJsonPoint"
                  },
                  {
                    "$ref": "#/components/schemas/GeoJsonMultiPoint"
                  },
                  {
                    "$ref": "#/components/schemas/GeoJsonLineString"
                  },
                  {
                    "$ref": "#/components/schemas/GeoJsonMultiLineString"
                  },
                  {
                    "$ref": "#/components/schemas/Polygon"
                  },
                  {
                    "$ref": "#/components/schemas/GeoJsonMultiPolygon"
                  }
                ]
              }
            },
            "type": {
              "$ref": "#/components/schemas/app__model__model_curated__Type"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "historyRecord": {
          "title": "historyRecord",
          "type": "object",
          "properties": {
            "date": {
              "title": "Date and Time",
              "type": "string",
              "description": "The UTC date time of the log creation/processing",
              "format": "date-time"
            },
            "description": {
              "title": " Description",
              "type": "string",
              "description": "The description of the context, which produced the log."
            },
            "user": {
              "title": "User",
              "type": "string",
              "description": "The user running the log processing."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "log": {
          "title": "log",
          "type": "object",
          "properties": {
            "ancestry": {
              "title": "Ancestry",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LinkList"
                }
              ],
              "description": "The links to data, which constitute the inputs."
            },
            "meta": {
              "title": "Frame of Reference Meta Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MetaItem"
              },
              "description": "The meta data section linking the 'unitKey', 'crsKey' to self-contained definitions (persistableReference)"
            },
            "type": {
              "title": "Entity Type",
              "type": "string",
              "description": "The reference entity type as declared in common:metadata:entity:*."
            },
            "tags": {
              "title": "Tag Dictionary",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/app__model__model_curated__Tags"
              },
              "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
              "example": {
                "NameOfKey": "String value"
              }
            },
            "createTime": {
              "title": "Resource Object Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:46:20.163Z"
            },
            "createUser": {
              "title": "Resource Object Creation User Reference",
              "type": "string",
              "description": "The user reference, which created the first version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "modifyTime": {
              "title": "Resource Object Version Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:52:24.477Z"
            },
            "modifyUser": {
              "title": "Resource Object Version Creation User Reference",
              "type": "string",
              "description": "The user reference, which created this version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "acl": {
              "title": "Access Control List",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDictionary"
                }
              ],
              "description": "The access control tags associated with this entity."
            },
            "data": {
              "title": "Log Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/logData"
                }
              ],
              "description": "Log data associated with a wellbore"
            },
            "id": {
              "title": "Log Set ID",
              "type": "string",
              "description": "The unique identifier of the log"
            },
            "kind": {
              "title": "Log Kind",
              "type": "string",
              "description": "Kind specification",
              "default": "osdu:wks:log:0.0.1"
            },
            "legal": {
              "title": "Legal Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__model__model_curated__Legal"
                }
              ],
              "description": "The log's legal tags"
            },
            "status": {
              "title": "Entity Status",
              "type": "string",
              "description": "The status of this log",
              "default": "compliant"
            },
            "version": {
              "title": "Entity Version Number",
              "type": "number",
              "description": "The version number of this log; set by the framework."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "logData": {
          "title": "logData",
          "type": "object",
          "properties": {
            "azimuthReference": {
              "title": "Azimuth Reference Code",
              "type": "string",
              "description": "Only supplied with azimuth logs: the azimuth reference code defining the type of North, default TN for true north."
            },
            "dateCreated": {
              "title": "Creation Date and Time",
              "type": "string",
              "description": "The UTC date time of the entity creation",
              "format": "date-time"
            },
            "dateModified": {
              "title": "Last Modification Date and Time",
              "type": "string",
              "description": "The UTC date time of the last entity modification",
              "format": "date-time"
            },
            "elevationReference": {
              "title": "Elevation Reference",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SimpleElevationReference"
                }
              ],
              "description": "The wellbore's elevation reference from mean sea level (MSL), positive above MSL. This is where the index, e.g. MD == 0 and TVD == 0."
            },
            "externalIds": {
              "title": "Array of External IDs",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of identities (e.g. some kind if URL to be resolved in an external data store), which links to external realizations of the same entity."
            },
            "history": {
              "title": "History Records",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/historyRecord"
              },
              "description": "An array of historyRecords describing the context for the log's creation or processing."
            },
            "log": {
              "title": "Log Channel",
              "allOf": [
                {
                  "$ref": "#/components/schemas/logchannel"
                }
              ],
              "description": "The log containing the log meta data and log-store reference."
            },
            "name": {
              "title": "Log Set Name",
              "type": "string",
              "description": "The name of this log set"
            },
            "operation": {
              "title": "Operation",
              "type": "string",
              "description": "The operation which created this Log"
            },
            "reference": {
              "title": "Reference Index",
              "allOf": [
                {
                  "$ref": "#/components/schemas/logchannel"
                }
              ],
              "description": "The reference index - only populated for logs, which are member of a logSet and share the reference index."
            },
            "referenceType": {
              "title": "Index Type",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ReferenceType"
                }
              ],
              "description": "The reference index type of the log set."
            },
            "relationships": {
              "title": "Relationships",
              "allOf": [
                {
                  "$ref": "#/components/schemas/logRelationships"
                }
              ],
              "description": "The related entities."
            },
            "start": {
              "title": "Start",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The start index value of the log set."
            },
            "step": {
              "title": "Step",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The index increment value of the log set. Only populated if the log is regularly sampled."
            },
            "stop": {
              "title": "Stop",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The stop index value of the log set."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "logRelationships": {
          "title": "logRelationships",
          "type": "object",
          "properties": {
            "logSet": {
              "title": "LogSet",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The logSet to which this log belongs. If the log is not part of a log set this relationship stays empty."
            },
            "timeDepthRelation": {
              "title": "TimeDepthRelation LogSet",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The timeDepthRelation to which this log belongs. If the log is not part of a timeDepthRelation this relationship stays empty."
            },
            "well": {
              "title": "Well",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The well to which this log belongs. Only required if the wellbore is unknown."
            },
            "wellbore": {
              "title": "Wellbore",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The wellbore to which this log belongs. This relationship is the most important; only the wellbore can provide the unique context for the measured depth index."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "logSetData": {
          "title": "logSetData",
          "type": "object",
          "properties": {
            "azimuthReference": {
              "title": "Azimuth Reference Code",
              "type": "string",
              "description": "Azimuth reference code defining the type of North. Only used for logSets with azimuth data"
            },
            "channelMnemonics": {
              "title": "Channel Mnemonics",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of channel Mnemonics in this log set."
            },
            "channelNames": {
              "title": "Channel Names",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of channel long names in this log set."
            },
            "classification": {
              "title": "Log Set Classification",
              "type": "string",
              "description": "The well-known log set classification code.",
              "default": "Externally Processed LogSet"
            },
            "dateCreated": {
              "title": "Creation Date and Time",
              "type": "string",
              "description": "The UTC date time of the entity creation",
              "format": "date-time"
            },
            "dateModified": {
              "title": "Last Modification Date and Time",
              "type": "string",
              "description": "The UTC date time of the last entity modification",
              "format": "date-time"
            },
            "elevationReference": {
              "$ref": "#/components/schemas/SimpleElevationReference"
            },
            "externalIds": {
              "title": "Array of External IDs",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of identities (e.g. some kind if URL to be resolved in an external data store), which links to external realizations of the same entity."
            },
            "name": {
              "title": "Log Set Name",
              "type": "string",
              "description": "The name of this log set"
            },
            "operation": {
              "title": "Operation",
              "type": "string",
              "description": "The operation which created this entity"
            },
            "reference": {
              "$ref": "#/components/schemas/channel"
            },
            "referenceType": {
              "title": "Reference Type",
              "type": "string",
              "description": "The reference index type of the log set."
            },
            "relationships": {
              "$ref": "#/components/schemas/logsetrelationships"
            },
            "start": {
              "$ref": "#/components/schemas/ValueWithUnit"
            },
            "step": {
              "$ref": "#/components/schemas/ValueWithUnit"
            },
            "stop": {
              "$ref": "#/components/schemas/ValueWithUnit"
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "logchannel": {
          "title": "logchannel",
          "type": "object",
          "properties": {
            "columnNames": {
              "title": "Column Names",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of names for multi-dimensional logs (dimension>1). The length of this array is expected to be equal to 'dimension'. For one-dimensional this property stays empty as the columnName is by definition the log name."
            },
            "dataType": {
              "title": "Data Type",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DataType_2"
                }
              ],
              "description": "The log value type (per log sample). The 'format' property may contain further hints about data type presentation.",
              "default": "number"
            },
            "dimension": {
              "title": "Dimension",
              "type": "integer",
              "description": "The dimension of this log or channel"
            },
            "family": {
              "title": "Log Family",
              "type": "string",
              "description": "The log family code of this log or channel (optional)"
            },
            "familyType": {
              "title": "Log Family Type",
              "type": "string",
              "description": "The log family type code of this log or channel. Example: 'Neutron Porosity' for 'Thermal Neutron Porosity Sandstone'. (optional)"
            },
            "format": {
              "title": "Format Hint",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Format_2"
                }
              ],
              "description": "Optional format hint how to treat the log values as strings or number of bits per 'dataType'.",
              "default": "float32"
            },
            "logstoreId": {
              "title": "Logstore ID",
              "type": "number",
              "description": "The unique id of this log or channel in the Logstore. This property is not present in the index channel."
            },
            "bulkURI": {
              "title": "bulk URI",
              "type": "string",
              "description": "bulkURI either URL or URN."
            },
            "longName": {
              "title": "Log Long Name",
              "type": "string",
              "description": "The long name of this log or channel"
            },
            "mnemonic": {
              "title": "Mnemonic",
              "type": "string",
              "description": "The mnemonic of this log or channel"
            },
            "name": {
              "title": "Log Name",
              "type": "string",
              "description": "The name of this log or channel."
            },
            "properties": {
              "title": "Named Properties",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/namedProperty"
              },
              "description": "The named properties of this log or channel."
            },
            "source": {
              "title": "Source",
              "type": "string",
              "description": "The source of this log or channel as a data reference; Typically this refers to the raw LogSet, from which this log WKE is generated."
            },
            "unitKey": {
              "title": "Unit",
              "type": "string",
              "description": "The unitKey to be looked up in the 'frameOfReference.units' dictionary to find the self-contained definition."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "logset": {
          "title": "logset",
          "type": "object",
          "properties": {
            "ancestry": {
              "title": "Ancestry",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LinkList"
                }
              ],
              "description": "The links to data, which constitute the inputs."
            },
            "meta": {
              "title": "Frame of Reference Meta Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MetaItem"
              },
              "description": "The meta data section linking the 'unitKey', 'crsKey' to self-contained definitions (persistableReference)"
            },
            "type": {
              "title": "Entity Type",
              "type": "string",
              "description": "The reference entity type as declared in common:metadata:entity:*."
            },
            "tags": {
              "title": "Tag Dictionary",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/app__model__model_curated__Tags"
              },
              "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
              "example": {
                "NameOfKey": "String value"
              }
            },
            "createTime": {
              "title": "Resource Object Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:46:20.163Z"
            },
            "createUser": {
              "title": "Resource Object Creation User Reference",
              "type": "string",
              "description": "The user reference, which created the first version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "modifyTime": {
              "title": "Resource Object Version Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:52:24.477Z"
            },
            "modifyUser": {
              "title": "Resource Object Version Creation User Reference",
              "type": "string",
              "description": "The user reference, which created this version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "acl": {
              "title": "Access Control List",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDictionary"
                }
              ],
              "description": "The access control tags associated with this entity."
            },
            "data": {
              "title": "Log Set Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/logSetData"
                }
              ],
              "description": "Log channel set associated with a wellbore"
            },
            "id": {
              "title": "Log Set ID",
              "type": "string",
              "description": "The unique identifier of the log set"
            },
            "kind": {
              "title": "Log Set Kind",
              "type": "string",
              "description": "Kind specification",
              "default": "osdu:wks:logSet:0.0.1"
            },
            "legal": {
              "title": "Legal Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__model__model_curated__Legal"
                }
              ],
              "description": "The log-set's legal tags"
            },
            "version": {
              "title": "Entity Version Number",
              "type": "number",
              "description": "The version number of this log set; set by the framework."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "logsetrelationships": {
          "title": "logsetrelationships",
          "required": [
            "wellbore"
          ],
          "type": "object",
          "properties": {
            "well": {
              "title": "Well",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The well to which this logSet belongs. Only required if the wellbore is unknown."
            },
            "wellbore": {
              "title": "Wellbore",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The wellbore to which this logSet belongs."
            },
            "wellboreSection": {
              "title": "Wellbore Section",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The wellboreSection to which this logSet belongs."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "marker": {
          "title": "marker",
          "required": [
            "acl",
            "kind",
            "legal"
          ],
          "type": "object",
          "properties": {
            "ancestry": {
              "title": "Ancestry",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LinkList"
                }
              ],
              "description": "The links to data, which constitute the inputs."
            },
            "meta": {
              "title": "Frame of Reference Meta Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MetaItem"
              },
              "description": "The meta data section linking the 'unitKey', 'crsKey' to self-contained definitions (persistableReference)"
            },
            "type": {
              "title": "Entity Type",
              "type": "string",
              "description": "The reference entity type as declared in common:metadata:entity:*."
            },
            "tags": {
              "title": "Tag Dictionary",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/app__model__model_curated__Tags"
              },
              "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
              "example": {
                "NameOfKey": "String value"
              }
            },
            "createTime": {
              "title": "Resource Object Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:46:20.163Z"
            },
            "createUser": {
              "title": "Resource Object Creation User Reference",
              "type": "string",
              "description": "The user reference, which created the first version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "modifyTime": {
              "title": "Resource Object Version Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:52:24.477Z"
            },
            "modifyUser": {
              "title": "Resource Object Version Creation User Reference",
              "type": "string",
              "description": "The user reference, which created this version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "acl": {
              "title": "Access Control List",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDictionary"
                }
              ],
              "description": "The access control tags associated with this entity."
            },
            "data": {
              "title": "Marker Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/markerData"
                }
              ],
              "description": "Geological marker using a single point-observation, typically along a wellbore."
            },
            "id": {
              "title": "Marker ID",
              "type": "string",
              "description": "The unique identifier of the marker"
            },
            "kind": {
              "title": "Marker Kind",
              "type": "string",
              "description": "Marker kind specification"
            },
            "legal": {
              "title": "Legal Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__model__model_curated__Legal"
                }
              ],
              "description": "The marker's legal tags"
            },
            "version": {
              "title": "Entity Version Number",
              "type": "number",
              "description": "The version number of this marker; set by the framework."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "markerData": {
          "title": "markerData",
          "required": [
            "md",
            "name"
          ],
          "type": "object",
          "properties": {
            "age": {
              "title": "Age",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The absolute age at the feature boundary. The unit definition is found via the property's unitKey' in 'frameOfReference.units' dictionary."
            },
            "boundaryRelation": {
              "title": "Interface Boundary Relation",
              "type": "string",
              "description": "The marker boundary relationship classification"
            },
            "classification": {
              "title": "Marker Classification",
              "type": "string",
              "description": "The classification of the marker. Could be client-defined via a catalog, e.g. common:wke:markerClassification:1.0.0 and common:wke:markerClassificationMember:1.0.0"
            },
            "dateCreated": {
              "title": "Creation Date and Time",
              "type": "string",
              "description": "The UTC date time of the entity creation",
              "format": "date-time"
            },
            "dateModified": {
              "title": "Last Modification Date and Time",
              "type": "string",
              "description": "The UTC date time of the last entity modification",
              "format": "date-time"
            },
            "depth": {
              "title": "Marker Depth",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The original marker depth - measured from data.elevationReference in data.depthReferenceType. The unit definition is found via the property's unitKey' in 'frameOfReference.units' dictionary."
            },
            "depthReferenceType": {
              "title": "Depth Reference Code",
              "type": "string",
              "description": "Depth reference code defining the type of depth for the marker. Default MD (measured depth). Depth is downwards increasing.",
              "default": "MD"
            },
            "elevationReference": {
              "title": "Elevation Reference Level",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SimpleElevationReference"
                }
              ],
              "description": "The elevation from mean sea level (MSL), where depth, topDepth, baseDepth are zero. Values above MSL are positive."
            },
            "externalIds": {
              "title": "Array of External IDs",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of identities (e.g. some kind if URL to be resolved in an external data store), which links to external realizations of the same entity."
            },
            "interpreter": {
              "title": "Interpreter Name",
              "type": "string",
              "description": "The name of the interpreter who picked this marker."
            },
            "locationWGS84": {
              "title": "GeoJSON Marker Location",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GeoJsonFeatureCollection"
                }
              ],
              "description": "The marker's shape as GeoJSON Point."
            },
            "markerFeatureType": {
              "title": "Marker Feature Type",
              "type": "string",
              "description": "The marker's type of feature like 'seismic', 'structural', 'stratigraphic'"
            },
            "markerGeoDomain": {
              "title": "Marker GeoScience Domain",
              "type": "string",
              "description": "The marker's GeoScience domain like 'geologic', 'reservoir', 'petrophysical'"
            },
            "markerSubFeatureAttribute": {
              "title": "Marker Sub-feature Attribute",
              "type": "string",
              "description": "Further specification of the marker's sub-feature, e.g. in sequence stratigraphy."
            },
            "markerSubFeatureType": {
              "title": "Marker Sub-feature Type",
              "type": "string",
              "description": "The marker's sub-type of the feature like 'horizon', 'fault', 'fracture'"
            },
            "md": {
              "title": "Marker Measured Depth",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The marker measured depth (MD) measured from data.elevationReference. The unit definition is found via the property's unitKey' in 'frameOfReference.units' dictionary."
            },
            "name": {
              "title": "Marker Name",
              "type": "string",
              "description": "The name of the marker"
            },
            "planeOrientationAzimuth": {
              "title": "Azimuth Angle",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Azimuth angle. The azimuth reference is given by data.azimuthReference. The 'planeOrientationAzimuth.unitKey' is to be looked up in the 'frameOfReference.units' dictionary to find the self-contained definition."
            },
            "planeOrientationDip": {
              "title": "Dip Angle",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Dip angle. The 'planeOrientationDip.unitKey' is to be looked up in the 'frameOfReference.units' dictionary to find the self-contained definition."
            },
            "relationships": {
              "title": "Relationships",
              "allOf": [
                {
                  "$ref": "#/components/schemas/markerrelationships"
                }
              ],
              "description": "The entities related to this marker."
            },
            "stratigraphicHierarchyLevel": {
              "title": "Column Level",
              "type": "integer",
              "description": "Optional hierarchical level in the chrono-stratigraphic/litho-stratigraphic catalog table, identified by the data.relationships.chartId"
            },
            "tvd": {
              "title": "Marker Measured Depth",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The marker true vertical depth (TVD) measured from data.elevationReference. The unit definition is found via the property's unitKey' in 'frameOfReference.units' dictionary."
            },
            "wgs84ElevationFromMsl": {
              "title": "Elevation from MSL",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Elevation from Mean Sea Level, downwards negative. The unit definition is found via the property's unitKey' in 'frameOfReference.units' dictionary."
            },
            "wgs84LatitudeLongitude": {
              "title": "WGS 84 Latitude Longitude",
              "allOf": [
                {
                  "$ref": "#/components/schemas/core_dl_geopoint"
                }
              ],
              "description": "The marker's position in WGS 84 latitude and longitude."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "markerrelationships": {
          "title": "markerrelationships",
          "type": "object",
          "properties": {
            "horizon": {
              "title": "Stratigraphic Horizon",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The related stratigraphic horizon"
            },
            "stratigraphicTable": {
              "title": "Stratigraphic Table",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The related stratigraphic table, which provides the context for the stratigraphic horizon"
            },
            "study": {
              "title": "Study",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The study, in which this marker was conceived."
            },
            "trajectory": {
              "title": "Trajectory",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The trajectory used to create the marker position"
            },
            "wellbore": {
              "title": "Wellbore",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The wellbore entity, to which this marker belongs."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "namedProperty": {
          "title": "namedProperty",
          "type": "object",
          "properties": {
            "associations": {
              "title": "Associations",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The optional associations contains one or more mnemonics found elsewhere in the logSet."
            },
            "description": {
              "title": "Property Description",
              "type": "string",
              "description": "The description and role of this property."
            },
            "format": {
              "title": "Format (LAS)",
              "type": "string",
              "description": "An optional format declaration for the property values. The 'A' prefix indicates an array; string values are represented by 'S'; floating point values are represented by 'F', optionally followed by a field specification, e.g. 'F10.4'; exponential number representations are represented by 'E'; integer values are represented by 'I'. For further information see the LAS specification http://www.cwls.org/las/."
            },
            "name": {
              "title": "Property Name",
              "type": "string",
              "description": "The name of this property."
            },
            "unitKey": {
              "title": "Property Unit Symbol",
              "type": "string",
              "description": "The unitKey to be looked up in the 'frameOfReference.units' dictionary to find the self-contained definition."
            },
            "value": {
              "title": "Property Value",
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "string"
                }
              ],
              "description": "The value for this property as a string or a number."
            },
            "values": {
              "title": "Property Values (Interval)",
              "type": "array",
              "items": {
                "type": "number"
              },
              "description": "The values, e.g. interval boundaries, for this property."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "odes_storage__models__Legal": {
          "title": "Legal",
          "type": "object",
          "properties": {
            "legaltags": {
              "title": "Legaltags",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "otherRelevantDataCountries": {
              "title": "Otherrelevantdatacountries",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "projectedPosition": {
          "title": "projectedPosition",
          "required": [
            "crsKey",
            "elevationFromMsl",
            "x",
            "y"
          ],
          "type": "object",
          "properties": {
            "crsKey": {
              "title": "CRS Key",
              "type": "string",
              "description": "The 'crsKey', which can be looked up in the 'frameOfReference.crs' for further details."
            },
            "elevationFromMsl": {
              "title": "Elevation from MSL",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Elevation from Mean Seal Level, downwards negative. The unit definition is found via 'elevationFromMsl.unitKey' in 'frameOfReference.units' dictionary."
            },
            "x": {
              "title": "X Coordinate",
              "type": "number",
              "description": "X-coordinate value in native or original projected CRS"
            },
            "y": {
              "title": "Y Coordinate",
              "type": "number",
              "description": "Y-coordinate value in native or original projected CRS"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "trajectory": {
          "title": "trajectory",
          "type": "object",
          "properties": {
            "ancestry": {
              "title": "Ancestry",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LinkList"
                }
              ],
              "description": "The links to data, which constitute the inputs."
            },
            "meta": {
              "title": "Frame of Reference Meta Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MetaItem"
              },
              "description": "The meta data section linking the 'unitKey', 'crsKey' to self-contained definitions (persistableReference)"
            },
            "type": {
              "title": "Entity Type",
              "type": "string",
              "description": "The reference entity type as declared in common:metadata:entity:*."
            },
            "tags": {
              "title": "Tag Dictionary",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/app__model__model_curated__Tags"
              },
              "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
              "example": {
                "NameOfKey": "String value"
              }
            },
            "createTime": {
              "title": "Resource Object Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:46:20.163Z"
            },
            "createUser": {
              "title": "Resource Object Creation User Reference",
              "type": "string",
              "description": "The user reference, which created the first version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "modifyTime": {
              "title": "Resource Object Version Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:52:24.477Z"
            },
            "modifyUser": {
              "title": "Resource Object Version Creation User Reference",
              "type": "string",
              "description": "The user reference, which created this version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "acl": {
              "title": "Access Control List",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDictionary"
                }
              ],
              "description": "The access control tags associated with this entity."
            },
            "data": {
              "title": "Trajectory Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/trajectoryData"
                }
              ],
              "description": "A log set representing a trajectory associated with a wellbore"
            },
            "id": {
              "title": "Trajectory ID",
              "type": "string",
              "description": "The unique identifier of the trajectory"
            },
            "kind": {
              "title": "Trajectory Kind",
              "type": "string",
              "description": "Kind specification",
              "default": "osdu:wks:trajectory:0.0.1"
            },
            "legal": {
              "title": "Legal Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__model__model_curated__Legal"
                }
              ],
              "description": "The trajectory's legal tags"
            },
            "version": {
              "title": "Entity Version Number",
              "type": "number",
              "description": "The version number of this trajectory; set by the framework."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "trajectoryData": {
          "title": "trajectoryData",
          "type": "object",
          "properties": {
            "azimuthReference": {
              "title": "Azimuth Reference Code",
              "type": "string",
              "description": "Azimuth reference code defining the type of North, default TN for true north."
            },
            "channelMnemonics": {
              "title": "Channel Mnemonics",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of channel Mnemonics in this trajectory."
            },
            "channelNames": {
              "title": "Channel Names",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "A list of channel long names in this trajectory."
            },
            "channels": {
              "title": "Channels",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/trajectorychannel"
              },
              "description": "The channels associated to the index."
            },
            "classification": {
              "title": "Trajectory Classification",
              "type": "string",
              "description": "The well-known trajectory classification code.",
              "default": "Raw Deviation Survey"
            },
            "dateCreated": {
              "title": "Creation Date and Time",
              "type": "string",
              "description": "The UTC date time of the entity creation",
              "format": "date-time"
            },
            "dateModified": {
              "title": "Last Modification Date and Time",
              "type": "string",
              "description": "The UTC date time of the last entity modification",
              "format": "date-time"
            },
            "elevationReference": {
              "title": "Elevation Reference",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SimpleElevationReference"
                }
              ],
              "description": "The wellbore's elevation reference from mean sea level (MSL), positive above MSL. This is where MD == 0 and TVD == 0"
            },
            "externalIds": {
              "title": "Array of External IDs",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of identities (e.g. some kind if URL to be resolved in an external data store), which links to external realizations of the same entity."
            },
            "index": {
              "title": "Index Channel",
              "allOf": [
                {
                  "$ref": "#/components/schemas/trajectorychannel"
                }
              ],
              "description": "The index channel or log."
            },
            "indexType": {
              "title": "Index Type",
              "type": "string",
              "description": "The index type of the trajectory."
            },
            "locationWGS84": {
              "title": "Trajectory preview",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GeoJsonFeatureCollection"
                }
              ],
              "description": "The wellbore's trajectory preview shape as GeoJSON LineString."
            },
            "name": {
              "title": "Trajectory Name",
              "type": "string",
              "description": "The name of this trajectory"
            },
            "referencePosition": {
              "title": "Reference Position First Sample",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Point3dNonGeoJson"
                }
              ],
              "description": "The 3D reference position for the first sample (surface location for main wellbores, tie-in point for side-tracks."
            },
            "relationships": {
              "title": "Relationships",
              "allOf": [
                {
                  "$ref": "#/components/schemas/trajectoryrelationships"
                }
              ],
              "description": "The related entities."
            },
            "start": {
              "title": "Start",
              "type": "number",
              "description": "The start index value of the trajectory."
            },
            "step": {
              "title": "Step",
              "type": "number",
              "description": "The index increment value of the trajectory."
            },
            "stop": {
              "title": "Stop",
              "type": "number",
              "description": "The stop index value of the trajectory."
            },
            "wellHeadWgs84": {
              "title": "WGS 84 Position",
              "allOf": [
                {
                  "$ref": "#/components/schemas/wgs84Position"
                }
              ],
              "description": "The wellbore's position in WGS 84 latitude and longitude; vertical position is an elevation from mean sea level (MSL), positive above MSL."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "trajectorychannel": {
          "title": "trajectorychannel",
          "type": "object",
          "properties": {
            "absentValue": {
              "title": "Absent Value",
              "type": "string",
              "description": "Optional field carrying the absent value as string for this channel."
            },
            "azimuthKey": {
              "title": "Azimuth Reference Key",
              "type": "string",
              "description": "The azimuth reference of this log or channel. The detailed definition is found as persistable reference in the 'frameOfReference.azimuth' dictionary."
            },
            "crsKey": {
              "title": "CRS Key",
              "type": "string",
              "description": "The CRS key of this log or channel. The detailed definition is found as persistable reference in the 'frameOfReference.crs' dictionary."
            },
            "dataType": {
              "title": "Data Type",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DataType_1"
                }
              ],
              "description": "The log value type (per log sample). The 'format' property may contain further hints about data type presentation.",
              "default": "number"
            },
            "dimension": {
              "title": "Dimension",
              "type": "integer",
              "description": "The dimension of this log or channel"
            },
            "family": {
              "title": "Log Family",
              "type": "string",
              "description": "The log family code of this log or channel (optional)"
            },
            "familyType": {
              "title": "Log Family Type",
              "type": "string",
              "description": "The log family type code of this log or channel. Example: 'Neutron Porosity' for 'Thermal Neutron Porosity Sandstone'. (optional)"
            },
            "format": {
              "title": "Format Hint",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Format_1"
                }
              ],
              "description": "Optional format hint how to treat the log values as strings or number of bits per 'dataType'.",
              "default": "float32"
            },
            "logstoreId": {
              "title": "Logstore ID",
              "type": "number",
              "description": "The id of this log or channel in the Logstore. This property is not present in the index channel."
            },
            "bulkURI": {
              "title": "bulk URI",
              "type": "string",
              "description": "bulkURI either URL or URN."
            },
            "longName": {
              "title": "Log Long Name",
              "type": "string",
              "description": "The long name of this log or channel"
            },
            "mnemonic": {
              "title": "Mnemonic",
              "type": "string",
              "description": "The mnemonic of this log or channel"
            },
            "name": {
              "title": "Log Name",
              "type": "string",
              "description": "The name of this log or channel."
            },
            "properties": {
              "title": "Properties",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "The properties of this log or channel."
            },
            "source": {
              "title": "Source",
              "type": "string",
              "description": "The source of this log or channel as a data reference; Typically this refers to the raw trajectory, from which this log WKE is generated."
            },
            "unitKey": {
              "title": "Unit Key",
              "type": "string",
              "description": "The unit key of this log or channel. The detailed definition is found as persistable reference in the 'frameOfReference.units' dictionary. Empty units (NoUnit) are not recorded."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "trajectoryrelationships": {
          "title": "trajectoryrelationships",
          "required": [
            "wellbore"
          ],
          "type": "object",
          "properties": {
            "wellbore": {
              "title": "Wellbore",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The wellbore to which this trajectory belongs."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "well": {
          "title": "well",
          "type": "object",
          "properties": {
            "ancestry": {
              "title": "Ancestry",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LinkList"
                }
              ],
              "description": "The links to data, which constitute the inputs."
            },
            "meta": {
              "title": "Frame of Reference Meta Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MetaItem"
              },
              "description": "The meta data section linking the 'unitKey', 'crsKey' to self-contained definitions (persistableReference)"
            },
            "type": {
              "title": "Entity Type",
              "type": "string",
              "description": "The reference entity type as declared in common:metadata:entity:*."
            },
            "tags": {
              "title": "Tag Dictionary",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/app__model__model_curated__Tags"
              },
              "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
              "example": {
                "NameOfKey": "String value"
              }
            },
            "createTime": {
              "title": "Resource Object Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:46:20.163Z"
            },
            "createUser": {
              "title": "Resource Object Creation User Reference",
              "type": "string",
              "description": "The user reference, which created the first version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "modifyTime": {
              "title": "Resource Object Version Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:52:24.477Z"
            },
            "modifyUser": {
              "title": "Resource Object Version Creation User Reference",
              "type": "string",
              "description": "The user reference, which created this version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "acl": {
              "title": "Access Control List",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDictionary"
                }
              ],
              "description": "The access control tags associated with this entity."
            },
            "data": {
              "title": "Well Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/wellData"
                }
              ],
              "description": "Well data container"
            },
            "id": {
              "title": "Well ID",
              "type": "string",
              "description": "The unique identifier of the well"
            },
            "kind": {
              "title": "Well Kind",
              "type": "string",
              "description": "Well-known well kind specification",
              "default": "osdu:wks:well:0.0.1"
            },
            "legal": {
              "title": "Legal Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__model__model_curated__Legal"
                }
              ],
              "description": "The geological interpretation's legal tags"
            },
            "version": {
              "title": "Entity Version Number",
              "type": "number",
              "description": "The version number of this well; set by the framework."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "wellData": {
          "title": "wellData",
          "type": "object",
          "properties": {
            "basinContext": {
              "title": "Basin Context",
              "allOf": [
                {
                  "$ref": "#/components/schemas/basinContext"
                }
              ],
              "description": "The basin context details for the well."
            },
            "block": {
              "title": "Block",
              "type": "string",
              "description": "The block name, in which the well is located."
            },
            "country": {
              "title": "Country",
              "type": "string",
              "description": "The country, in which the well is located. The country name follows the convention in ISO 3166-1 'English short country name', see https://en.wikipedia.org/wiki/ISO_3166-1"
            },
            "county": {
              "title": "County",
              "type": "string",
              "description": "The county name, in which the well is located."
            },
            "dateCreated": {
              "title": "Creation Date and Time",
              "type": "string",
              "description": "The UTC date time of the entity creation",
              "format": "date-time"
            },
            "dateLicenseIssued": {
              "title": "License Issue Date",
              "type": "string",
              "description": "The UTC date time when the well license was issued.",
              "format": "date-time"
            },
            "dateModified": {
              "title": "Last Modification Date and Time",
              "type": "string",
              "description": "The UTC date time of the last entity modification",
              "format": "date-time"
            },
            "datePluggedAbandoned": {
              "title": "Plugged Abandoned Date",
              "type": "string",
              "description": "The UTC date and time at which the well was plugged and abandoned.",
              "format": "date-time"
            },
            "dateSpudded": {
              "title": "Spud Date",
              "type": "string",
              "description": "The date and time when activities to drill the borehole begin to create a hole in the earth. For a sidetrack, this is the date kickoff operations began. The format follows ISO 8601 YYYY-MM-DD extended format",
              "format": "date-time"
            },
            "directionWell": {
              "title": "Well Direction",
              "allOf": [
                {
                  "$ref": "#/components/schemas/DirectionWell"
                }
              ],
              "description": "POSC well direction. The direction of the flow of the fluids in a well facility (generally, injected or produced, or some combination)."
            },
            "district": {
              "title": "District",
              "type": "string",
              "description": "The district name, to which the well belongs."
            },
            "elevationReference": {
              "title": "Elevation Reference",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SimpleElevationReference"
                }
              ],
              "description": "The well's elevation reference from mean sea level (MSL), positive above MSL. This is where MD == 0 and TVD == 0"
            },
            "externalIds": {
              "title": "Array of External IDs",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of identities (e.g. some kind if URL to be resolved in an external data store), which links to external realizations of the same entity."
            },
            "field": {
              "title": "Field",
              "type": "string",
              "description": "The field name, to which the well belongs."
            },
            "fluidWell": {
              "title": "Well Fluid",
              "allOf": [
                {
                  "$ref": "#/components/schemas/FluidWell"
                }
              ],
              "description": "POSC well fluid. The type of fluid being produced from or injected \\ninto a well facility."
            },
            "groundElevation": {
              "title": "Ground Elevation",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The well's ground elevation, Values above MSL are positive.."
            },
            "locationWGS84": {
              "title": "Well Shape WGS 84",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GeoJsonFeatureCollection"
                }
              ],
              "description": "A 2D GeoJSON FeatureCollection defining well location or trajectory in WGS 84 CRS."
            },
            "name": {
              "title": "Well Name",
              "type": "string",
              "description": "The well name"
            },
            "operator": {
              "title": "Well Operator",
              "type": "string",
              "description": "The operator company name of the well."
            },
            "operatorDivision": {
              "title": "Operator Division",
              "type": "string",
              "description": "The operator division of the well."
            },
            "operatorInterest": {
              "title": "Well Operator Interest",
              "type": "number",
              "description": "Interest for operator. Commonly in percent."
            },
            "operatorOriginal": {
              "title": "Original Well Operator",
              "type": "string",
              "description": "Original operator of the well. This may be different than the current operator."
            },
            "plssLocation": {
              "title": "US PLSS Location",
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlssLocation"
                }
              ],
              "description": "A location described by the Public Land Survey System (United States)"
            },
            "propertyDictionary": {
              "title": "Property Dictionary",
              "type": "object",
              "description": "A dictionary structure, i.e. key/string value pairs, to carry additional well properties."
            },
            "region": {
              "title": "Region",
              "type": "string",
              "description": "Geo-political region in which the well is located."
            },
            "relationships": {
              "title": "Relationships",
              "allOf": [
                {
                  "$ref": "#/components/schemas/wellrelationships"
                }
              ],
              "description": "The related entities."
            },
            "state": {
              "title": "State",
              "type": "string",
              "description": "The state name, in which the well is located."
            },
            "uwi": {
              "title": "Unique Well Identifier",
              "type": "string",
              "description": "The unique well identifier, aka. API number, US well number or UBHI. Codes can have 10, 12 or 14 digits depending on the availability of directional sidetrack (2 digits) and event sequence codes (2 digits)."
            },
            "waterDepth": {
              "title": "Water Depth",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Depth of water (not land rigs)."
            },
            "wellHeadElevation": {
              "title": "Well Head Elevation",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The well's vertical position is an elevation from mean sea level (MSL), positive above MSL."
            },
            "wellHeadGeographic": {
              "title": "Well Head Position, Geographic",
              "allOf": [
                {
                  "$ref": "#/components/schemas/geographicPosition"
                }
              ],
              "description": "The well's well head position in the native, geographic CRS; vertical position is an elevation from mean sea level (MSL), positive above MSL."
            },
            "wellHeadProjected": {
              "title": "Well Head Position, Projected",
              "allOf": [
                {
                  "$ref": "#/components/schemas/projectedPosition"
                }
              ],
              "description": "The well's well head position in the native, projected CRS; vertical position is an elevation from mean sea level (MSL), positive above MSL."
            },
            "wellHeadWgs84": {
              "title": "WGS 84 Position",
              "allOf": [
                {
                  "$ref": "#/components/schemas/core_dl_geopoint"
                }
              ],
              "description": "The well's position in WGS 84 latitude and longitude."
            },
            "wellLocationType": {
              "$ref": "#/components/schemas/WellLocationType"
            },
            "wellNumberGovernment": {
              "title": "Government Number",
              "type": "string",
              "description": "Government assigned well number."
            },
            "wellNumberLicense": {
              "title": "Well License Number",
              "type": "string",
              "description": "License number of the well."
            },
            "wellNumberOperator": {
              "title": "Operator Number",
              "type": "string",
              "description": "Operator well number."
            },
            "wellPurpose": {
              "title": "Well Purpose",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WellPurpose"
                }
              ],
              "description": "POSC well purpose"
            },
            "wellStatus": {
              "title": "Well Status",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WellStatus"
                }
              ],
              "description": "POSC well status."
            },
            "wellType": {
              "title": "Well Type",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WellType"
                }
              ],
              "description": "Type of well."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "wellbore": {
          "title": "wellbore",
          "type": "object",
          "properties": {
            "ancestry": {
              "title": "Ancestry",
              "allOf": [
                {
                  "$ref": "#/components/schemas/LinkList"
                }
              ],
              "description": "The links to data, which constitute the inputs."
            },
            "meta": {
              "title": "Frame of Reference Meta Data",
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/MetaItem"
              },
              "description": "The meta data section linking the 'unitKey', 'crsKey' to self-contained definitions (persistableReference)"
            },
            "type": {
              "title": "Entity Type",
              "type": "string",
              "description": "The reference entity type as declared in common:metadata:entity:*."
            },
            "tags": {
              "title": "Tag Dictionary",
              "type": "object",
              "additionalProperties": {
                "$ref": "#/components/schemas/app__model__model_curated__Tags"
              },
              "description": "A generic dictionary of string keys mapping to string value. Only strings are permitted as keys and values.",
              "example": {
                "NameOfKey": "String value"
              }
            },
            "createTime": {
              "title": "Resource Object Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which initial version of this OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:46:20.163Z"
            },
            "createUser": {
              "title": "Resource Object Creation User Reference",
              "type": "string",
              "description": "The user reference, which created the first version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "modifyTime": {
              "title": "Resource Object Version Creation DateTime",
              "type": "string",
              "description": "Timestamp of the time at which this version of the OSDU resource object was created. Set by the System. The value is a combined date-time string in ISO-8601 given in UTC.",
              "format": "date-time",
              "example": "2020-12-16T11:52:24.477Z"
            },
            "modifyUser": {
              "title": "Resource Object Version Creation User Reference",
              "type": "string",
              "description": "The user reference, which created this version of this resource object. Set by the System.",
              "example": "some-user@some-company-cloud.com"
            },
            "acl": {
              "title": "Access Control List",
              "allOf": [
                {
                  "$ref": "#/components/schemas/TagDictionary"
                }
              ],
              "description": "The access control tags associated with this entity."
            },
            "data": {
              "title": "Wellbore Data",
              "allOf": [
                {
                  "$ref": "#/components/schemas/wellboreData"
                }
              ],
              "description": "Wellbore data container"
            },
            "id": {
              "title": "Wellbore ID",
              "type": "string",
              "description": "The unique identifier of the wellbore"
            },
            "kind": {
              "title": "Wellbore Kind",
              "type": "string",
              "description": "Well-known wellbore kind specification",
              "default": "osdu:wks:wellbore:0.0.1"
            },
            "legal": {
              "title": "Legal Tags",
              "allOf": [
                {
                  "$ref": "#/components/schemas/app__model__model_curated__Legal"
                }
              ],
              "description": "The geological interpretation's legal tags"
            },
            "version": {
              "title": "Entity Version Number",
              "type": "number",
              "description": "The version number of this wellbore; set by the framework."
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "wellboreData": {
          "title": "wellboreData",
          "type": "object",
          "properties": {
            "airGap": {
              "title": "Air Gap",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The gap between water surface and offshore drilling platform."
            },
            "block": {
              "title": "Block",
              "type": "string",
              "description": "The block name, in which the wellbore is located."
            },
            "country": {
              "title": "Country",
              "type": "string",
              "description": "The country, in which the wellbore is located. The country name follows the convention in ISO 3166-1 'English short country name', see https://en.wikipedia.org/wiki/ISO_3166-1"
            },
            "county": {
              "title": "County",
              "type": "string",
              "description": "The county name, in which the wellbore is located."
            },
            "dateCreated": {
              "title": "Creation Date and Time",
              "type": "string",
              "description": "The UTC date time of the entity creation",
              "format": "date-time"
            },
            "dateModified": {
              "title": "Last Modification Date and Time",
              "type": "string",
              "description": "The UTC date time of the last entity modification",
              "format": "date-time"
            },
            "drillingDaysTarget": {
              "title": "Target Drilling Days",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Target days for drilling wellbore."
            },
            "elevationReference": {
              "title": "Elevation Reference",
              "allOf": [
                {
                  "$ref": "#/components/schemas/SimpleElevationReference"
                }
              ],
              "description": "The wellbore's elevation reference from mean sea level (MSL), positive above MSL. This is where MD == 0 and TVD == 0"
            },
            "externalIds": {
              "title": "Array of External IDs",
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "An array of identities (e.g. some kind if URL to be resolved in an external data store), which links to external realizations of the same entity."
            },
            "field": {
              "title": "Field",
              "type": "string",
              "description": "The field name, to which the wellbore belongs."
            },
            "formationAtTd": {
              "title": "Formation at TD",
              "type": "string",
              "description": "The name of the formation at the wellbore's total depth."
            },
            "formationProjected": {
              "title": "Formation Projected",
              "type": "string",
              "description": "The name of the formation at the wellbore's projected depth. This property is questionable as there is not precise documentation available."
            },
            "hasAchievedTotalDepth": {
              "title": "Has Total Depth Been Achieved Flag",
              "type": "boolean",
              "description": "True (\"true\" of \"1\") indicates that the wellbore has acheieved total depth. That is, drilling has completed. False (\"false\" or \"0\") indicates otherwise. Not given indicates that it is not known whether total depth has been reached.",
              "default": true
            },
            "isActive": {
              "title": "Is Active Flag",
              "type": "boolean",
              "description": "True (=\"1\" or \"true\") indicates that the wellbore is active. False (=\"0\" or \"false\") indicates otherwise. It is the servers responsibility to set this value based on its available internal data (e.g., what objects are changing)."
            },
            "kickOffMd": {
              "title": "Kick-off MD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The kick-off point in measured depth (MD); for the main well the kickOffMd is set to 0."
            },
            "kickOffTvd": {
              "title": "Kick-off MD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Kickoff true vertical depth of the wellbore; for the main wellbore the kickOffMd is set to 0."
            },
            "locationWGS84": {
              "title": "Wellbore Shape WGS 84",
              "allOf": [
                {
                  "$ref": "#/components/schemas/GeoJsonFeatureCollection"
                }
              ],
              "description": "A 2D GeoJSON FeatureCollection defining wellbore location or trajectory in WGS 84 CRS."
            },
            "name": {
              "title": "Wellbore Name",
              "type": "string",
              "description": "The wellbore name"
            },
            "operator": {
              "title": "Operator",
              "type": "string",
              "description": "The operator of the wellbore."
            },
            "permitDate": {
              "title": "Permit Date",
              "type": "string",
              "description": "The wellbore's permit date.",
              "format": "date"
            },
            "permitNumber": {
              "title": "Permit Number",
              "type": "string",
              "description": "The wellbore's permit number or permit ID."
            },
            "plssLocation": {
              "title": "US PLSS Location",
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlssLocation"
                }
              ],
              "description": "A location described by the Public Land Survey System (United States)"
            },
            "propertyDictionary": {
              "title": "Property Dictionary",
              "type": "object",
              "description": "A dictionary structure, i.e. key/string value pairs, to carry additional wellbore properties."
            },
            "relationships": {
              "title": "Relationships",
              "allOf": [
                {
                  "$ref": "#/components/schemas/wellborerelationships"
                }
              ],
              "description": "The related entities."
            },
            "shape": {
              "title": "Wellbore Shape",
              "allOf": [
                {
                  "$ref": "#/components/schemas/Shape"
                }
              ],
              "description": "POSC wellbore trajectory shape."
            },
            "spudDate": {
              "title": "Spud Date",
              "type": "string",
              "description": "The date and time when activities to drill the borehole begin to create a hole in the earth. For a sidetrack, this is the date kickoff operations began. The format follows ISO 8601 YYYY-MM-DD extended format",
              "format": "date"
            },
            "state": {
              "title": "State",
              "type": "string",
              "description": "The state name, in which the wellbore is located."
            },
            "totalDepthMd": {
              "title": "Total MD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The measured depth of the borehole. If status is plugged, indicates the maximum depth reached before plugging. It is recommended that this value be updated about every 10 minutes by an assigned raw data provider at a site."
            },
            "totalDepthMdDriller": {
              "title": "Total MD Drilled",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The total depth along the wellbore as reported by the drilling contractor from 'elevationReference'. The unit definition is found via the property's unitKey' in 'frameOfReference.units' dictionary.."
            },
            "totalDepthMdPlanned": {
              "title": "Total MD Planned",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Planned measured depth for the wellbore total depth."
            },
            "totalDepthMdSubSeaPlanned": {
              "title": "Total MD Sub Sea Planned",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Planned measured for the wellbore total depth - with respect to seabed."
            },
            "totalDepthProjectedMd": {
              "title": "Total MD Projected",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The projected total measured depth of the borehole. This property is questionable as there is not precise documentation available."
            },
            "totalDepthTvd": {
              "title": "Total TVD",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The true vertical depth of the borehole. If status is plugged, indicates the maximum depth reached before plugging. It is recommended that this value be updated about every 10 minutes by an assigned raw data provider at a site."
            },
            "totalDepthTvdDriller": {
              "title": "Total TVD Drilled",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The total depth true vertical as reported by the drilling contractor from 'elevationReference', Downwards increasing. The unit definition is found via the property's unitKey' in 'frameOfReference.units' dictionary."
            },
            "totalDepthTvdPlanned": {
              "title": "Total TVD Planned",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Planned true vertical depth for the wellbore total depth."
            },
            "totalDepthTvdSubSeaPlanned": {
              "title": "Total TVD Sub Sea Planned",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Planned true vertical depth for the wellbore total depth - with respect to seabed."
            },
            "uwi": {
              "title": "Unique Wellbore Identifier",
              "type": "string",
              "description": "The unique wellbore identifier, aka. API number, US well number or UBHI. Codes can have 10, 12 or 14 digits depending on the availability of directional sidetrack (2 digits) and event sequence codes (2 digits)."
            },
            "wellHeadElevation": {
              "title": "Well Head Elevation",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "The wellbore's vertical position is an elevation from mean sea level (MSL), positive above MSL."
            },
            "wellHeadGeographic": {
              "title": "Well Head Position, Geographic",
              "allOf": [
                {
                  "$ref": "#/components/schemas/geographicPosition"
                }
              ],
              "description": "The wellbore's well head position in the native, geographic CRS; vertical position is an elevation from mean sea level (MSL), positive above MSL."
            },
            "wellHeadProjected": {
              "title": "Well Head Position, Projected",
              "allOf": [
                {
                  "$ref": "#/components/schemas/projectedPosition"
                }
              ],
              "description": "The wellbore's well head position in the native, projected CRS; vertical position is an elevation from mean sea level (MSL), positive above MSL."
            },
            "wellHeadWgs84": {
              "title": "WGS 84 Position",
              "allOf": [
                {
                  "$ref": "#/components/schemas/core_dl_geopoint"
                }
              ],
              "description": "The wellbore's position in WGS 84 latitude and longitude."
            },
            "wellboreNumberGovernment": {
              "title": "Government Number",
              "type": "string",
              "description": "Government assigned wellbore number."
            },
            "wellboreNumberOperator": {
              "title": "Operator Number",
              "type": "string",
              "description": "Operator wellbore number."
            },
            "wellborePurpose": {
              "title": "Wellbore Purpose",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WellborePurpose"
                }
              ],
              "description": "POSC wellbore purpose"
            },
            "wellboreStatus": {
              "title": "Wellbore Status",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WellboreStatus"
                }
              ],
              "description": "POSC wellbore status."
            },
            "wellboreType": {
              "title": "Wellbore Type",
              "allOf": [
                {
                  "$ref": "#/components/schemas/WellboreType"
                }
              ],
              "description": "Type of wellbore."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "wellborerelationships": {
          "title": "wellborerelationships",
          "type": "object",
          "properties": {
            "definitiveTimeDepthRelation": {
              "title": "Definitive Time-Depth Relation",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The definitive tome-depth relation providing the MD to seismic travel-time transformation."
            },
            "definitiveTrajectory": {
              "title": "Definitive Trajectory",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The definitive trajectory providing the MD to 3D space transformation."
            },
            "tieInWellbore": {
              "title": "Tie-in Wellbore",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The tie-in wellbore if this wellbore is a side-track."
            },
            "well": {
              "title": "Well",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The well to which this wellbore belongs."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "wellrelationships": {
          "title": "wellrelationships",
          "type": "object",
          "properties": {
            "asset": {
              "title": "Asset",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ToOneRelationship"
                }
              ],
              "description": "The asset this well belongs to."
            }
          },
          "description": "Used for data model allows extra fields which are not declared initially in the pydantic model"
        },
        "wgs84Position": {
          "title": "wgs84Position",
          "required": [
            "elevationFromMsl",
            "latitude",
            "longitude"
          ],
          "type": "object",
          "properties": {
            "elevationFromMsl": {
              "title": "Elevation from MSL",
              "allOf": [
                {
                  "$ref": "#/components/schemas/ValueWithUnit"
                }
              ],
              "description": "Elevation from Mean Seal Level, downwards negative. The unit definition is found via 'elevationFromMsl.unitKey' in 'frameOfReference.units' dictionary."
            },
            "latitude": {
              "title": "WGS 84 Latitude",
              "type": "number",
              "description": "WGS 84 latitude value in degrees (dega)"
            },
            "longitude": {
              "title": "WGS 84 Longitude",
              "type": "number",
              "description": "WGS 84 longitude value in degrees (dega)"
            }
          },
          "additionalProperties": false,
          "description": "The base model forbids fields which are not declared initially in the pydantic model"
        },
        "GetLogDataResponse": {
          "oneOf": [
            {
              "title": "SplitFormat",
              "type": "object",
              "properties": {
                "data": {
                  "title": "Data",
                  "anyOf": [
                    {
                      "type": "array",
                      "items": {
                        "anyOf": [
                          {
                            "type": "string"
                          },
                          {
                            "type": "integer"
                          },
                          {
                            "type": "number"
                          }
                        ]
                      }
                    },
                    {
                      "type": "array",
                      "items": {
                        "type": "array",
                        "items": {
                          "anyOf": [
                            {
                              "type": "string"
                            },
                            {
                              "type": "integer"
                            },
                            {
                              "type": "number"
                            }
                          ]
                        }
                      }
                    }
                  ]
                },
                "columns": {
                  "title": "Columns",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  }
                },
                "index": {
                  "title": "Index",
                  "type": "array",
                  "items": {
                    "anyOf": [
                      {
                        "type": "string"
                      },
                      {
                        "type": "integer"
                      },
                      {
                        "type": "number"
                      }
                    ]
                  }
                }
              },
              "required": [
                "data"
              ]
            },
            {
              "title": "IndexFormat",
              "type": "object",
              "properties": {
                "TODO": {
                  "title": "Todo",
                  "type": "string"
                }
              },
              "required": [
                "TODO"
              ]
            },
            {
              "title": "ColumnFormat",
              "type": "object",
              "properties": {
                "TODO": {
                  "title": "Todo",
                  "type": "string"
                }
              },
              "required": [
                "TODO"
              ]
            },
            {
              "title": "RecordsFormat",
              "type": "object",
              "properties": {
                "TODO": {
                  "title": "Todo",
                  "type": "string"
                }
              },
              "required": [
                "TODO"
              ]
            },
            {
              "title": "ValuesFormat",
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "type": "string"
                    },
                    {
                      "type": "integer"
                    },
                    {
                      "type": "number"
                    }
                  ]
                }
              }
            }
          ]
        },
        "UserRoles": {
          "required": [
            "roles"
          ],
          "type": "object",
          "properties": {
            "roles": {
              "type": "array",
              "description": "Array of arrays with each array containing subproject and role of the user for the subproject",
              "example": [
                [
                  "/spx01",
                  "admin"
                ],
                [
                  "/spx02",
                  "viewer"
                ]
              ],
              "items": {
                "type": "array",
                "example": [
                  "/spx01",
                  "admin"
                ],
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "Tenant": {
          "required": [
            "esd",
            "gcpid",
            "name"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "esd": {
              "type": "string"
            },
            "gcpid": {
              "type": "string"
            }
          },
          "example": {
            "name": "tnx01",
            "esd": "slb.p4d.cloud.slb-ds.com",
            "gcpid": "google_project_id"
          }
        },
        "UserAddRequest": {
          "required": [
            "email",
            "group",
            "path"
          ],
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Email address of the user"
            },
            "path": {
              "type": "string",
              "description": "Seismic store path in the format sd://tenant/subproject"
            },
            "group": {
              "type": "string",
              "description": "Role to be assigned to the user.",
              "enum": [
                "viewer",
                "editor",
                "admin"
              ]
            }
          },
          "example": {
            "email": "test@slb.com",
            "path": "sd://slb/testproject",
            "group": "editor"
          }
        },
        "UserRemoveRequest": {
          "required": [
            "email",
            "path"
          ],
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "description": "Email address of the user"
            },
            "path": {
              "type": "string",
              "description": "Seismic store path in the format sd://tenant/subproject"
            }
          },
          "example": {
            "email": "test@email",
            "path": "sd://slb/testproject"
          }
        },
        "LsDatasets": {
          "type": "array",
          "description": "Array of directories and datasets inside a subproject",
          "example": [
            "subdirA/",
            "subdirB/",
            "dataset01",
            "dataset02",
            "dataset03"
          ],
          "items": {
            "type": "string"
          }
        },
        "LsPaginatedDatasets": {
          "required": [
            "datasets",
            "nextPageCursor"
          ],
          "type": "object",
          "properties": {
            "datasets": {
              "type": "array",
              "description": "Array of datasets inside the subproject",
              "items": {
                "type": "string"
              }
            },
            "nextPageCursor": {
              "type": "string",
              "description": "Next cursor for pagination"
            }
          },
          "example": {
            "datasets": [
              "subdirA/",
              "subdirB/",
              "dataset01"
            ],
            "nextPageCursor": "abc1234"
          }
        },
        "TenantCreateBody": {
          "required": [
            "default_acl",
            "des",
            "gcpid"
          ],
          "type": "object",
          "properties": {
            "gcpid": {
              "type": "string",
              "description": "Google cloud project id associated with the tenant"
            },
            "des": {
              "type": "string",
              "description": "Entitlements group sub domain. For instance, if the entitlements group is group-a.slb.env.cloud.com, the esd value is slb.env.cloud.com"
            },
            "default_acl": {
              "type": "string",
              "description": "Entitlements authorization group to manage tenant administrators"
            }
          },
          "example": {
            "gcpid": "google_project_id",
            "esd": "slb.p4d.cloud.slb-ds.com",
            "default_acl": "authgroup@data_partition.com"
          }
        },
        "Status": {
          "required": [
            "status"
          ],
          "type": "object",
          "properties": {
            "status": {
              "type": "string"
            }
          },
          "example": {
            "status": "running"
          }
        },
        "DatasetRegisterBody": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "gtags": {
              "type": "array",
              "description": "Array of global tags associated with the dataset metadata. Once assigned, they can be used to filter datasets",
              "items": {
                "type": "string"
              }
            },
            "seismicmeta": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {}
                }
              },
              "description": "Seismic metadata to be stored as dataecosystem storage record"
            }
          },
          "example": {
            "type": "segy",
            "gtags": [
              "tagA",
              "tagB",
              "tagC"
            ],
            "seismicmeta": {
              "kind": "osdu:sdms:seismic3d:1.0.0",
              "legal": {
                "legaltags": [
                  "legal-tag"
                ],
                "otherRelevantDataCountries": [
                  "US"
                ]
              },
              "data": {
                "msg": "sample data"
              }
            }
          }
        },
        "DatasetPatch": {
          "type": "object",
          "properties": {
            "dataset_new_name": {
              "type": "string",
              "description": "New name for the dataset"
            },
            "metadata": {
              "type": "object",
              "properties": {},
              "description": "Generic information about the dataset stored as key value pairs"
            },
            "filemetadata": {
              "type": "object",
              "properties": {},
              "description": "Number of objects and the size in bytes of the dataset"
            },
            "last_modified_date": {
              "type": "string",
              "description": "Date when the dataset was last modified"
            },
            "gtags": {
              "type": "array",
              "description": "Array of tags associated with the dataset. After patching these tags, they can be used to filter the datasets",
              "items": {
                "type": "string"
              }
            },
            "ltag": {
              "type": "string",
              "description": "Legal tag associated with the dataset"
            },
            "readonly": {
              "type": "boolean",
              "description": "True if the dataset is readonly"
            },
            "seismicmeta": {
              "type": "object",
              "properties": {
                "kind": {
                  "type": "string"
                },
                "data": {
                  "type": "object",
                  "properties": {}
                }
              },
              "description": "Seismic metadata associated with the dataset which is used to create a data ecosystem storage record"
            }
          },
          "example": {
            "dataset_new_name": "dsx02",
            "metadata": {
              "f1": "v1",
              "f2": "v2",
              "f3": "v3"
            },
            "filemetadata": {
              "f1": "v1",
              "f2": "v2",
              "f3": "v3"
            },
            "last_modified_date": "Thu Jul 16 2020 04:37:41 GMT+0000 (Coordinated Universal Time)",
            "gtags": [
              "tag01",
              "tag02",
              "tag03"
            ],
            "ltag": "Slb-Private-USA-EHC",
            "readonly": false,
            "seismicmeta": {
              "kind": "slb:seistore:seismic2d:1.0.0",
              "legal": {
                "legaltags": [
                  "Slb-Private-USA-EHC"
                ],
                "otherRelevantDataCountries": [
                  "US"
                ]
              },
              "data": {
                "msg": "sample data"
              }
            }
          }
        },
        "DatasetPermission": {
          "required": [
            "delete",
            "read",
            "write"
          ],
          "type": "object",
          "properties": {
            "read": {
              "type": "boolean",
              "description": "True if the user has read permission on the dataset"
            },
            "write": {
              "type": "boolean",
              "description": "True if the user has write permission on the dataset"
            },
            "delete": {
              "type": "boolean",
              "description": "True if the user has delete permission on the dataset"
            }
          },
          "example": {
            "read": true,
            "write": false,
            "delete": false
          }
        },
        "DatasetAndDirectories": {
          "required": [
            "datasets",
            "directories"
          ],
          "type": "object",
          "properties": {
            "datasets": {
              "type": "array",
              "description": "Array of datasets inside the subproject",
              "items": {
                "type": "string"
              }
            },
            "directories": {
              "type": "array",
              "description": "Array of directories inside the subproject",
              "items": {
                "type": "string"
              }
            }
          },
          "example": {
            "datasets": [
              "/a/b/c/dsx01",
              "/a/b/c/dsx02"
            ],
            "directories": [
              "/a/b/c/d",
              "/a/b/c/e"
            ]
          }
        },
        "DatasetCheckList": {
          "required": [
            "datasets"
          ],
          "type": "object",
          "properties": {
            "datasets": {
              "type": "array",
              "description": "Array of datasets inside the subproject",
              "items": {
                "type": "string"
              }
            }
          },
          "example": {
            "datasets": [
              "a/b/c/dsx01",
              "a/b/c/dsx02"
            ]
          }
        },
        "AccessToken": {
          "required": [
            "access_token",
            "expires_in",
            "token_type"
          ],
          "type": "object",
          "properties": {
            "access_token": {
              "type": "string",
              "description": "Access token"
            },
            "token_type": {
              "type": "string",
              "description": "Type of the token"
            },
            "expires_in": {
              "type": "number",
              "description": "Time in seconds for expiration of the access token"
            }
          },
          "example": {
            "access_token": "ya29.fgdgsdngevrjbinb0ednberoibnerbnerber-fdsfwefwe_cece",
            "token_type": "Bearer",
            "expires_in": 3600
          }
        },
        "ImpToken": {
          "required": [
            "expires_in",
            "impersonation_token",
            "token_type"
          ],
          "type": "object",
          "properties": {
            "impersonation_token": {
              "type": "string",
              "description": "Impersonation token"
            },
            "token_type": {
              "type": "string",
              "description": "Type of the token"
            },
            "expires_in": {
              "type": "number",
              "description": "Time in seconds for the expiration of the impersonation token"
            }
          },
          "example": {
            "impersonation_token": "ya29.fgdgsdngevrjbinb0ednberoibnerbanerber-fdsfwefwe_cece",
            "token_type": "Bearer",
            "expires_in": 3600
          }
        },
        "Resource": {
          "required": [
            "resource"
          ],
          "type": "object",
          "properties": {
            "resource": {
              "type": "string"
            },
            "readonly": {
              "type": "boolean"
            }
          }
        },
        "ImpTokenRequest": {
          "required": [
            "refresh-url",
            "resources",
            "token"
          ],
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "Impersonation token that was previously issued"
            },
            "resources": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Resource"
              }
            },
            "refresh-url": {
              "type": "string",
              "description": "A web service endpoint that the seismic store service will invoke to check if the impersonation token can be refreshed"
            }
          },
          "example": {
            "token": "ya29.fgdgsdngevrjbinb0exdnberoibnerbnerber-fdsfwefwe_cece.rfd43f3",
            "resources": [
              {
                "resource": "sd://tnx01/spx01",
                "readonly": true
              },
              {
                "resource": "sd://tnx01/spx02",
                "readonly": false
              },
              {
                "resource": "sd://tnx01/spx03"
              }
            ],
            "refresh-url": "https://httpstat.us/200"
          }
        },
        "ImpTokenPatchRequest": {
          "required": [
            "refresh-url",
            "token"
          ],
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "Impersonation token that was previously issued"
            },
            "refresh-url": {
              "type": "string",
              "description": "New endpoint that the seismic store service will invoke to check if the impersonation token can be refreshed"
            }
          },
          "example": {
            "token": "ya29.fgdgsdngevrjbinb0exdnberoibnerbnerber-fdsfwefwe_cece.rfd43f3",
            "refresh-url": "https://httpstat.us/200"
          }
        },
        "RefreshTokenRequest": {
          "required": [
            "token"
          ],
          "type": "object",
          "properties": {
            "token": {
              "type": "string",
              "description": "Impersonation token"
            }
          },
          "example": {
            "token": "eyJhbxGccCI6IkpX.fgdgsdngfwe_cec.xc2Vpc21pYy1ddzZXJ2aWNl"
          }
        },
        "SubProjectCreateBody": {
          "required": [
            "admin",
            "storage_class",
            "storage_location"
          ],
          "type": "object",
          "properties": {
            "admin": {
              "type": "string",
              "description": "Administrator for the subproject"
            },
            "storage_class": {
              "type": "string",
              "description": "Storage class for the bucket"
            },
            "storage_location": {
              "type": "string",
              "description": "Storage location for the bucket"
            },
            "acls": {
              "type": "object",
              "properties": {
                "admins": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "viewers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "description": "ACLs with admin groups and viewere groups"
            }
          },
          "example": {
            "admin": "test@email",
            "storage_class": "MULTI_REGIONAL",
            "storage_location": "US",
            "acls": {
              "admins": [
                "service.seistore.p4d.tenant01.subproject01.admin@slb.p4d.cloud.slb-ds.com",
                "service.seistore.p4d.tenant01.subproject01.editor@slb.p4d.cloud.slb-ds.com"
              ],
              "viewers": [
                "service.seistore.p4d.tenant01.subproject01.viewer@slb.p4d.cloud.slb-ds.com"
              ]
            }
          }
        },
        "SubProject": {
          "required": [
            "admin",
            "gcs_bucket",
            "ltag",
            "name",
            "storage_class",
            "storage_location",
            "tenant"
          ],
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name of the subproject"
            },
            "tenant": {
              "type": "string",
              "description": "Name of the tenant"
            },
            "storage_class": {
              "type": "string",
              "description": "Storage class for the bucket"
            },
            "storage_location": {
              "type": "string",
              "description": "Storage location for the bucket"
            },
            "admin": {
              "type": "string",
              "description": "Administrator for the subproject"
            },
            "ltag": {
              "type": "string",
              "description": "Legal tag for the subproject"
            },
            "gcs_bucket": {
              "type": "string",
              "description": "Cloud storage bucket associated with the subproject"
            },
            "acls": {
              "type": "object",
              "properties": {
                "admins": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                "viewers": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "description": "ACLs with admin groups and viewere groups"
            }
          },
          "example": {
            "name": "spx01",
            "tenant": "tnx01",
            "storage_class": "MULTI_REGIONAL",
            "storage_location": "US",
            "admin": "test@email",
            "ltag": "Slb-Private-USA-EHC",
            "gcs_bucket": "subproject-bucket",
            "acls": {
              "admins": [
                "service.seistore.p4d.tenant01.subproject01.admin@slb.p4d.cloud.slb-ds.com",
                "service.seistore.p4d.tenant01.subproject01.editor@slb.p4d.cloud.slb-ds.com"
              ],
              "viewers": [
                "service.seistore.p4d.tenant01.subproject01.viewer@slb.p4d.cloud.slb-ds.com"
              ]
            }
          }
        }
      },
      "securitySchemes": {
        "JWT": {
          "type": "apiKey",
          "name": "Authorization",
          "in": "header"
        }
      }
    }
  }